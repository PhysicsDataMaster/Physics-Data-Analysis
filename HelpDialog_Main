# START SECTION 1 -- PART 1

<!-- =============================================== -->

<!-- SECTION 1 -- INTRODUCTION + STRUCTURE OVERVIEW -->

<!-- =============================================== -->

<h1 id="section1">Section 1 -- Introduction + Structure Overview</h1>

<p>

Welcome to the <strong>Physics Data Collection</strong> system for Google Sheets.

This interface supports importing, analyzing, and exporting experimental physics data using beginner-friendly 

workflows and advanced customization tools.

</p>

<p>

Originally designed for oscillation and damping systems (e.g., carts and springs), the system now supports all

 kinds of physics datasets via a modular, extensible Apps Script backend.

</p>

<h2>
n
 System Purpose:</h2>

<ul>

<li>Import and manage CSV datasets from Drive folders</li>

<li>Validate, format, and organize experimental data</li>

<li>Perform regression analysis and visualize fits</li>

<li>Generate LaTeX equations and export to JSON or MATLAB</li>

<li>Enable custom extensions via Apps Script or API hooks</li>

</ul>

<h2>
n
 User Levels Supported:</h2>

<ul>

<li><strong>Beginner Users</strong> -- guided menu-based workflows</li>

<li><strong>Intermediate Users</strong> -- formula editing and debugging</li>

<li><strong>Advanced Users</strong> -- regression injection, scripting, MATLAB/JSON export</li>

</ul>

<h2>
n
 Table of Contents:</h2>

<ul>

  <li><a href="#section1">Section 1 -- Introduction + Structure Overview</a></li>

  <li><a href="#section2">Section 2 -- How to Use the System</a></li>

  <li><a href="#section3">Section 3 -- Function Reference (Line-by-Line)</a></li>

  <li><a href="#section4">Section 4 -- API Index (Searchable AOEZ)</a></li>

  <li><a href="#section5">Section 5 -- Interval Detection + Analysis Tools</a></li>

  <li><a href="#section6">Section 6 -- Regression Models + LaTeX Export</a></li>

  <li><a href="#section7">Section 7 -- CSV Import + Sheet Management</a></li>

  <li><a href="#section8">Section 8 -- Automation and Batch Operations</a></li>

  <li><a href="#section9">Section 9 -- Advanced Features and Customization</a></li>

  <li><a href="#section10">Section 10 -- MATLAB Integration and Export Tools</a></li>

  <li><a href="#section11">Section 11 -- Glossary, License, Version History</a></li>

</ul>

<h2>
n
 Glossary Access:</h2>

<p>

For definitions of terms such as <code>Regression</code>, <code>Interval Tag</code>, <code>System 

Sheet</code>, or <code>Parameter Sweep</code>, visit:

®
 <a href="#section11">Section 11 -- Glossary</a>

</p>

<details>

<summary><strong>Example: Beginner Workflow (Oscillations or Damping Trials)</strong></summary>

<pre>

1. Go to 
n
 CSV Import 
®
 Setup Folders

2. Use Test Folder Access to validate Drive links

3. Click Refresh CSV Files to import data

4. View a CSV data sheet (e.g. Cart_Trial_1)

5. Use 
n
 Interval Tools 
®
 Auto Mark or Manual Tag

6. Open 
n
 Data Processing 
®
 Set Formula

7. Run 
n
 Regression 
®
 Run Regression

8. View output in Regression Results tab

</pre>

</details>

<!--

Glossary Terms Referenced:

- Regression

- Interval

- System Sheet

- CSV

- Parameter Sweep

-->

# END SECTION 1 -- PART 1

# START SECTION 1 -- PART 2

<!--

===============================================

SECTION 1 -- CONTINUED: SYSTEM DESIGN PRINCIPLES

===============================================

-->

<h2 id="section1_1">1.1 System Design Principles</h2>

<p>


This system is built on the following principles:

</p>

<ul>

<li><strong>Transparency:</strong> All imported and processed data remains accessible in Google Sheets -- no 

"hidden" processing layers.</li>

<li><strong>Modularity:</strong> Features are modular -- you can use just CSV import, or the full regression 

workflow.</li>

<li><strong>Extensibility:</strong> The system can be extended to support custom regression models, advanced 

APIs, and additional physics domains.</li>

<li><strong>Robustness:</strong> Error logging, data validation, and folder access checks are provided to 

ensure reliable operation.</li>

<li><strong>Usability:</strong> Suitable for:

    <ul>

    <li>Beginner users -- guided menus</li>

    <li>Intermediate users -- workflow tips and error diagnostics</li>

    <li>Advanced users -- direct API hooks, export options</li>

    </ul>

</li>

</ul>

<!-- Example Block -- Safe embedding -->

<details>

<summary>Example: Advanced User Workflow with API Export</summary>

<pre>

1. Import CSVs from high-speed camera data

2. Run Interval Reduction (factor 5)

3. Fit advanced damping model: A * exp(-b * t) * cos(
w
t + 
f
)

4. Export Regression Results via REST API

5. Post-process results in Python (e.g., matplotlib visualization)

</pre>

</details>

<h2 id="section1_2">1.2 Project Context & History</h2>

<p>

The Physics Data Collection system has evolved through multiple versions:

</p>

<ul>

<li><strong>Version 3.4OE3.6:</strong> Initial full master merges, system sheets fixes, regression 

scaffolding.</li>

<li><strong>Version 4.x:</strong> Menu restructuring, Home Pages, Error Log color scale refinements.</li>

<li><strong>Version 5.0:</strong> Major modularization -- Regression Results sheet, Interval Analysis options, 

selective CSV refresh.</li>

<li><strong>Version 5.1 (current):</strong> Split Help Dialog, Sidebar loading, full source export, roadmap 

for Regression API and ML integration.</li>

</ul>

<p>

This version fully supports documentation targets of ~15K+ words and is designed to serve as an official user 

manual and reference.

</p>

<p>

<a href="#section2">Continue to Section 2 -- Menu Structure & User Workflows</a>

</p>

<!--

Glossary Terms Referenced:

- REST API

- Interval Reduction

- Regression Results

- ML integration

- Sidebar

-->

# END SECTION 1 -- PART 2

# START SECTION 1 -- PART 3

<!--

===============================================

SECTION 1.3 -- SYSTEM ARCHITECTURE

===============================================

-->

<h2 id="section1_3">1.3 System Architecture</h2>

<p>

The Physics Data Collection system is implemented as a modular <strong>Google Apps Script</strong> project, 

integrated with Google Sheets.

Its architecture is designed to separate concerns and support extensibility:

</p>

<ul>

<li><strong>Data Layer:</strong> Google Sheets -- holds raw CSV imports, Data Validation, Interval Analysis, 

Data Processing, Regression Results.</li>

<li><strong>Processing Layer:</strong> Apps Script functions -- import CSVs, clean data, run regressions, 

update sheets.</li>

<li><strong>UI Layer:</strong> Dynamic menu, Help Dialog (split into subpages for performance), Sidebar 

loading, user prompts.</li>

<li><strong>Error Logging Layer:</strong> Error Log sheet with black-grey-white color scale and full activity 


logging.</li>

<li><strong>APIs & External Hooks:</strong> Ready for REST API export and future ML API integrations.</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Example: Architecture Diagram (Text Form)</summary>

<pre>

Google Drive Folders 
®
 CSV Files

         
¯

CSV Manager 
®
 importFolderCSVs()

         
¯

Google Sheets:

  - Data

  - Interval Analysis

  - Data Processing

  - Regression Results

         
¯

Processing Layer:

  - runRegression()

  - applyIntervalReduction()

         
¯

Error Log

         
¯

APIs (Future): REST API Export 
®
 External tools (Python, MATLAB)

</pre>

</details>

<h3>Implementation Notes:</h3>

<p>

- The system is entirely implemented in <strong>client-side Apps Script</strong> -- no external backend 

required.

- All functions are exposed via menu entries or Help Dialog links.

- The system respects Google Sheets conventions -- all imported/processed data remains fully user-visible.

</p>

<p>

<a href="#section1_4">Next: 1.4 -- Folder Structure & SYSTEM_SHEETS</a>

</p>

<!--

Glossary Terms Referenced:

- REST API

- SYSTEM_SHEETS

- Regression Results

- Interval Reduction

-->

# END SECTION 1 -- PART 3

# START SECTION 1 -- PART 4

<!--

===============================================

SECTION 1.4 -- FOLDER STRUCTURE & SYSTEM_SHEETS

===============================================

-->

<h2 id="section1_4">1.4 Folder Structure & SYSTEM_SHEETS</h2>

<p>

The system uses a clear and configurable folder structure for data import.

This is defined in the Apps Script constant <code>FOLDER_CONFIG</code>.

</p>

<p>

Each folder corresponds to a specific dataset condition (e.g. Cart + 0.250kg) and is color-coded in the sheet 

tabs and Data sheet.

</p>

<!-- Example -- Safe Embed -->

<details>

<summary>Example: FOLDER_CONFIG Definition (Partial)</summary>

<pre>

const FOLDER_CONFIG = {

  "Cart": {

    id: "FOLDER_ID_1",

    color: "#ff0000",

    order: 1

  },

  "Cart + 0.250kg": {

    id: "FOLDER_ID_2",

    color: "#ff8c00",

    order: 2

  },

  ...

};

</pre>

</details>

<h3>Folder Management:</h3>


<ul>

<li>Use the menu <strong>CSV Import & Folders 
®
 Setup Folders</strong> to display current configuration.</li>

<li>Use <strong>Test Folder Access</strong> to verify Google Drive folder access permissions.</li>

<li>Folders can be updated by editing <code>FOLDER_CONFIG</code> and reloading the spreadsheet.</li>

</ul>

<h3>SYSTEM_SHEETS:</h3>

<p>

The system defines a set of <strong>SYSTEM_SHEETS</strong> that are reserved for core functions and should not

 be processed as raw data:

</p>

<!-- Example -- Safe Embed -->

<details>

<summary>Example: SYSTEM_SHEETS Definition</summary>

<pre>

const SYSTEM_SHEETS = [

  "Data",

  "Data Validation",

  "Interval Analysis",

  "Data Processing",

  "Regression Results",

  "Error Log"

];

</pre>

</details>

<h3>Notes:</h3>

<ul>

<li>These sheets are auto-protected (warning only) using <code>setupSystemSheetsProtection()</code>.</li>

<li>Home Pages for folders (<code>Home - FolderName</code>) are also protected and managed automatically.</li>

<li>Functions such as <code>getNonSystemSheets()</code> ensure SYSTEM_SHEETS are excluded from data cleaning, 

processing, and regression runs.</li>

</ul>

<p>

<a href="#section1_5">Next: 1.5 -- Data Flow Example (Worked Example)</a>

</p>

<!--

Glossary Terms Referenced:

- FOLDER_CONFIG

- SYSTEM_SHEETS

- Home Pages

- Data Validation

- Interval Analysis

- Regression Results

-->

# END SECTION 1 -- PART 4

# START SECTION 1 -- PART 5

<!--

===============================================

SECTION 1.5 -- DATA FLOW EXAMPLE (WORKED EXAMPLE)

===============================================

-->

<h2 id="section1_5">1.5 Data Flow Example (Worked Example)</h2>

<p>

This section provides a step-by-step example of how data flows through the system, from CSV import to 

regression results.

</p>

<h3>Scenario:</h3>

<p>

You have performed an oscillation experiment with a cart and spring system, varying the mass.

Each trial produces a CSV file containing <code>Time (ms)</code> vs. <code>Position (cm)</code> data.

</p>

<h3>Step-by-Step Example:</h3>

<ol>

<li>

<strong>Prepare Google Drive Folders:</strong><br>

Create folders:

<ul>

<li>Cart</li>

<li>Cart + 0.250kg</li>

<li>Cart + 0.500kg</li>

</ul>

Place CSV files into each folder.

</li>

<li>

<strong>Configure FOLDER_CONFIG:</strong><br>

Edit <code>FOLDER_CONFIG</code> in Apps Script to match your folder IDs.

</li>

<li>

<strong>Run Setup:</strong><br>


Menu 
®
 <strong>CSV Import & Folders 
®
 Setup Folders</strong><br>

Menu 
®
 <strong>CSV Import & Folders 
®
 Test Folder Access</strong>

</li>

<li>

<strong>Import CSV Files:</strong><br>

Menu 
®
 <strong>CSV Import & Folders 
®
 Refresh CSV Files</strong><br>

Sheets will be created/updated per CSV.

</li>

<li>

<strong>Check Data Sheet:</strong><br>

Menu 
®
 <strong>Sheet Management 
®
 Update Data Sheet</strong><br>

Data sheet summarizes all imported sheets.

</li>

<li>

<strong>Run Interval Analysis:</strong><br>

Menu 
®
 <strong>Data Processing 
®
 Interval Analysis</strong><br>

Review time step uniformity, detect gaps.

</li>

<li>

<strong>Edit Regression Formula:</strong><br>

Menu 
®
 <strong>Data Processing 
®
 Edit Data Processing Formula</strong><br>

Enter formula (e.g.): <code>A * exp(-b * t) * cos(
w
t + 
f
)</code><br>

Select algorithm (e.g. <code>Levenberg-Marquardt</code>).

</li>

<li>

<strong>Run Regression:</strong><br>

Menu 
®
 <strong>Data Processing 
®
 Run Regression</strong><br>

Regression Results sheet is updated with fit parameters.

</li>

<li>

<strong>Review Results:</strong><br>

Open <strong>Regression Results</strong> sheet.<br>

Optionally, export results via future API hooks (v5.2+ planned).

</li>

</ol>

<!-- Example -- Safe Embed -->

<details>

<summary>Example: Sample Regression Result</summary>

<pre>

Formula: A * exp(-b * t) * cos(
w
t + 
f
)

Algorithm: Levenberg-Marquardt

R²: 0.9932

Parameters:

A = 12.5

b = 0.032

w
 = 6.28

f
 = 0.1

</pre>

</details>

<p>

This example demonstrates a complete Beginner 
®
 Intermediate workflow.

Advanced users can integrate API hooks, automate regression runs, and export results for external 

visualization.

</p>

<p>

<a href="#section1_6">Next: 1.6 -- Error Logging & Protection Principles</a>

</p>

<!--

Glossary Terms Referenced:

- FOLDER_CONFIG

- Regression

- Interval Analysis

- Regression Results

- API

- R²

-->

# END SECTION 1 -- PART 5

# START SECTION 1 -- PART 6

<!--

===============================================

SECTION 1.6 -- ERROR LOGGING & PROTECTION PRINCIPLES

===============================================

-->

<h2 id="section1_6">1.6 Error Logging & Protection Principles</h2>

<p>

Robust error handling and transparent logging are core principles of the system's design.

</p>

<h3>Error Logging:</h3>

<p>


All significant system activities (successes, warnings, errors) are logged to the <strong>Error Log</strong> 

sheet.

</p>

<ul>

<li>Uses a consistent timestamped format.</li>

<li>Color scale:

    <ul>

    <li>Black background 
®
 white text 
®
 <strong>ERROR</strong></li>

    <li>Grey background 
®
 black text 
®
 <strong>WARNING</strong></li>

    <li>White background 
®
 black text 
®
 <strong>SUCCESS</strong></li>

    </ul>

</li>

<li>Errors and warnings from:

    <ul>

    <li>CSV import</li>

    <li>Folder access checks</li>

    <li>Regression runs</li>

    <li>Data cleaning</li>

    <li>Interval Analysis</li>

    <li>Protection updates</li>

    </ul>

</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Example: Typical Error Log Entries</summary>

<pre>

[Timestamp]    [Type]    [Message]

2025-06-09    ERROR    Folder "Cart + 0.750kg": Access denied

2025-06-09    WARNING    Sheet "Cart + 0.500kg": Detected time gaps

2025-06-09    SUCCESS    Regression completed on "Cart + 0.250kg"

</pre>

</details>

<h3>Protection Principles:</h3>

<p>

The system automatically applies <strong>protection (warning only)</strong> to SYSTEM_SHEETS and Home Pages:

</p>

<ul>

<li>Function: <code>setupSystemSheetsProtection()</code></li>

<li>Applies to:

    <ul>

    <li>Data</li>

    <li>Data Validation</li>

    <li>Interval Analysis</li>

    <li>Data Processing</li>

    <li>Regression Results</li>

    <li>Error Log</li>

    <li>Home Pages (Home - FolderName)</li>

    </ul>

</li>

</ul>

<h3>Rationale:</h3>

<ul>

<li>Maintains user awareness -- sheets remain editable but protected by clear warning banners.</li>

<li>Prevents accidental deletion or modification of critical sheets.</li>

<li>System remains fully compatible with Google Sheets multi-user environments -- no locked sheets.</li>

</ul>

<p>

Advanced users can customize protection behavior by modifying <code>setupSystemSheetsProtection()</code> to 

apply full protection if desired.

</p>

<p>

<a href="#section1_7">Next: 1.7 -- Target User Levels & System Scaling</a>

</p>

<!--

Glossary Terms Referenced:

- Error Log

- Protection

- SYSTEM_SHEETS

- setupSystemSheetsProtection()

-->

# END SECTION 1 -- PART 6

# START SECTION 1 -- PART 7

<!--

===============================================

SECTION 1.7 -- TARGET USER LEVELS & SYSTEM SCALING

===============================================

-->

<h2 id="section1_7">1.7 Target User Levels & System Scaling</h2>


<p>

The system is intentionally designed to support a wide range of user experience levels:

</p>

<h3>Beginner Users:</h3>

<ul>

<li>Menu-driven workflows -- no scripting required.</li>

<li>Step-by-step examples provided in the Help Dialog.</li>

<li>Safe defaults -- protections, confirmations, clear logging.</li>

<li>Common workflow: import CSV 
®
 run Interval Analysis 
®
 run Regression.</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Example Beginner Workflow</summary>

<pre>

1. Refresh CSV Files

2. Update Data Sheet

3. Run Interval Analysis

4. Edit Data Processing Formula

5. Run Regression

6. View Regression Results

</pre>

</details>

<h3>Intermediate Users:</h3>

<ul>

<li>Customize regression formulas.</li>

<li>Experiment with different regression algorithms.</li>

<li>Use Interval Reduction to optimize data.</li>

<li>Manually review and clean data as needed.</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Example Intermediate Enhancements</summary>

<pre>

- Compare Nelder-Mead vs. Levenberg-Marquardt results.

- Use Interval Reduction factor 3 to reduce noise.

- Export Regression Results for plotting in Python.

</pre>

</details>

<h3>Advanced Users:</h3>

<ul>

<li>Integrate with external APIs (planned v5.2+).</li>

<li>Automate batch regression across multiple datasets.</li>

<li>Customize SYSTEM_SHEETS handling and protection.</li>

<li>Develop advanced regression models (e.g. damped sine with non-linear terms).</li>

<li>Leverage Sidebar sub-pages for advanced configuration.</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Example Advanced Workflow</summary>

<pre>

1. Apply Interval Reduction (factor 5).

2. Run Regression with custom API export.

3. POST results to external server for real-time dashboarding.

4. Use machine learning to refine model parameters.

</pre>

</details>

<h3>System Scaling:</h3>

<ul>

<li>Designed to handle:

    <ul>

    <li>Multiple Drive folders.</li>

    <li>Large numbers of CSVs.</li>

    <li>High-frequency data (e.g. sub-ms resolution).</li>

    <li>Multiple regression models.</li>

    <li>Cross-sheet validation (via Data Validation Sheet).</li>

    </ul>

</li>

<li>Performance optimizations:

    <ul>

    <li>Sidebar split loading (HelpDialog_Functions1 / Functions2).</li>

    <li>Selective CSV refresh.</li>

    <li>Efficient Interval Analysis algorithms.</li>

    <li>Targeted Error Check routines.</li>

    </ul>

</li>

</ul>

<p>

<a href="#section2">Continue to Section 2 -- Menu Structure & User Workflows</a>

</p>


<!--

Glossary Terms Referenced:

- Interval Reduction

- Regression

- Regression Results

- API

- SYSTEM_SHEETS

- Sidebar

-->

# END SECTION 1 -- PART 7

# START SECTION 2 -- PART 1

<!--

===============================================

SECTION 2 -- MENU STRUCTURE & USER WORKFLOWS

===============================================

-->

<h1 id="section2">Section 2 -- Menu Structure & User Workflows</h1>

<p>

The system provides a comprehensive and intuitive menu under the <strong>"CSV Manager"</strong> menu in Google

 Sheets.

This menu is dynamically generated by the <code>onOpen()</code> function.

</p>

<p>

Menu options are organized to support user workflows from beginner to advanced:

</p>

<ul>

<li><strong>CSV Import & Folders</strong> -- Manage Drive folders and CSV imports.</li>

<li><strong>Sheet Management</strong> -- Organize sheets, update summaries, create Home Pages.</li>

<li><strong>Data Cleaning</strong> -- Clean quote marks, manage negative time rows.</li>

<li><strong>Data Processing</strong> -- Run validations, interval analysis, and regressions.</li>

<li><strong>Error Checking</strong> -- Run checks and view the Error Log.</li>

<li><strong>Help</strong> -- Access this Help Dialog and its sub-sections.</li>

</ul>

<h2 id="section2_1">2.1 Full v5.1 Menu Structure</h2>

<!-- Example -- Safe Embed -->

<details>

<summary>Full v5.1 Menu Structure (as of current version)</summary>

<pre>

CSV Manager

nnn
 CSV Import & Folders

n
   
nnn
 Refresh CSV Files

n
   
nnn
 Setup Folders

n
   
nnn
 Test Folder Access

nnn
 Sheet Management

n
   
nnn
 Update Data Sheet

n
   
nnn
 Order Sheets

n
   
nnn
 Create Home Pages (All Folders)

nnn
 Data Cleaning

n
   
nnn
 Clean Quote Marks

n
   
nnn
 Clean Current Sheet

n
   
nnn
 Hide Negative Time Rows

n
   
nnn
 Delete Negative Time Rows

nnn
 Data Processing

n
   
nnn
 Create Data Validation Sheet

n
   
nnn
 Interval Analysis

n
   
nnn
 Create Data Processing Sheet

n
   
nnn
 Edit Data Processing Formula

n
   
nnn
 Run Regression

n
   
nnn
 Create Regression

n
   
nnn
 Open Data Processing Sheet

nnn
 Error Checking

n
   
nnn
 Run Error Check

n
   
nnn
 View Error Log

n
   
nnn
 Update Error Log Color Scale

nnn
 Help

    
nnn
 Help

</pre>

</details>

<p>

This menu is fully versioned -- matches <strong>v5.1</strong> spec -- and supports all documented functions.

</p>

<p>

<a href="#section2_2">Next: 2.2 -- Beginner User Workflow Example</a>

</p>

<!--

Glossary Terms Referenced:

- CSV

- Data Cleaning

- Interval Analysis

- Regression


- Error Log

-->

# END SECTION 2 -- PART 1

# START SECTION 2 -- PART 2

<!--

===============================================

SECTION 2.2 -- BEGINNER USER WORKFLOW EXAMPLE

===============================================

-->

<h2 id="section2_2">2.2 Beginner User Workflow Example</h2>

<p>

This section provides a practical step-by-step example of a typical beginner user workflow.

</p>

<h3>Scenario:</h3>

<p>

You are a student conducting a simple damping experiment using a cart and spring system.

You have CSV files from different mass configurations, and want to analyze the data to extract damping 

constants.

</p>

<h3>Step-by-Step Beginner Workflow:</h3>

<ol>

<li>

<strong>Setup Drive Folders:</strong><br>

Place CSV files in the corresponding Drive folders:

<ul>

<li>Cart</li>

<li>Cart + 0.250kg</li>

<li>Cart + 0.500kg</li>

</ul>

</li>

<li>

<strong>Configure FOLDER_CONFIG:</strong><br>

Verify that <code>FOLDER_CONFIG</code> matches your folder IDs.

</li>

<li>

<strong>Run Setup:</strong><br>

Menu 
®
 <strong>CSV Import & Folders 
®
 Setup Folders</strong><br>

Menu 
®
 <strong>CSV Import & Folders 
®
 Test Folder Access</strong>

</li>

<li>

<strong>Import CSV Files:</strong><br>

Menu 
®
 <strong>CSV Import & Folders 
®
 Refresh CSV Files</strong><br>

Each CSV becomes a corresponding Google Sheet.

</li>

<li>

<strong>Check Data Sheet:</strong><br>

Menu 
®
 <strong>Sheet Management 
®
 Update Data Sheet</strong>

</li>

<li>

<strong>Run Interval Analysis:</strong><br>

Menu 
®
 <strong>Data Processing 
®
 Interval Analysis</strong>

</li>

<li>

<strong>Edit Regression Formula:</strong><br>

Menu 
®
 <strong>Data Processing 
®
 Edit Data Processing Formula</strong><br>

Example: <code>A * exp(-b * t) * cos(
w
t + 
f
)</code>

</li>

<li>

<strong>Run Regression:</strong><br>

Menu 
®
 <strong>Data Processing 
®
 Run Regression</strong>

</li>

<li>

<strong>View Results:</strong><br>

Check the <strong>Regression Results</strong> sheet for fit parameters and R² value.

</li>

</ol>

<!-- Example -- Safe Embed -->

<details>

<summary>Sample Beginner Regression Result</summary>

<pre>

Formula: A * exp(-b * t) * cos(
w
t + 
f
)

Algorithm: Levenberg-Marquardt

R²: 0.9915

Parameters:

A = 15.3

b = 0.027

w
 = 6.50

f
 = 0.2


</pre>

</details>

<p>

<a href="#section2_3">Next: 2.3 -- Intermediate & Advanced User Tips</a>

</p>

<!--

Glossary Terms Referenced:

- FOLDER_CONFIG

- Regression

- Interval Analysis

- Regression Results

- R²

-->

# END SECTION 2 -- PART 2

# START SECTION 2 -- PART 3

<!--

===============================================

SECTION 2.3 -- INTERMEDIATE & ADVANCED USER TIPS

===============================================

-->

<h2 id="section2_3">2.3 Intermediate & Advanced User Tips</h2>

<p>

This section provides tips and best practices for intermediate and advanced users to make full use of the 

system's capabilities.

</p>

<h3>Intermediate User Tips:</h3>

<ul>

<li><strong>Customize Regression Formulas:</strong>

Experiment with different mathematical models beyond the defaults.

</li>

<li><strong>Compare Regression Algorithms:</strong>

Try <code>Nelder-Mead</code>, <code>Gauss-Newton</code>, <code>Levenberg-Marquardt</code>, and 

<code>BFGS</code> to compare fit quality.

</li>

<li><strong>Use Interval Reduction:</strong>

Apply reduction factors to improve processing speed or reduce noise:

<ul>

<li>Menu 
®
 <strong>Data Processing 
®
 Interval Analysis with Reduction</strong> (planned v5.2+).</li>

</ul>

</li>

<li><strong>Advanced Data Cleaning:</strong>

Manually review data sheets after <strong>Clean Quote Marks</strong> or <strong>Hide/Delete Negative Time 

Rows</strong>.

</li>

<li><strong>Cross-Sheet Validation:</strong>

Use the <strong>Data Validation Sheet</strong> to identify matching intervals across different datasets.

</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Intermediate Workflow Example</summary>

<pre>

1. Run Interval Analysis

2. Edit Regression Formula 
®
 include polynomial background term

3. Run Regression with Gauss-Newton

4. Compare results to Levenberg-Marquardt

5. Export to Python for final visualization

</pre>

</details>

<h3>Advanced User Tips:</h3>

<ul>

<li><strong>Automate Batch Regression:</strong>

Use Apps Script extensions or triggers to run regressions across multiple sheets automatically.

</li>

<li><strong>Leverage Sidebar Sub-Pages:</strong>

In v5.1+, use <strong>HelpDialog_Functions1</strong> and <strong>Functions2</strong> for faster Sidebar access

 to large documentation.

</li>

<li><strong>API Integration:</strong>

Plan for integration with REST APIs -- v5.2+ roadmap will include <strong>Regression Results export 

hooks</strong>.

</li>

<li><strong>Customize SYSTEM_SHEETS Protection:</strong>

Advanced users may choose to enforce full protection instead of warning-only.

</li>

<li><strong>Optimize Large Data Sets:</strong>

For experiments with high sampling rates:

<ul>


<li>Apply higher Interval Reduction factors.</li>

<li>Use selective CSV refresh to limit memory usage.</li>

</ul>

</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Advanced Workflow Example</summary>

<pre>

1. Refresh only Cart + 0.750kg folder

2. Apply Interval Reduction factor 10

3. Run Regression

4. POST Regression Results to external dashboard

5. Archive CSVs after import (planned feature)

</pre>

</details>

<p>

<a href="#section3">Continue to Section 3 -- Function Reference (Full Expanded)</a>

</p>

<!--

Glossary Terms Referenced:

- Regression

- Regression Results

- Interval Reduction

- API

- SYSTEM_SHEETS

- Sidebar

-->

# END SECTION 2 -- PART 3

=== STOP HelpDialog_Main.html ===

=== START NEW FILE: HelpDialog_Functions1.html ===

# START SECTION 4 -- PART 1

<!-- =============================================== -->

<!-- SECTION 4 -- API REFERENCE -- START -->

<!-- =============================================== -->

<h1 id="section4">Section 4 -- API Reference (AOEZ)</h1>

<p>

Welcome to the <strong>API Reference</strong> for the Physics Data Collection system (v5.1+).

This section provides an **alphabetical index of all documented functions**:

</p>

<ul>

<li>All Core Functions (Section 3 Parts 1OE34)</li>

<li>All Utilities and Planned Functions (Section 3 Parts 35OE53)</li>

<li>Cross-linked to Section 3 full documentation</li>

<li>Includes current and future/planned functions (v5.2+ roadmap)</li>

</ul>

<h2>How to use this API Reference:</h2>

<ul>

<li>Click any function name to jump to its Section 3 documentation</li>

<li>Use your browser search (Ctrl+F / Cmd+F) to find functions quickly</li>

<li>TOC and Sidebar split support cross-links automatically</li>

<li>All functions listed here are version-controlled (v5.1+)</li>

</ul>

<h2>Alphabetical API Index:</h2>

<p>

<strong>Note:</strong> This index includes **planned future functions** (clearly marked), so users can prepare

 for upcoming features.

</p>

<!-- Section 4 will now proceed with AOEZ index in PART 2 -->

<p>

<a href="#section4_2">Proceed to Section 4 -- PART 2 -- API Index AOEZ 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- API Reference

- Section 3

- v5.2+ Roadmap

-->

# END SECTION 4 -- PART 1

# CONTINUE SECTION 4 -- PART 2

<!-- ================================================ -->

<!-- SECTION 4.2 -- API INDEX -- AOEZ -- FULL LIST START -->

<!-- ================================================ -->

<table>

<thead>

<tr>

<th>Function Name</th>

<th>Description</th>


<th>Link</th>

</tr>

</thead>

<tbody>

<tr>

<td>archiveCSVFiles()</td>

<td>Planned -- Moves processed CSVs to an archive folder</td>

<td><a href="#section3_41">3.41</a></td>

</tr>

<tr>

<td>autoDetectTimeColumn()</td>

<td>Planned -- Detects and returns index of the Time column</td>

<td><a href="#section3_42">3.42</a></td>

</tr>

<tr>

<td>batchRunRegressions()</td>

<td>Planned -- Runs multiple regressions in batch mode</td>

<td><a href="#section3_43">3.43</a></td>

</tr>

<tr>

<td>checkSystemSheets()</td>

<td>Verifies system sheets exist and match required names</td>

<td><a href="#section3_3">3.3</a></td>

</tr>

<tr>

<td>clearErrorLog()</td>

<td>Wipes the contents of the Error Log tab</td>

<td><a href="#section3_13">3.13</a></td>

</tr>

<tr>

<td>createCumulativeTimeColumn()</td>

<td>Adds a column calculating time from deltas</td>

<td><a href="#section3_28">3.28</a></td>

</tr>

<tr>

<td>createFolderHomePage()</td>

<td>Generates home page tab for a folder and colors it</td>

<td><a href="#section3_10">3.10</a></td>

</tr>

<tr>

<td>createHomePagesForAll()</td>

<td>Creates home pages for all folders listed in config</td>

<td><a href="#section3_11">3.11</a></td>

</tr>

<tr>

<td>createRegressionFormula()</td>

<td>Starts manual regression formula editor workflow</td>

<td><a href="#section3_37">3.37</a></td>

</tr>

<tr>

<td>createTimeDeltaColumn()</td>

<td>Calculates difference between consecutive time values</td>

<td><a href="#section3_27">3.27</a></td>

</tr>

<tr>

<td>createUserInterface()</td>

<td>Initializes the custom Apps Script menu</td>

<td><a href="#section3_1">3.1</a></td>

</tr>

</tbody>

</table>

<tr>

<td>deleteNegativeRows()</td>

<td>Removes rows where Time (ms) &lt; 0 in CSV sheets</td>

<td><a href="#section3_25">3.25</a></td>

</tr>

<tr>

<td>displayRegressionLatex()</td>

<td>Renders LaTeX formula for regression in sidebar</td>

<td><a href="#section3_38">3.38</a></td>

</tr>

<tr>

<td>exportRegressionResults()</td>

<td>Planned -- Exports regression data to CSV or API</td>

<td><a href="#section3_40">3.40</a></td>

</tr>

<tr>

<td>exportSystemSnapshot()</td>

<td>Planned -- Saves all sheet state/config to JSON or CSV</td>


<td><a href="#section3_50">3.50</a></td>

</tr>

<tr>

<td>formatAllTables()</td>

<td>Formats tables in all CSV sheets with consistent styling</td>

<td><a href="#section3_24">3.24</a></td>

</tr>

<tr>

<td>formatSheetAsTable()</td>

<td>Applies alternating row formatting and bold headers</td>

<td><a href="#section3_23">3.23</a></td>

</tr>

<tr>

<td>generateSheetReport()</td>

<td>Creates a summary of metrics for one sheet</td>

<td><a href="#section3_15">3.15</a></td>

</tr>

<tr>

<td>getAllDataSheets()</td>

<td>Returns list of all CSV sheets (non-system only)</td>

<td><a href="#section3_5">3.5</a></td>

</tr>

<tr>

<td>getCSVFolderStructure()</td>

<td>Returns folder IDs and names based on config</td>

<td><a href="#section3_7">3.7</a></td>

</tr>

<tr>

<td>getLastUsedRowInColumn()</td>

<td>Gets last row with data in a specific column</td>

<td><a href="#section3_29">3.29</a></td>

</tr>

<tr>

<td>getSystemSheetByName()</td>

<td>Returns a system sheet by name or throws error</td>

<td><a href="#section3_4">3.4</a></td>

</tr>

<tr>

<td>highlightNegativeRows()</td>

<td>Applies conditional formatting to highlight negative values</td>

<td><a href="#section3_26">3.26</a></td>

</tr>

<tr>

<td>isCSVSheet()</td>

<td>Returns true if sheet is not a system sheet</td>

<td><a href="#section3_6">3.6</a></td>

</tr>

<tr>

<td>loadUserSettings()</td>

<td>Planned -- Loads user-defined config from storage</td>

<td><a href="#section3_51">3.51</a></td>

</tr>

<tr>

<td>logError()</td>

<td>Adds an entry to the Error Log with timestamp and sheet name</td>

<td><a href="#section3_12">3.12</a></td>

</tr>

<tr>

<td>mergeDataSheets()</td>

<td>Merges selected CSV sheets into one master tab</td>

<td><a href="#section3_18">3.18</a></td>

</tr>

<tr>

<td>normalizeTimeColumn()</td>

<td>Scales time data to start from zero (t = 0)</td>

<td><a href="#section3_30">3.30</a></td>

</tr>

<tr>

<td>postRegressionResults()</td>

<td>Posts regression stats to Results sheet or API</td>

<td><a href="#section3_36">3.36</a></td>

</tr>

<tr>

<td>refreshHomePages()</td>

<td>Rebuilds all folder home pages and restores color tags</td>

<td><a href="#section3_19">3.19</a></td>

</tr>

<tr>

<td>renameAllCSVSheets()</td>


<td>Renames all CSV sheets using folder + index format</td>

<td><a href="#section3_14">3.14</a></td>

</tr>

<tr>

<td>resetMenu()</td>

<td>Forces a rebuild of the main UI menu manually</td>

<td><a href="#section3_2">3.2</a></td>

</tr>

<tr>

<td>runBFGS()</td>

<td>Planned -- Performs regression using BFGS algorithm</td>

<td><a href="#section3_48">3.48</a></td>

</tr>

<tr>

<td>runErrorCheck()</td>

<td>Scans all sheets for common formatting or data errors</td>

<td><a href="#section3_21">3.21</a></td>

</tr>

<tr>

<td>runGaussNewton()</td>

<td>Planned -- Performs regression using Gauss-Newton algorithm</td>

<td><a href="#section3_47">3.47</a></td>

</tr>

<tr>

<td>runLevenbergMarquardt()</td>

<td>Planned -- Regression using Levenberg-Marquardt algorithm</td>

<td><a href="#section3_44">3.44</a></td>

</tr>

<tr>

<td>runNelderMead()</td>

<td>Planned -- Performs regression using Nelder-Mead method</td>

<td><a href="#section3_45">3.45</a></td>

</tr>

<tr>

<td>runRegression()</td>

<td>Main regression interface using selected model and sheet</td>

<td><a href="#section3_35">3.35</a></td>

</tr>

<tr>

<td>saveUserSettings()</td>

<td>Planned -- Saves preferences to PropertiesService or sheet</td>

<td><a href="#section3_52">3.52</a></td>

</tr>

<tr>

<td>scheduleErrorCheck()</td>

<td>Planned -- Triggers periodic error scans with logs</td>

<td><a href="#section3_49">3.49</a></td>

</tr>

<tr>

<td>scheduleRegressionRun()</td>

<td>Planned -- Auto-runs regressions on a schedule</td>

<td><a href="#section3_50">3.50</a></td>

</tr>

<tr>

<td>setupFolderStructure()</td>

<td>Initializes folder color mappings and config links</td>

<td><a href="#section3_9">3.9</a></td>

</tr>

<tr>

<td>setupSystemSheets()</td>

<td>Creates required system sheets if missing</td>

<td><a href="#section3_8">3.8</a></td>

</tr>

<tr>

<td>showHelp()</td>

<td>Main HelpDialog launcher for full HTML guide</td>

<td><a href="#section3_33">3.33</a></td>

</tr>

<tr>

<td>showHelpFunctions1()</td>

<td>Displays Section 3 Functions AOEM via sidebar</td>

<td><a href="#section3_34">3.34</a></td>

</tr>

<tr>

<td>showHelpFunctions2()</td>

<td>Displays Section 3 Functions NOEZ via sidebar</td>

<td><a href="#section3_53">3.53</a></td>

</tr>

<tr>


<td>updateErrorLogColorScale()</td>

<td>Changes error log conditional format to grayscale</td>

<td><a href="#section3_22">3.22</a></td>

</tr>

<tr>

<td>updateSystemSheetList()</td>

<td>Updates internal SYSTEM_SHEETS array</td>

<td><a href="#section3_20">3.20</a></td>

</tr>

<tr>

<td>validateCSVSheet()</td>

<td>Checks if a sheet matches data formatting requirements</td>

<td><a href="#section3_16">3.16</a></td>

</tr>

<tr>

<td>validateFolderNames()</td>

<td>Verifies all listed folders exist and are reachable</td>

<td><a href="#section3_17">3.17</a></td>

</tr>

<tr>

<td>validateRegressionResults()</td>

<td>Validates results written by regression functions</td>

<td><a href="#section3_39">3.39</a></td>

</tr>

</tbody>

</table>

<!-- Section 4 Navigation Footer -->

<p style="text-align: center; margin-top: 40px;">

  <a href="#toc">
nn
 Return to Table of Contents</a> &nbsp;|&nbsp;

  <a href="#section5">
á
n
 Proceed to Section 5 -- Interval Analysis Framework</a>

</p>

<!--

Glossary Terms Referenced:

- API Reference

- Regression

- User Preferences

- CSV Sheets

- Automation

-->

# END SECTION 4 -- PART 2

<!-- =============================================== -->

<!-- END OF SECTION 4 -- API REFERENCE COMPLETE       -->

<!-- =============================================== -->

# START SECTION 5 -- PART 1

<!-- =============================================== -->

<!-- SECTION 5 -- INTERVAL ANALYSIS FRAMEWORK -- START -->

<!-- =============================================== -->

<h1 id="section5">Section 5 -- Interval Analysis Framework</h1>

<p>

This section introduces the <strong>Interval Analysis Framework</strong> -- a toolkit to:

</p>

<ul>

<li>Find intervals across time-series datasets</li>

<li>Compare intervals across multiple sheets</li>

<li>Validate interval structure and duration</li>

<li>Match intervals across synchronized experiments</li>

<li>Support regression pre-processing and statistical summaries</li>

</ul>

<h2>Background</h2>

<p>

Many experiments in physics involve repeated cycles (e.g., oscillations, wave pulses, decay events).

Accurate interval detection is key to:

</p>

<ul>

<li>Measuring frequency or period</li>

<li>Detecting event alignment</li>

<li>Analyzing damped or driven systems</li>

<li>Matching segments across multiple sensors</li>

</ul>

<h2>What is an Interval?</h2>

<p>

An <strong>interval</strong> is defined as:

</p>

<ul>

<li>A pair of timestamps (start & end)</li>

<li>OR a sequence of index positions in column A</li>

<li>Associated with a label, type, or trigger</li>

</ul>


<h2>Workflow Overview</h2>

<ol>

<li>Run the <code>markIntervals()</code> function on a CSV sheet</li>

<li>View detected intervals in a new <code>Intervals</code> sheet</li>

<li>Compare or overlay with <code>compareIntervalsAcrossSheets()</code></li>

<li>Use <code>validateIntervalDurations()</code> to test for consistency</li>

</ol>

<h2>Where This Applies</h2>

<ul>

<li>Oscillation experiments</li>

<li>Impulse detection</li>

<li>Motion tracking</li>

<li>Voltage/time logs</li>

<li>Blue dye or spectrometer absorbance pulses</li>

</ul>

<p>

This framework supports:

</p>

<ul>

<li><strong>Manual tagging</strong> (with checkbox or label columns)</li>

<li><strong>Auto detection</strong> (based on slope/threshold)</li>

<li><strong>Cross-sheet mapping</strong> of common intervals</li>

</ul>

<p>

Next: proceed to <a href="#section5_2">PART 2 -- Interval Marking Functions 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Interval

- CSV Sheet

- MarkIntervals()

- Time Column

-->

# END SECTION 5 -- PART 1

# START SECTION 5 -- PART 2

<!-- =============================================== -->

<!-- SECTION 5.2 -- Interval Marking Functions -->

<!-- =============================================== -->

<h2 id="section5_2">Section 5.2 -- Interval Marking Functions</h2>

<p>

This section explains how to <strong>tag, detect, or generate intervals</strong> within your CSV sheets.

These intervals allow you to isolate sections of time-series data for regression, overlay comparison, or 

export.

</p>

<h3>Core Functions:</h3>

<ul>

<li><code>markIntervals(sheet)</code> -- Primary interval tagging function</li>

<li><code>markIntervalsBySlope(sheet, threshold)</code> -- Detect intervals based on rate of change</li>

<li><code>markIntervalsByManualColumn(sheet)</code> -- Uses a boolean or label column to define boundaries</li>

<li><code>clearIntervals(sheet)</code> -- Removes existing interval markings</li>

</ul>

<h3>Types of Interval Detection:</h3>

<table>

<thead>

<tr><th>Method</th><th>Description</th><th>Function</th></tr>

</thead>

<tbody>

<tr>

<td>Manual</td>

<td>User manually marks rows with a checkbox or label</td>

<td><code>markIntervalsByManualColumn()</code></td>

</tr>

<tr>

<td>Auto -- Threshold</td>

<td>Detects sharp changes in value or slope</td>

<td><code>markIntervalsBySlope()</code></td>

</tr>

<tr>

<td>Auto -- Window</td>

<td>Uses moving average or rolling window to identify regions</td>

<td>(planned for v5.2+)</td>

</tr>

<tr>

<td>Imported</td>

<td>From external JSON or timestamp ranges</td>

<td>(planned)</td>

</tr>

</tbody>

</table>


<h3>Standard Interval Sheet Output:</h3>

<p>When intervals are marked, a new sheet is generated with:</p>

<ul>

<li><strong>Start row / time</strong></li>

<li><strong>End row / time</strong></li>

<li><strong>Duration (ms)</strong></li>

<li><strong>Source label / type</strong></li>

<li><strong>Associated Sheet</strong></li>

</ul>

<h3>Interval Naming:</h3>

<p>

Interval names follow the format:

<pre>Interval_1, Interval_2, ...</pre>

Users may override with custom labels for event tracking (e.g., <code>Impulse_1</code>, <code>Cycle_A</code>).

</p>

<h3>Tips:</h3>

<ul>

<li>Use <code>clearIntervals()</code> before re-tagging to avoid overlaps</li>

<li>Auto-detection requires clean, de-noised data for best performance</li>

<li>Manual tagging is recommended for irregular or qualitative intervals</li>

<li>Interval sheet can be used as source for regression batching</li>

</ul>

<p>

Next: <a href="#section5_3">Proceed to Section 5.3 -- Interval Comparison and Matching</a>

</p>

<!--

Glossary Terms Referenced:

- Interval Sheet

- Manual Tagging

- Time Series

- Duration

- Slope

-->

# END SECTION 5 -- PART 2

# START SECTION 5 -- PART 3

<!-- =============================================== -->

<!-- SECTION 5.3 -- Interval Comparison and Matching -->

<!-- =============================================== -->

<h2 id="section5_3">Section 5.3 -- Interval Comparison and Matching</h2>

<p>

Once intervals are marked on one or more sheets, you can run comparison and alignment operations to check for 

consistency or correlation.

</p>

<h3>Key Functions:</h3>

<ul>

<li><code>compareIntervalsAcrossSheets()</code> -- Finds matching intervals between two or more sheets</li>

<li><code>validateIntervalDurations()</code> -- Checks for consistent duration within each interval label</li>

<li><code>summarizeIntervals(sheet)</code> -- Produces a metrics report on intervals (duration, spacing, 

count)</li>

</ul>

<h3>Comparison Use Cases:</h3>

<table>

<thead>

<tr><th>Use Case</th><th>Description</th></tr>

</thead>

<tbody>

<tr>

<td>Sensor Sync</td>

<td>Match intervals from two sensors to verify they trigger together</td>

</tr>

<tr>

<td>Delay Detection</td>

<td>Quantify time offset between signals (e.g., start delays)</td>

</tr>

<tr>

<td>Cycle Validation</td>

<td>Check that all cycles across experiments are same duration</td>

</tr>

<tr>

<td>Trial Comparison</td>

<td>Match intervals across multiple experimental trials</td>

</tr>

</tbody>

</table>

<h3>Matching Rules:</h3>

<ul>

<li>Intervals must have identical labels to be matched</li>

<li>Durations can be exact or within ±tolerance (default: ±5%)</li>


<li>Overlap, containment, and strict equality modes available</li>

<li>Output is a summary table of interval matches</li>

</ul>

<h3>Validation Report Fields:</h3>

<ul>

<li>Interval label</li>

<li>Duration (each sheet)</li>

<li>Match (
4
 / 
6
)</li>

<li>Delta (ms or %)</li>

<li>Suggested alignment correction</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>Use <code>summarizeIntervals()</code> first to get baseline timing data</li>

<li>Set tolerance manually for high-precision timing comparisons</li>

<li>Export validation reports for external analysis or inclusion in labs</li>

</ul>

<p>

Next: <a href="#section6">Proceed to Section 6 -- Regression Framework</a>

</p>

<!--

Glossary Terms Referenced:

- Interval Matching

- Duration

- Tolerance

- Summary Report

-->

# END SECTION 5 -- PART 3

# START SECTION 6 -- PART 1

<!-- =============================================== -->

<!-- SECTION 6 -- REGRESSION FRAMEWORK -- START -->

<!-- =============================================== -->

<h1 id="section6">Section 6 -- Regression Framework</h1>

<p>

This section documents the <strong>non-linear regression engine</strong> used to analyze experimental physics 

data across sheets.

The system supports multiple algorithms, manual formula editing, LaTeX previewing, and automatic batch 

regression.

</p>

<h2>Regression Workflow Summary</h2>

<ol>

<li>Select a sheet (or batch) containing x/y data (e.g., Time and Position)</li>

<li>Run <code>runRegression()</code> from the menu or UI</li>

<li>Choose the fitting algorithm (e.g., Gauss-Newton, Nelder-Mead)</li>

<li>Confirm the regression formula (manually or preset)</li>

<li>Results are written to the <strong>Regression Results</strong> sheet</li>

<li>LaTeX preview and error validation are optional</li>

</ol>

<h2>Supported Algorithms</h2>

<table>

<thead>

<tr><th>Algorithm</th><th>Description</th><th>Status</th></tr>

</thead>

<tbody>

<tr>

<td>Gauss-Newton</td>

<td>Fast and accurate for least-squares problems</td>

<td>
n
 v5.1 supported</td>

</tr>

<tr>

<td>Levenberg-Marquardt</td>

<td>Handles ill-conditioned problems; hybrid GN method</td>

<td>
n
 v5.1 supported</td>

</tr>

<tr>

<td>Nelder-Mead</td>

<td>Derivative-free simplex optimization</td>

<td>
n
 v5.1 supported</td>

</tr>

<tr>

<td>BFGS / L-BFGS</td>

<td>Quasi-Newton methods; supports large datasets</td>

<td>
n
 v5.2 planned</td>

</tr>

</tbody>

</table>

<h2>Formula Types</h2>

<ul>


<li>Predefined: damped cosine, exponential decay, linear, polynomial</li>

<li>Custom: typed or pasted LaTeX-style formulas</li>

<li>Selectable via <code>createRegressionFormula()</code></li>

</ul>

<h2>Key Outputs</h2>

<ul>

<li><strong>Regression Results</strong> tab with:

    <ul>

    <li>Best-fit parameters</li>

    <li>Residuals</li>

    <li>RMSE or %Error</li>

    <li>Function used</li>

    </ul>

</li>

<li>Optional LaTeX preview via <code>displayRegressionLatex()</code></li>

<li>Error logging if results invalid or poorly fit</li>

</ul>

<p>

Next: <a href="#section6_2">Section 6.2 -- Regression Menu Options</a>

</p>

<!--

Glossary Terms Referenced:

- Regression

- RMSE

- Best Fit

- Formula Editor

- Gauss-Newton

- Nelder-Mead

- Levenberg-Marquardt

-->

# END SECTION 6 -- PART 1

# START SECTION 6 -- PART 2

<!-- =============================================== -->

<!-- SECTION 6.2 -- Regression Menu Options -->

<!-- =============================================== -->

<h2 id="section6_2">Section 6.2 -- Regression Menu Options</h2>

<p>

The Regression framework in this system is accessible via the custom Apps Script menu. This menu provides 

user-level control over:

</p>

<ul>

<li>Choosing algorithms</li>

<li>Building formulas</li>

<li>Running regressions on selected or multiple sheets</li>

<li>Exporting results</li>

<li>Triggering LaTeX previews</li>

</ul>

<h3>Main Menu Structure:</h3>

<pre>

n
 Regression 
t

nn
 Run Regression (current sheet)

nn
 Run Batch Regression (all matching)

nn
 Create Custom Formula

nn
 Display LaTeX Preview

nn
 Export Regression Results

nn
 Help -- Regression Guide

</pre>

<h3>Option Descriptions:</h3>

<table>

<thead>

<tr><th>Menu Option</th><th>Function Called</th><th>Description</th></tr>

</thead>

<tbody>

<tr>

<td>Run Regression</td>

<td><code>runRegression()</code></td>

<td>Launches regression dialog for selected sheet</td>

</tr>

<tr>

<td>Run Batch Regression</td>

<td><code>batchRunRegressions()</code></td>

<td>Runs regressions across all applicable CSV sheets</td>

</tr>

<tr>

<td>Create Custom Formula</td>

<td><code>createRegressionFormula()</code></td>

<td>Opens formula editor for manual model entry</td>

</tr>


<tr>

<td>Display LaTeX Preview</td>

<td><code>displayRegressionLatex()</code></td>

<td>Renders the selected formula as LaTeX in a sidebar</td>

</tr>

<tr>

<td>Export Regression Results</td>

<td><code>exportRegressionResults()</code></td>

<td>Saves results to sheet, JSON, or API (planned)</td>

</tr>

<tr>

<td>Help -- Regression Guide</td>

<td><code>showHelp()</code></td>

<td>Opens HelpDialog with regression documentation</td>

</tr>

</tbody>

</table>

<h3>User Flow Summary:</h3>

<ol>

<li>User opens the 
n
 Regression menu</li>

<li>Selects an action (e.g. Run Regression)</li>

<li>System prompts for algorithm and formula</li>

<li>After confirmation, results are processed</li>

<li>Optional: View LaTeX, export results, or repeat with batch</li>

</ol>

<h3>Tips:</h3>

<ul>

<li>Use <code>Run Batch Regression</code> only after verifying formula and column names</li>

<li>Custom formulas must use Apps Script-compatible syntax or be converted</li>

<li>LaTeX preview is only visual -- does not affect computation</li>

</ul>

<p>

Next: <a href="#section6_3">Section 6.3 -- Manual Formula Builder</a>

</p>

<!--

Glossary Terms Referenced:

- Regression Menu

- Batch Regression

- LaTeX

- Formula Editor

- Custom Function

-->

# END SECTION 6 -- PART 2

# START SECTION 6 -- PART 3

<!-- =============================================== -->

<!-- SECTION 6.3 -- Manual Formula Builder -->

<!-- =============================================== -->

<h2 id="section6_3">Section 6.3 -- Manual Formula Builder</h2>

<p>

The system includes a built-in <strong>manual formula builder</strong> that allows users to define custom 

regression functions.

This feature enables full control over fitting models beyond the predefined templates.

</p>

<h3>Accessing the Builder:</h3>

<ul>

<li>Menu 
®
 <code>
n
 Regression 
®
 Create Custom Formula</code></li>

<li>Or call <code>createRegressionFormula()</code> directly</li>

</ul>

<h3>Interface Features:</h3>

<ul>

<li>Input field for entering the function equation</li>

<li>Dropdowns to insert standard math symbols</li>

<li>Live syntax validation</li>

<li>Optional toggle for LaTeX rendering</li>

<li>Save to system memory or preview only</li>

</ul>

<h3>Example Formulas:</h3>

<table>

<thead>

<tr><th>Model Type</th><th>Formula</th></tr>

</thead>

<tbody>

<tr>

<td>Linear</td>

<td><code>y = m * x + b</code></td>

</tr>

<tr>

<td>Quadratic</td>


<td><code>y = a * x^2 + b * x + c</code></td>

</tr>

<tr>

<td>Damped Cosine</td>

<td><code>y = A * e^(-b * x) * cos(w * x + 
f
)</code></td>

</tr>

<tr>

<td>Exponential Decay</td>

<td><code>y = A * e^(-k * x) + C</code></td>

</tr>

</tbody>

</table>

<h3>Supported Syntax:</h3>

<ul>

<li>Standard operators: <code>+, -, *, /, ^</code></li>

<li>Constants: <code>e, pi</code></li>

<li>Functions: <code>exp(), sin(), cos(), tan(), log(), sqrt()</code></li>

<li>Variables: <code>x</code> (independent), <code>y</code> (dependent), <code>a, b, c...</code> 

(parameters)</li>

</ul>

<h3>Formula Validation Rules:</h3>

<ul>

<li>Function must be expressed as <code>y = ...</code></li>

<li>Only declared variables can be used</li>

<li>No undefined functions or math operators allowed</li>

<li>Whitespace is optional but recommended for readability</li>

</ul>

<h3>LaTeX Preview:</h3>

<p>

Clicking fiPreview LaTeXfl will render the entered formula as a properly formatted LaTeX expression in a 

sidebar.

</p>

<pre>

Input: y = A * exp(-b * x) * cos(w * x + 
f
)

®
 Preview: \( y = A e^{-bx} \cos(wx + \phi) \)

</pre>

<h3>Tips:</h3>

<ul>

<li>Use the preview to visually confirm correct formatting</li>

<li>Store multiple models for testing in different sheets</li>

<li>Use simpler models if data contains noise</li>

</ul>

<p>

Next: <a href="#section6_4">Section 6.4 -- Error Logging and Validation</a>

</p>

<!--

Glossary Terms Referenced:

- Formula Builder

- LaTeX

- Damped Cosine

- Regression Syntax

- Custom Model

-->

# END SECTION 6 -- PART 3

# START SECTION 6 -- PART 4

<!-- =============================================== -->

<!-- SECTION 6.4 -- Error Logging and Validation -->

<!-- =============================================== -->

<h2 id="section6_4">Section 6.4 -- Error Logging and Validation</h2>

<p>

The regression framework includes built-in tools to log any issues that occur during fitting. These tools help

 identify:

</p>

<ul>

<li>Missing or malformed formulas</li>

<li>Poor regression fits (based on RMSE thresholds)</li>

<li>Unsupported variables or data structures</li>

<li>Interrupted or partial execution</li>

</ul>

<h3>Error Log Tab:</h3>

<p>

All regression errors are recorded in the <strong>Error Log</strong> sheet. This sheet is auto-created if it 

does not exist.

</p>

<h4>Log Fields:</h4>

<ul>

<li><strong>Timestamp</strong> -- When the error occurred</li>

<li><strong>Sheet Name</strong> -- Where the error happened</li>


<li><strong>Error Type</strong> -- Formula, Data, Runtime, etc.</li>

<li><strong>Description</strong> -- Full message or code trace</li>

<li><strong>Suggested Fix</strong> -- Auto-suggested where possible</li>

</ul>

<h3>Formatting Style:</h3>

<ul>

<li>Text is black by default</li>

<li>Conditional formatting based on severity:

    <ul>

    <li><span style="background:black; color:white">Critical</span></li>

    <li><span style="background:grey; color:black">Warning</span></li>

    <li><span style="background:white; color:black">Info</span></li>

    </ul>

</li>

<li>Header row is bold and locked</li>

</ul>

<h3>Validation Rules:</h3>

<ul>

<li><strong>Minimum Regression Score</strong> -- Rejects fits with RMSE > threshold</li>

<li><strong>Undefined Formula Components</strong> -- Logs if variables are undefined</li>

<li><strong>Incompatible Sheet Structure</strong> -- e.g., missing column A/B</li>

</ul>

<h3>Useful Functions:</h3>

<ul>

<li><code>logError(sheetName, type, message)</code></li>

<li><code>clearErrorLog()</code> -- Wipes log before batch operations</li>

<li><code>updateErrorLogColorScale()</code> -- Applies grayscale formatting rules</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>Always run <code>clearErrorLog()</code> before large regression jobs</li>

<li>Set RMSE thresholds manually to tune for your data</li>

<li>Use <code>validateRegressionResults()</code> to post-check any result set</li>

</ul>

<p>

Next: <a href="#section6_5">Section 6.5 -- LaTeX Rendering and Export Options</a>

</p>

<!--

Glossary Terms Referenced:

- Error Log

- RMSE

- Threshold

- Runtime Error

- LogEntry

-->

# END SECTION 6 -- PART 4

# START SECTION 6 -- PART 5

<!-- =============================================== -->

<!-- SECTION 6.5 -- LaTeX Rendering and Export Options -->

<!-- =============================================== -->

<h2 id="section6_5">Section 6.5 -- LaTeX Rendering and Export Options</h2>

<p>

This section covers visual rendering and export of regression output using LaTeX formatting and structured 

data exports.

</p>

<h3>LaTeX Rendering:</h3>

<ul>

<li>Uses <code>displayRegressionLatex()</code> function</li>

<li>Opens a sidebar preview with live LaTeX math rendering</li>

<li>Converts custom model syntax to:

    <ul>

    <li>\( y = mx + b \)</li>

    <li>\( y = Ae^{-bt}\cos(\omega t + \phi) \)</li>

    </ul>

</li>

<li>Uses KaTeX or MathJax-compatible output</li>

</ul>

<h4>Usage Flow:</h4>

<ol>

<li>User defines or confirms a regression formula</li>

<li>Clicks fiDisplay LaTeX Previewfl from the menu</li>

<li>Sidebar opens with formatted output</li>

<li>Can be copied into lab reports or PDFs</li>

</ol>

<h3>Export Options:</h3>

<table>

<thead>

<tr><th>Target</th><th>Status</th><th>Format</th></tr>


</thead>

<tbody>

<tr>

<td>Internal Sheet</td>

<td>
n
 v5.1</td>

<td>Structured rows in fiRegression Resultsfl tab</td>

</tr>

<tr>

<td>CSV Download</td>

<td>
n
 v5.2</td>

<td>Custom-exported file per regression or sheet</td>

</tr>

<tr>

<td>JSON Blob</td>

<td>
n
 v5.2</td>

<td>REST-compatible export for external API use</td>

</tr>

<tr>

<td>Google Drive Sync</td>

<td>
n
 Experimental</td>

<td>Save snapshots of result structure</td>

</tr>

</tbody>

</table>

<h3>Tips:</h3>

<ul>

<li>Always preview LaTeX before exporting for academic submission</li>

<li>JSON export is intended for integration with external systems</li>

<li>CSV export is ideal for spreadsheet-based workflows</li>

</ul>

<p>

Next: <a href="#section7">Proceed to Section 7 -- CSV Import + Sheet Management</a>

</p>

<!--

Glossary Terms Referenced:

- LaTeX

- CSV Export

- JSON Export

- KaTeX

- Regression Result

-->

# END SECTION 6 -- PART 5

# START SECTION 7 -- PART 1

<!-- =============================================== -->

<!-- SECTION 7 -- CSV IMPORT + SHEET MANAGEMENT -->

<!-- =============================================== -->

<h1 id="section7">Section 7 -- CSV Import and Sheet Management</h1>

<p>

This section documents how CSV files are imported into the system, organized by folder, validated against 

structural rules, and pre-processed for compatibility with downstream analysis tools.

</p>

<h2>Core Goals of the Import System:</h2>

<ul>

<li>Import data from Google Drive folders</li>

<li>Create one tab per CSV file</li>

<li>Rename sheets to reflect folder + file</li>

<li>Validate column headers (especially time + measurement)</li>

<li>Prepare data for formatting, interval marking, and regression</li>

</ul>

<h2>Import Framework Summary:</h2>

<ol>

<li>User clicks menu 
®
 <code>
n
 Import CSV Files</code></li>

<li>System looks up folder structure in config object</li>

<li>Each CSV is opened, parsed, and added as a new sheet</li>

<li>Sheet name = FolderName_Index.csv (e.g. <code>Red_01.csv</code>)</li>

<li>Post-import routines are triggered: formatting, validation</li>

</ol>

<h2>Example Folder Configuration:</h2>

<pre>

const FOLDER_CONFIG = {

  "Cart": {

    id: "1abcFolderID123...",

    color: "#ff0000",

    order: 1

  },

  "Cart + 0.250kg": {

    id: "1defFolderID456...",

    color: "#ffa500",

    order: 2


  }

};

</pre>

<h3>Import Sheet Naming Rules:</h3>

<ul>

<li>No spaces (use underscores)</li>

<li>All imported sheets are renamed to <code>[FolderName]_[Index]</code></li>

<li>Tab color is matched to the configured folder color</li>

<li>Home pages can be regenerated via <code>createHomePagesForAll()</code></li>

</ul>

<h2>System Sheets Protection:</h2>

<p>

The following are <strong>reserved sheets</strong> and are never overwritten:</p>

<ul>

<li><code>Settings</code></li>

<li><code>Error Log</code></li>

<li><code>Regression Results</code></li>

<li><code>Interval Sheet</code></li>

<li><code>Home_[Folder]</code> tabs</li>

</ul>

<p>

Next: <a href="#section7_2">Section 7.2 -- CSV Validation and Structural Checks</a>

</p>

<!--

Glossary Terms Referenced:

- CSV

- Folder Config

- System Sheet

- Sheet Import

- Tab Color

-->

# END SECTION 7 -- PART 1

# START SECTION 7 -- PART 2

<!-- =============================================== -->

<!-- SECTION 7.2 -- CSV Validation and Structural Checks -->

<!-- =============================================== -->

<h2 id="section7_2">Section 7.2 -- CSV Validation and Structural Checks</h2>

<p>

After each import, the system automatically performs a set of validation routines to confirm that the data 

matches expected structure and naming conventions.

</p>

<h3>Validation Functions:</h3>

<ul>

<li><code>validateCSVSheet(sheet)</code> -- Checks formatting, column headers, and empty rows</li>

<li><code>checkSystemSheets()</code> -- Confirms that required system sheets are present</li>

<li><code>validateFolderNames()</code> -- Ensures all configured folders are reachable and valid</li>

</ul>

<h3>CSV Sheet Validation Checklist:</h3>

<table>

<thead>

<tr><th>Check</th><th>Description</th><th>Result</th></tr>

</thead>

<tbody>

<tr>

<td>Header row exists</td>

<td>First row must contain column names</td>

<td>Required</td>

</tr>

<tr>

<td>Time column present</td>

<td>Column A must be labeled fiTime (ms)fl</td>

<td>Required</td>

</tr>

<tr>

<td>No missing values</td>

<td>Warns if empty cells exist in core columns</td>

<td>Recommended</td>

</tr>

<tr>

<td>Proper column order</td>

<td>Time must be in Column A, followed by variable(s)</td>

<td>Enforced</td>

</tr>

<tr>

<td>Sheet name match</td>

<td>Sheet name must match Folder_Index pattern</td>

<td>Enforced</td>

</tr>

</tbody>


</table>

<h3>Failure Behavior:</h3>

<ul>

<li>If a sheet fails validation:

    <ul>

    <li>It is flagged in the Error Log</li>

    <li>Import continues, but regression is disabled for that tab</li>

    </ul>

</li>

<li><strong>No data is deleted</strong> during validation -- only reported</li>

</ul>

<h3>Column Label Examples:</h3>

<table>

<thead>

<tr><th>Correct Label</th><th>Meaning</th></tr>

</thead>

<tbody>

<tr>

<td><code>Time (ms)</code></td>

<td>Required -- must be in Column A</td>

</tr>

<tr>

<td><code>Position (cm)</code></td>

<td>Example dependent variable</td>

</tr>

<tr>

<td><code>Voltage (V)</code></td>

<td>Alternate signal input</td>

</tr>

<tr>

<td><code>Manual Tag</code></td>

<td>Used for manual interval tagging</td>

</tr>

</tbody>

</table>

<h3>System Sheet Checklist:</h3>

<ul>

<li><code>Settings</code> tab must exist</li>

<li><code>Error Log</code> should be available and color-formatted</li>

<li><code>Regression Results</code> will auto-create on first regression</li>

<li><code>Home_[Folder]</code> tabs must match folder color config</li>

</ul>

<p>

Next: <a href="#section7_3">Section 7.3 -- Sheet Formatting and Table Setup</a>

</p>

<!--

Glossary Terms Referenced:

- Validation

- Header Row

- Time Column

- Folder Match

- Manual Tag

-->

# END SECTION 7 -- PART 2

# START SECTION 7 -- PART 3

<!-- =============================================== -->

<!-- SECTION 7.3 -- Sheet Formatting and Table Setup -->

<!-- =============================================== -->

<h2 id="section7_3">Section 7.3 -- Sheet Formatting and Table Setup</h2>

<p>

After CSV sheets are validated, they are formatted to improve readability and ensure functional consistency 

across the system.

</p>

<h3>Core Functions:</h3>

<ul>

<li><code>formatSheetAsTable(sheet)</code> -- Applies formatting to a single sheet</li>

<li><code>formatAllTables()</code> -- Applies formatting to all CSV sheets</li>

</ul>

<h3>Formatting Includes:</h3>

<ul>

<li><strong>Header Row</strong>:

  <ul>

    <li>Bold text</li>

    <li>Frozen at row 1</li>

    <li>Center aligned</li>

  </ul>

</li>

<li><strong>Data Range</strong>:


  <ul>

    <li>Alternating row color</li>

    <li>Left alignment for time, center for data</li>

    <li>Fixed column width (auto-fit for variable width)</li>

  </ul>

</li>

<li><strong>Column A</strong>:

  <ul>

    <li>Bold if labeled <code>Time (ms)</code></li>

    <li>Locked for scroll navigation</li>

  </ul>

</li>

<li><strong>Tab Color</strong>:

  <ul>

    <li>Matches configured folder color (from FOLDER_CONFIG)</li>

  </ul>

</li>

</ul>

<h3>Example Output Style:</h3>

<pre>

nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn

n
 Time (ms)     
n
 Position (cm) 
n

nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn

n
 0             
n
 4.2           
n

n
 10            
n
 3.9           
n

n
 20            
n
 3.6           
n

n
 —             
n
 —             
n

nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn

</pre>

<h3>Additional Formatting Options:</h3>

<ul>

<li>Set number format for time column: <code>0.0</code> or <code>0</code> (ms)</li>

<li>Enable conditional formatting on Manual Tag column (optional)</li>

<li>Use Data Validation dropdowns if tagging is enabled</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>Run <code>formatAllTables()</code> after batch imports or cleanup</li>

<li>Use <code>formatSheetAsTable()</code> after manual data edits</li>

<li>Recolor tabs using <code>createHomePagesForAll()</code> if config is updated</li>

</ul>

<p>

Next: <a href="#section8">Section 8 -- Batch Automation and System Triggers</a>

</p>

<!--

Glossary Terms Referenced:

- Alternating Rows

- Header Row

- Tab Color

- Scroll Lock

- Time Column

-->

# END SECTION 7 -- PART 3

# START SECTION 8 -- PART 1

<!-- =============================================== -->

<!-- SECTION 8 -- Batch Automation and System Triggers -->

<!-- =============================================== -->

<h1 id="section8">Section 8 -- Batch Automation and System Triggers</h1>

<p>

This section outlines the automated processes supported by the system, including regression batching, 

scheduled error checks, and automated data validation.

</p>

<h2>Overview:</h2>

<ul>

<li>Batch processing tools let you run regressions or format sheets across all CSV tabs at once</li>

<li>Triggers can be scheduled (time-based) or manually fired</li>

<li>All operations log results and errors for later review</li>

</ul>

<h3>Supported Batch Functions:</h3>

<ul>

<li><code>batchRunRegressions()</code> -- Run regressions across all CSV sheets</li>

<li><code>clearErrorLog()</code> -- Clean the error log before batch operations</li>

<li><code>formatAllTables()</code> -- Format all data tables consistently</li>

<li><code>createHomePagesForAll()</code> -- Refresh folder home tabs and colors</li>

</ul>

<h3>Scheduled Automation Functions:</h3>

<ul>

<li><code>scheduleErrorCheck()</code> -- (Planned) Run error scan every N hours</li>


<li><code>scheduleRegressionRun()</code> -- (Planned) Trigger batch regression nightly or weekly</li>

</ul>

<h3>System Triggers (Planned v5.2):</h3>

<table>

<thead>

<tr><th>Trigger</th><th>Description</th><th>Interval</th></tr>

</thead>

<tbody>

<tr>

<td>Error Check Trigger</td>

<td>Scans system sheets and CSVs for problems</td>

<td>Every 12 hours</td>

</tr>

<tr>

<td>Regression Trigger</td>

<td>Runs full batch with preset model + algorithm</td>

<td>Daily or Weekly</td>

</tr>

<tr>

<td>System Sync Trigger</td>

<td>Checks folder structure + system sheet health</td>

<td>Every 24 hours</td>

</tr>

</tbody>

</table>

<h3>Common Use Cases:</h3>

<ul>

<li>Set error scan to run every morning before class</li>

<li>Schedule regression batch for lab report prep</li>

<li>Auto-create homepage updates when folders change</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>Manual batch is available even without triggers</li>

<li>Triggers must be enabled in Apps Script project (via UI)</li>

<li>Log sheets will reflect timestamp and trigger origin</li>

</ul>

<p>

Next: <a href="#section9">Section 9 -- Advanced Features and Customization</a>

</p>

<!--

Glossary Terms Referenced:

- Batch Processing

- Triggers

- Automation

- System Sync

-->

# END SECTION 8 -- PART 1

# START SECTION 9 -- PART 1

<!-- =============================================== -->

<!-- SECTION 9 -- ADVANCED FEATURES + CUSTOMIZATION -->

<!-- =============================================== -->

<h1 id="section9">Section 9 -- Advanced Features and Customization</h1>

<p>

Section 9 provides access to deeper tools for advanced users, including extensibility points, formula 

injection, trigger customization, and planned API interoperability.

</p>

<h2>Who This Section Is For:</h2>

<ul>

<li>Users developing new features using Apps Script</li>

<li>Researchers integrating external analysis tools</li>

<li>Educators customizing models for repeated use</li>

<li>Students extending logic for internal assessments (IA) or coursework</li>

</ul>

<h2>Custom Formula Definitions</h2>

<p>

Advanced users can define new regression models directly in Apps Script using:

</p>

<pre>

function customMyModel(x, a, b, c) {

  return a * Math.exp(-b * x) * Math.sin(c * x);

}

</pre>

<ul>

<li>This must be manually mapped in <code>runRegression()</code></li>

<li>Output is compatible with <code>displayRegressionLatex()</code></li>

</ul>

<h2>Custom Sheet Handling</h2>


<ul>

<li>Create new tabs during import or export using:

<code>SpreadsheetApp.getActiveSpreadsheet().insertSheet('MyTab')</code></li>

<li>Use custom validation rules for special-purpose datasets</li>

<li>Add headers, metadata rows, or footnotes as needed</li>

</ul>

<h2>Regression Extensions</h2>

<ul>

<li>Integrate Python-based fitting using <code>Apps Script API Connector</code></li>

<li>Export via JSON to a Flask or FastAPI backend</li>

<li>Auto-pull fitted models back into sheet or chart</li>

</ul>

<h3>Planned Hook Architecture:</h3>

<table>

<thead>

<tr><th>Hook Name</th><th>Purpose</th><th>Status</th></tr>

</thead>

<tbody>

<tr>

<td><code>beforeRegressionRun()</code></td>

<td>Run checks or modify input sheet</td>

<td>Planned</td>

</tr>

<tr>

<td><code>afterRegressionRun()</code></td>

<td>Export, notify, or sync external result store</td>

<td>Planned</td>

</tr>

<tr>

<td><code>onIntervalTag()</code></td>

<td>Callback after marking intervals</td>

<td>Planned</td>

</tr>

<tr>

<td><code>onCSVImport()</code></td>

<td>Custom filter or sort on incoming sheets</td>

<td>Planned</td>

</tr>

</tbody>

</table>

<h2>Custom LaTeX / Label Injection</h2>

<ul>

<li>Inject model name or note using:

<code>SpreadsheetApp.getActiveSheet().getRange("A1").setNote("Fitted: Damped Cosine")</code></li>

<li>Insert LaTeX output as string or comment below regression block</li>

</ul>

<h2>Tips:</h2>

<ul>

<li>Use these tools cautiously -- advanced logic is not protected by UI checks</li>

<li>Always test formulas with test sheets before applying to batch data</li>

<li>Debug output can be sent to Logger or written to a custom debug tab</li>

</ul>

<p>

Next: <a href="#section9_2">Section 9.2 -- Planned Roadmap + Version Hooks</a>

</p>

<!--

Glossary Terms Referenced:

- Hook

- Custom Regression

- JSON Export

- API Connector

- Flask

- Trigger

-->

# END SECTION 9 -- PART 1

# START SECTION 9 -- PART 2

<!-- =============================================== -->

<!-- SECTION 9.2 -- Planned Roadmap + Version Hooks -->

<!-- =============================================== -->

<h2 id="section9_2">Section 9.2 -- Planned Roadmap + Version Hooks</h2>

<p>

This section outlines planned features for future versions of the Physics Data Collection system, including 

advanced API integrations, smarter sheet detection, and customizable user interface logic.

</p>

<h3>Planned Versions:</h3>

<table>

<thead>

<tr><th>Version</th><th>Features</th><th>Status</th></tr>


</thead>

<tbody>

<tr>

<td><strong>v5.2</strong></td>

<td>

<ul>

<li>Schedule-based regression triggers</li>

<li>CSV export of all regression outputs</li>

<li>User preferences: stored + editable via sidebar</li>

<li>Multiple regression formulas per trial</li>

</ul>

</td>

<td>
n
 In Progress</td>

</tr>

<tr>

<td><strong>v5.3</strong></td>

<td>

<ul>

<li>Python export and re-import from external models</li>

<li>Auto-interval detection using machine learning</li>

<li>New sidebar for analytics overview + visual summaries</li>

</ul>

</td>

<td>
n
 Planned</td>

</tr>

<tr>

<td><strong>v6.0</strong></td>

<td>

<ul>

<li>Full GUI editor for regression design</li>

<li>Live plotting of fitted curves</li>

<li>Back-end storage sync (Firebase / Drive / GitHub)</li>

</ul>

</td>

<td>
n
 Concept</td>

</tr>

</tbody>

</table>

<h3>Proposed Hook Events:</h3>

<ul>

<li><code>onUserPreferenceChange()</code> -- Auto-update UI based on user config</li>

<li><code>onTriggerStart()</code> -- Log start of scheduled task</li>

<li><code>onValidationFail()</code> -- Notify user or UI when sheet fails structure check</li>

</ul>

<h3>Development Goals:</h3>

<ul>

<li>Maintain compatibility with student + educator workflows</li>

<li>Ensure all regression models are modular and override-friendly</li>

<li>Increase data transparency and traceability</li>

<li>Minimize barrier to advanced customization</li>

</ul>

<h3>Community + Contributions:</h3>

<p>

The system is intended to support community extensions via GitHub. Documentation, sample datasets, and issue 

templates are in development.

</p>

<ul>

<li>Contributors can submit new regression models or hooks</li>

<li>HelpDialog source is structured to support fork + rebuild</li>

<li>Templates for new menu items and sheets will be available</li>

</ul>

<p>

Next: <a href="#section10">Section 10 -- Glossary, License, Version History</a>

</p>

<!--

Glossary Terms Referenced:

- Hook

- Trigger

- Versioning

- Sidebar

- GitHub

-->

# END SECTION 9 -- PART 2

# START SECTION 9 -- PART 3

<!-- =============================================== -->

<!-- SECTION 9.3 -- Beginner Guide to Advanced Features -->

<!-- =============================================== -->

<h2 id="section9_3">Section 9.3 -- Beginner Guide to Advanced Features</h2>

<p>


This section introduces step-by-step guidance for beginner users who want to try advanced features such as 

adding new functions, modifying regression models, and creating export workflows.

</p>

<h3>How to Read This Section:</h3>

<ul>

<li>Each subpart below gives you a hands-on example</li>

<li>No Apps Script experience is required</li>

<li>You can copy + paste everything into the script editor</li>

<li>All examples include safety checks so you can undo any mistake</li>

</ul>

<h3>Where to Edit the Script:</h3>

<ol>

<li>Open your spreadsheet</li>

<li>Go to <code>Extensions 
®
 Apps Script</code></li>

<li>Find <code>Code.gs</code> in the left panel</li>

<li>Scroll to the function you want to edit -- or paste a new one at the bottom</li>

</ol>

<pre>

n
 Apps Script Workspace (Mock Screenshot)

+--------------------------+

| Code.gs                  |

| HelpDialog_Main.html     |

| HelpDialog_Functions1... |

+--------------------------+

| function runRegression() |

| function customMyModel() |

| // Paste new code below  |

+--------------------------+

</pre>

<h3>Safety Tip: Make a Backup</h3>

<p>

Before editing anything:

</p>

<ol>

<li>Click <code>File 
®
 Make a Copy</code> of your spreadsheet</li>

<li>Download the script by going to <code>File 
®
 Export Project</code> in Apps Script</li>

</ol>

<h3>What You'll Learn:</h3>

<ul>

<li>How to define a custom regression model (next section)</li>

<li>How to create your own menu option</li>

<li>How to trigger functions on demand</li>

<li>How to export data in new formats</li>

<li>How to safely test and debug changes</li>

</ul>

<p>

Next: <a href="#section9_4">Section 9.4 -- Editing Regression Formulas</a>

</p>

<!--

Glossary Terms Referenced:

- Apps Script

- Safe Editing

- Code.gs

- Backup

- Beginner Scripting

-->

# END SECTION 9 -- PART 3

# START SECTION 9 -- PART 4 (MERGED VERSION)

<!-- =============================================== -->

<!-- SECTION 9.4 -- Editing Regression Formulas (with Sheet Cell Input) -->

<!-- =============================================== -->

<h2 id="section9_4">Section 9.4 -- Editing Regression Formulas (with Sheet Cell Input)</h2>

<p>

This guide shows how to safely add or edit a regression formula -- and optionally pull parameters from 

spreadsheet cells -- even if you're a beginner.

</p>

<h3>Overview:</h3>

<ul>

<li>Create or copy a formula as a JavaScript function</li>

<li>Use <code>runRegression()</code> to activate it</li>

<li>You can filockfl some parameters using values from the active sheet</li>

</ul>

---

<h3>
n
 Step 1: Write a Simple Custom Model</h3>

Paste this function at the bottom of <code>Code.gs</code>:

<pre><code>

function myDampedCosine(x, A, b, w, phi) {


  return A * Math.exp(-b * x) * Math.cos(w * x + phi);

}

</code></pre>

This creates a damped cosine model with 4 parameters:

- A = amplitude

- b = damping coefficient

- w = angular frequency

- 
f
 = phase shift

---

<h3>
n
 Step 2: Tell the System to Use It</h3>

In the <code>runRegression()</code> function, replace the model line with:

<pre><code>

let modelFunction = myDampedCosine;

</code></pre>

---

<h3>
n
 Step 3: (Optional) Pull Variables from the Sheet</h3>

Let(TM)s say you want A to come from cell <code>B1</code>, but keep the others flexible:

Update your function like this:

<pre><code>

function mySemiLockedDampedCosine(x, _, b, w, phi) {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();

  const A = sheet.getRange("B1").getValue();

  return A * Math.exp(-b * x) * Math.cos(w * x + phi);

}

</code></pre>

- The `_` skips the user-supplied A

- The sheet(TM)s cell B1 becomes the actual value for A

You can still let the regression solve for `b`, `w`, and `phi`.

---

<h3>
n
 Good Practice:</h3>

| Goal | What to Do |

|------|-------------|

| Lock 1 or 2 parameters | Use `sheet.getRange("B1")...` |

| Let system solve the rest | Keep them as named arguments |

| Hide A from fitting process | Put `_` in its place in the function signature |

---

<h3>
n
 Step 4: Test Your Model</h3>

1. Duplicate a CSV sheet

2. Enter a value into cell <code>B1</code>

3. Run <code>
n
 Regression 
®
 Run Regression</code>

4. Check fiRegression Resultsfl tab

5. If errors appear, view the fiError Logfl

---

<h3>
n
 If You Break It:</h3>

- Delete or comment out your custom function

- Revert <code>modelFunction</code> to the original

- Reload the spreadsheet

---

<h3>
n
 Tips:</h3>

- You can use `Logger.log(A)` to debug values

- Always test with 1 sheet before using fiBatch Regressionfl

- Store model names in <code>A1</code> and link LaTeX via <code>displayRegressionLatex()</code>

---

<p>

Next: <a href="#section9_5">Section 9.5 -- Creating Your Own Menu Button</a>

</p>

<!--

Glossary Terms Referenced:

- Custom Model

- Sheet Reference

- getRange()

- runRegression()

- Cell-Defined Parameter

-->

# END SECTION 9 -- PART 4

# START SECTION 9 -- PART 5

<!-- =============================================== -->

<!-- SECTION 9.5 -- Creating Your Own Menu Button -->

<!-- =============================================== -->

<h2 id="section9_5">Section 9.5 -- Creating Your Own Menu Button</h2>

<p>

This section shows you how to create a new button in the spreadsheet menu -- to run any function you(TM)ve 

written.

It(TM)s beginner-friendly and safe to test in any copy of your spreadsheet.

</p>


---

<h3>
n
 Step 1: Write a Simple Function</h3>

In <code>Code.gs</code>, scroll to the bottom and paste this:

<pre><code>

function sayHello() {

  SpreadsheetApp.getUi().alert("Hello from your custom menu!");

}

</code></pre>

n
 This is your fitest functionfl -- it shows a popup when triggered.

---

<h3>
n
 Step 2: Add It to the Menu</h3>

Scroll to the function named <code>onOpen()</code> in the script.

That(TM)s where the custom menu is built. You(TM)ll see something like this:

<pre><code>

function onOpen() {

  const ui = SpreadsheetApp.getUi();

  ui.createMenu("
n
 Regression")

    .addItem("Run Regression", "runRegression")

    ...

    .addToUi();

}

</code></pre>

n
 Now add your new button by inserting:

<pre><code>

.addItem("Say Hello", "sayHello")

</code></pre>

n
 Final version:

<pre><code>

ui.createMenu("
n
 Regression")

  .addItem("Run Regression", "runRegression")

  .addItem("Say Hello", "sayHello") // 
n
 Your custom menu item

  .addToUi();

</code></pre>

---

<h3>
n
 Step 3: Save and Refresh</h3>

1. Click <code>Save</code>

2. Go back to the spreadsheet tab

3. Reload the spreadsheet

4. Open the fi
n
 Regressionfl menu -- your new item will appear!

5. Click it 
®
 a popup will confirm it worked

---

<h3>
n
 What Can You Trigger?</h3>

| Use Case | What You Can Add |

|----------|------------------|

| Run your custom model | `addItem("Run My Model", "runMyModel")` |

| Export data | `addItem("Export as JSON", "myExportFunction")` |

| Recolor tabs | `addItem("Color Tabs", "colorAllTabs")` |

n
 Just make sure the second argument is the **name of a real function in Code.gs**

---

<h3>
n
 Common Mistakes:</h3>

| Problem | Fix |

|--------|------|

| Menu item shows but nothing happens | Check the function name matches exactly |

| You see fiScript Errorfl popup | Open script editor 
®
 check the console |

| Menu didn(TM)t update | Save, reload the spreadsheet |

---

<h3>
n
 Tips:</h3>

- Use emojis like fi
n
fl or fi
n
fl to mark test tools

- Group your items under a new menu: e.g. fi
nn
 My Toolsfl

- Use <code>.addSeparator()</code> to organize sections

---

<p>

Next: <a href="#section9_6">Section 9.6 -- Adding a Custom Export Hook</a>

</p>

<!--

Glossary Terms Referenced:

- onOpen()

- Custom Menu

- addItem()

- SpreadsheetApp.getUi()

-->

# END SECTION 9 -- PART 5

# START SECTION 9 -- PART 6

<!-- =============================================== -->

<!-- SECTION 9.6 -- Adding a Custom Export Hook -->


<!-- =============================================== -->

<h2 id="section9_6">Section 9.6 -- Adding a Custom Export Hook</h2>

<p>

This section shows how to create your own export function -- to save results in a new format, send them to 

another service, or prepare them for sharing or uploading.

</p>

---

<h3>
n
 Step 1: Decide What You Want to Export</h3>

Most users want to export data from:

<ul>

<li><code>Regression Results</code> tab</li>

<li>Interval Sheet</li>

<li>CSV tabs (one or all)</li>

</ul>

We(TM)ll use <strong>fiRegression Resultsfl</strong> as the default example.

---

<h3>
n
 Step 2: Write a Simple Export Function</h3>

Paste this into <code>Code.gs</code>:

<pre><code>

function exportRegressionAsJSON() {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Regression Results");

  if (!sheet) {

    SpreadsheetApp.getUi().alert("No 'Regression Results' tab found.");

    return;

  }

  const data = sheet.getDataRange().getValues();

  const headers = data[0];

  const results = [];

  for (let i = 1; i < data.length; i++) {

    const row = {};

    for (let j = 0; j &lt; headers.length; j++) {

      row[headers[j]] = data[i][j];

    }

    results.push(row);

  }

  const jsonOutput = JSON.stringify(results, null, 2);

  Logger.log(jsonOutput); // Outputs to View 
®
 Logs

  SpreadsheetApp.getUi().alert("Export complete. Check View 
®
 Logs for output.");

}

</code></pre>

---

<h3>
n
 Step 3: Link It to a Menu Button</h3>

In your <code>onOpen()</code> function, add:

<pre><code>

.addItem("
n
 Export Regression JSON", "exportRegressionAsJSON")

</code></pre>

Then reload your spreadsheet 
®
 go to the menu 
®
 click the new item.

---

<h3>
n
 Step 4: View the Result</h3>

1. Go to <code>Extensions 
®
 Apps Script</code>

2. Click <code>View 
®
 Logs</code>

3. You(TM)ll see clean JSON like this:

<pre>{

  "Sheet": "Trial 1",

  "RMSE": 0.042,

  "Function": "y = A e^(-bt) cos(wt + 
f
)",

  "A": 4.8,

  "b": 0.2,

  ...

}</pre>

You can copy that into another program or save it to Drive (advanced step in 9.7).

---

<h3>
n
 Bonus: Save It to a New Sheet</h3>

To save the JSON to a sheet instead of just Logs, add this:

<pre><code>

const outputSheet = SpreadsheetApp.getActiveSpreadsheet().insertSheet("JSON Export");

outputSheet.getRange(1, 1).setValue(jsonOutput);

</code></pre>

---

<h3>
n
 Common Mistakes:</h3>

| Issue | Fix |

|-------|-----|

| fiSheet not foundfl | Check tab name matches exactly |

| Blank output | Make sure data starts at row 2, not empty |

| Error on paste | Recheck smart quotes or HTML code tags |


---

<h3>Tips:</h3>

<ul>

<li>You can export any sheet -- just change the sheet name in <code>getSheetByName()</code></li>

<li>Wrap exports in <code>try { ... } catch(e) {}</code> to protect against crashes</li>

<li>Use this as a base for Drive, API, or external tool export in v5.3+</li>

</ul>

<p>

Next: <a href="#section9_7">Section 9.7 -- Safe Testing and Debugging</a>

</p>

<!--

Glossary Terms Referenced:

- JSON Export

- Regression Results

- getSheetByName()

- Logger.log()

- Menu Hook

-->

# END SECTION 9 -- PART 6

# START SECTION 9 -- PART 7

<!-- =============================================== -->

<!-- SECTION 9.7 -- Safe Testing and Debugging -->

<!-- =============================================== -->

<h2 id="section9_7">Section 9.7 -- Safe Testing and Debugging</h2>

<p>

This guide shows you how to test custom functions and script edits without damaging your spreadsheet -- and how

 to fix common mistakes quickly.

</p>

---

<h3>
n
 Rule 1: Always Work on a Copy</h3>

<ol>

<li>Open your spreadsheet</li>

<li>Go to <code>File 
®
 Make a copy</code></li>

<li>Work only in the copy until your new feature is tested</li>

</ol>

---

<h3>
n
 Rule 2: Use Logger.log() to See What(TM)s Happening</h3>

You can print any variable or message by adding this to your script:

<pre><code>

Logger.log("Start of regression");

Logger.log("A = " + A);

</code></pre>

View output in Apps Script:

<code>View 
®
 Logs</code>

---

<h3>
n
 Rule 3: Use TryOECatch to Trap Errors</h3>

If you're not sure something will work, wrap it like this:

<pre><code>

try {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Data");

  const A = sheet.getRange("B1").getValue();

  Logger.log("A = " + A);

} catch (e) {

  Logger.log("ERROR: " + e.message);

}

</code></pre>

n
 Now if it crashes, the error won(TM)t stop your code -- it just logs the message.

---

<h3>
n
 Rule 4: Use Console.log() in Web Apps</h3>

For HTML sidebars or popups, use:

<pre><code>

console.log("Loaded sidebar");

</code></pre>

View in the popup(TM)s dev console (right-click 
®
 Inspect)

---

<h3>
n
 Rule 5: Undoing Mistakes</h3>

| Action | How to Undo |

|--------|-------------|

| Deleted working function | Use Edit 
®
 Undo or re-paste from backup |

| Menu disappeared | Check `onOpen()` and reload the spreadsheet |

| Errors on sheet | Go to fiError Logfl tab and clear it |

| Crash in script | Reload 
®
 then click Extensions 
®
 Apps Script to fix |

---

<h3>
n
 Bonus: Create a Debug Tab</h3>

You can route all logs into a sheet like this:


<pre><code>

function debugToSheet(message) {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Debug") ||

                SpreadsheetApp.getActiveSpreadsheet().insertSheet("Debug");

  sheet.appendRow([new Date(), message]);

}

</code></pre>

Then in your other function, write:

<pre><code>

debugToSheet("Started regression on sheet " + sheet.getName());

</code></pre>

---

<h3>
n
 Tips:</h3>

<ul>

<li>Never run tests on real data</li>

<li>Always keep the last known working version saved</li>

<li>Use comments <code>// like this</code> to explain your changes</li>

</ul>

---

<p>

Next: <a href="#section10">Section 10 -- MATLAB Integration and Export Tools</a>

</p>

<!--

Glossary Terms Referenced:

- Logger

- Debug

- try/catch

- Console.log

- Undo

-->

# END SECTION 9 -- PART 7

# START SECTION 10 -- PART 1

<!-- =============================================== -->

<!-- SECTION 10.1 -- Overview of MATLAB Integration -->

<!-- =============================================== -->

<h2 id="section10">Section 10 -- MATLAB Integration and Export Tools</h2>

<p>

This section introduces how the Physics Data Collection system integrates with <strong>MATLAB</strong> to 

allow seamless export of both raw data and fitted regression models. The tools here are designed to support 

both beginner and advanced users, and enable `.m` file generation, CSV formatting, and function exports 

compatible with MATLAB Desktop or MATLAB Online.

</p>

---

<h3>
n
 What You Can Do with This Section:</h3>

<ul>

<li>Export formatted <code>.csv</code> sheets for MATLAB use</li>

<li>Convert regression models into <code>.m</code> function files</li>

<li>Batch-export all trial sheets to individual scripts</li>

<li>Use cell-based variable input to customize `.m` output</li>

<li>Automatically generate MATLAB-compatible code blocks</li>

<li>Preview LaTeX and syntax before exporting</li>

</ul>

---

<h3>
n
 Who This Is For:</h3>

<table>

<thead><tr><th>User Level</th><th>What You'll Learn</th></tr></thead>

<tbody>

<tr><td><strong>Beginner</strong></td><td>How to export CSVs and open in MATLAB using 

<code>readmatrix()</code></td></tr>

<tr><td><strong>Intermediate</strong></td><td>How to convert regression outputs into clean, testable `.m` 

scripts</td></tr>

<tr><td><strong>Advanced</strong></td><td>How to create parameterized wrappers, LaTeX previews, and batch 

script pipelines</td></tr>

</tbody>

</table>

---

<h3>
n
 File Types You(TM)ll Export:</h3>

<ul>

<li><strong><code>.csv</code></strong> -- Cleaned experimental data for import</li>

<li><strong><code>.m</code></strong> -- MATLAB functions generated from regression</li>

<li><strong><code>.mat</code></strong> (optional) -- With future support via Drive API</li>

<li><strong><code>.json</code></strong> -- For advanced export or MATLAB Online integration</li>

</ul>

---

<h3>
n
 Workflow Overview:</h3>

<pre>

1. Collect and tag experimental data in Sheets


2. Run regression and view fit results

3. Choose export type: CSV, .m, or both

4. Preview MATLAB version in sidebar

5. Save or auto-generate to Drive

6. Open or test in MATLAB (Desktop or Online)

</pre>

---

<h3>
n
 System Hooks That Trigger MATLAB Export:</h3>

<ul>

<li><code>runRegression()</code> 
®
 optionally creates a `.m` file after fit</li>

<li><code>onAfterRegression()</code> 
®
 can be extended to auto-export scripts</li>

<li><code>exportAllToMATLAB()</code> 
®
 utility batch exporter added in Section 10.5</li>

</ul>

---

<h3>
n
 Sections Ahead in This Chapter:</h3>

<ul>

<li><strong>10.2</strong> -- Exporting Sheet Data as CSV for MATLAB</li>

<li><strong>10.3</strong> -- Exporting Regression Results to `.m`</li>

<li><strong>10.4</strong> -- Creating MATLAB Function Wrappers</li>

<li><strong>10.5</strong> -- Exporting All Trials as Folder of `.m` Scripts</li>

<li><strong>10.6</strong> -- Adding Cell-Based Inputs into `.m` Output</li>

<li><strong>10.7</strong> -- MATLAB LaTeX Preview Tools</li>

<li><strong>10.8</strong> -- Saving Scripts to Google Drive</li>

<li><strong>10.9</strong> -- MATLAB Import Scripts for Sheet Data</li>

<li><strong>10.10+</strong> -- Full Example, Custom Templates, Drive Sync</li>

</ul>

---

<p>

Next: <a href="#section10_2">Section 10.2 -- Exporting Sheet Data as CSV for MATLAB</a>

</p>

<!--

Glossary Terms Referenced:

- MATLAB

- .m file

- readmatrix()

- Regression Output

- Cell Reference

- Export Format

- runRegression()

- Script Hook

-->

# END SECTION 10 -- PART 1

# START SECTION 10 -- PART 2

<!-- =============================================== -->

<!-- SECTION 10.2 -- Exporting Sheet Data as CSV for MATLAB -->

<!-- =============================================== -->

<h2 id="section10_2">Section 10.2 -- Exporting Sheet Data as CSV for MATLAB</h2>

<p>

This section explains how to export clean CSV files from Google Sheets that are ready for import into MATLAB 

using <code>readmatrix()</code>, <code>readtable()</code>, or <code>csvread()</code>.

All examples are compatible with MATLAB Desktop and MATLAB Online.

</p>

---

<h3>
n
 Goal:</h3>

- Export any experimental tab to a clean `.csv`

- Ensure proper formatting for MATLAB compatibility

- Handle delimiters, headers, missing values

- Allow batch export to a folder

---

<h3>
n
 Recommended Folder Setup:</h3>

You should have a folder for MATLAB-exported files (either shared with Drive or local).

Use the built-in CSV Manager to create or manage these folders:

<pre>

n
 CSV Manager 
®
 Setup Folders

®
 fiExport: MATLAB_Readyfl folder ID

</pre>

You can rename this as needed in Section 7 or in the folder configuration object.

---

<h3>
n
 Default Export Function:</h3>

Paste this into <code>Code.gs</code> to allow any sheet to be exported:

<pre><code>

function exportSheetAsCSV(sheetName) {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);

  if (!sheet) {

    Logger.log("Sheet not found: " + sheetName);

    return;


  }

  const data = sheet.getDataRange().getValues();

  const csv = data.map(row => row.join(",")).join("\n");

  const folder = DriveApp.getFolderById("PUT_YOUR_FOLDER_ID_HERE");

  const file = folder.createFile(sheetName + ".csv", csv, MimeType.CSV);

  Logger.log("Exported: " + file.getName());

}

</code></pre>

---

<h3>
n
 Tips for Clean Output:</h3>

<ul>

<li>Use <code>row.join(",")</code> for comma separation (MATLAB default)</li>

<li>Ensure headers don(TM)t contain <code>spaces</code>, <code>units</code>, or parentheses (e.g., 

<code>Time_ms</code> instead of <code>Time (ms)</code>)</li>

<li>Use <code>.toFixed(n)</code> if needed to round values during export</li>

<li>Missing values are fine -- MATLAB reads them as <code>NaN</code></li>

</ul>

---

<h3>
n
 Where Files Are Saved:</h3>

The script uses Google Drive folder ID -- you can configure this per user:

<pre><code>

// Optional config for user-safe export

const EXPORT_FOLDER_ID = "1a2b3cYourFolderHereXYZ";

</code></pre>

To make this user-configurable, store this in a metadata cell and retrieve with:

<pre><code>

const folderId = sheet.getRange("Z1").getValue(); // or pull from CONFIG sheet

</code></pre>

---

n
 Ready for Block 2?

Please say: **"10.2 block 2"** to continue.

<!-- CONTINUATION OF SECTION 10.2 -- Exporting Sheet Data as CSV for MATLAB -->

---

<h3>
n
 Validating Your Output in MATLAB</h3>

After exporting, open MATLAB and run:

<pre><code>

data = readmatrix("Trial_01.csv");

t = data(:,1);   % Time

y = data(:,2);   % Position, voltage, etc.

</code></pre>

You should see your time series and dependent variable cleanly loaded.

---

<h3>
n
 Alternate Import Methods</h3>

| MATLAB Command | Description |

|----------------|-------------|

| <code>readmatrix()</code> | Best for numeric arrays with headers |

| <code>readtable()</code> | Best for labeled column data |

| <code>csvread()</code> | Deprecated but still works (numeric only) |

Example using <code>readtable</code>:

<pre><code>

T = readtable("Trial_01.csv");

plot(T.Time_ms, T.Position_cm);

</code></pre>

---

<h3>
nn
 Common Issues and Fixes</h3>

| Problem | Cause | Fix |

|--------|-------|-----|

| "Unrecognized variable" | Header contains space or units | Use underscores: <code>Time_ms</code> |

| Wrong column order | Headers not standardized | Use column reordering in Sheets |

| File not found | Drive export location mismatch | Copy to local MATLAB folder or use 

<code>uigetfile()</code> |

---

<h3>
n
 Bonus: Export Multiple CSVs Automatically</h3>

Paste this to export all non-system sheets at once:

<pre><code>

function exportAllSheetsAsCSV() {

  const ss = SpreadsheetApp.getActiveSpreadsheet();

  const folder = DriveApp.getFolderById("YOUR_FOLDER_ID_HERE");

  ss.getSheets().forEach(sheet => {

    const name = sheet.getName();

    if (["CONFIG", "Validation", "Regression Results"].includes(name)) return;

    const data = sheet.getDataRange().getValues();

    const csv = data.map(row => row.join(",")).join("\n");

    folder.createFile(name + ".csv", csv, MimeType.CSV);


  });

}

</code></pre>

You can link this to a menu item for easy access.

---

n
 Ready for Block 3?

Please reply: **"10.2 block 3"**

<!-- CONTINUATION OF SECTION 10.2 -- Exporting Sheet Data as CSV for MATLAB -->

---

<h3>
n
 Optional: Strip Units and Format Headers Automatically</h3>

To automate header cleaning, use:

<pre><code>

function cleanHeaders(row) {

  return row.map(header => {

    return header

      .replace(/\s+/g, "_")         // Replace spaces with underscores

      .replace(/\(.*?\)/g, "")      // Remove parentheses and units

      .replace(/[^\w_]/g, "");      // Remove special characters

  });

}

</code></pre>

You can insert this into your export script before the first row is written.

---

<h3>
n
 Notes on LaTeX Compatibility</h3>

If you're using LaTeX-rendered variable names (e.g., <code>$x(t)$</code>) in your column headers, those will 

**not work** in MATLAB.

Use Sheet-visible headers like:

- <code>x_t</code> instead of <code>$x(t)$</code>

- <code>A_exp_neg_bt_cos_wt_phi</code> instead of long LaTeX output

The full LaTeX version is already captured in the <code>Regression Results</code> tab -- no need to reuse it in

 CSV headers.

---

<h3>
n
 Recommended Folder Naming Convention:</h3>

| Type | Suggested Folder Name |

|------|------------------------|

| Raw CSVs | <code>raw_export_csv/</code> |

| MATLAB Scripts | <code>matlab_generated_scripts/</code> |

| Batch Output | <code>regression_m_batch/</code> |

This ensures automated tools (Section 10.5) can detect folder purpose by name prefix.

---

<p>

Next: <a href="#section10_3">Section 10.3 -- Exporting Regression Results to .m</a>

</p>

<!--

Glossary Terms Referenced:

- readmatrix()

- readtable()

- CSV

- Folder ID

- Header Format

- Regression Results

- Sheet Metadata

- Script Menu Hook

-->

# END SECTION 10 -- PART 2

# START SECTION 10.3.1.1

<!-- ===================================================== -->

<!-- SECTION 10.3.1.1 -- LaTeX Function Format 
®
 Symbol Strip -->

<!-- ===================================================== -->

<h3 id="section10_3_1_1">Section 10.3.1.1 -- LaTeX Format 
®
 Symbol Strip</h3>

<p>

The first step in generating MATLAB-ready `.m` scripts from regression output is converting the <strong>LaTeX-

formatted regression equation</strong> into a raw symbolic format. This fisymbol stripfl step prepares the 

expression for translation into executable MATLAB code.

</p>

---

<h4>
n
 Objective:</h4>

Transform equations like:

<pre><code>y = A e^{-bt} \cos(\omega t + \phi)</code></pre>

into:

<pre><code>y = A * exp(-b*t) * cos(w*t + phi)</code></pre>

---

<h4>
nn
 Step-by-Step: Strip LaTeX Formatting</h4>

MATLAB cannot directly interpret LaTeX syntax. We must process the following:


| LaTeX Pattern | Meaning | Target |

|---------------|---------|--------|

| <code>e^{x}</code> | Exponential | <code>exp(x)</code> |

| <code>\cos</code> | Cosine | <code>cos</code> |

| <code>\sin</code> | Sine | <code>sin</code> |

| <code>\ln</code> | Natural log | <code>log</code> |

| <code>\cdot</code> | Multiplication | <code>*</code> |

| <code>{ }</code> | Grouping | Flatten or retain as parentheses |

| <code>\left(...\right)</code> | Wrapped group | Remove \left/\right |

| Greek (e.g., <code>\phi</code>) | Named var | Use plain ASCII (e.g., <code>phi</code>) |

---

<h4>
n
 Code Snippet: Symbol Strip (Apps Script)</h4>

This function removes LaTeX formatting from an input regression string:

<pre><code>

function stripLatexSymbols(latex) {

  return latex

    .replace(/\\cdot/g, "*")

    .replace(/\\left/g, "")

    .replace(/\\right/g, "")

    .replace(/\\cos/g, "cos")

    .replace(/\\sin/g, "sin")

    .replace(/\\ln/g, "log")

    .replace(/e\^\{(.*?)\}/g, "exp($1)")

    .replace(/\\phi/g, "phi")

    .replace(/\\theta/g, "theta")

    .replace(/\\omega/g, "w")

    .replace(/\{|\}/g, "");  // Strip remaining braces

}

</code></pre>

You may need to add further substitutions depending on your models (e.g., <code>\tan</code>, 

<code>\beta</code>, etc.).

---

<h4>
n
 Notes:</h4>

- All function names must be lowercase: <code>cos</code>, <code>exp</code>, etc.

- Wrap nested terms in parentheses manually where needed

- Variables like <code>\phi</code> or <code>\omega</code> are translated to <code>phi</code>, <code>w</code> 

for MATLAB use

---

<h4>
n
 Example Transformation:</h4>

| Original LaTeX | Result |

|----------------|--------|

| <code>y = A e^{-bt} \cos(\omega t + \phi)</code> | <code>y = A * exp(-b*t) * cos(w*t + phi)</code> |

| <code>y = A \cdot \sin(\omega t)</code> | <code>y = A * sin(w*t)</code> |

| <code>\ln(y)</code> | <code>log(y)</code> |

---

<!-- Glossary Terms Referenced:

- LaTeX

- Regression Output

- Symbolic Conversion

- Parameter Mapping

- exp()

- cos()

- parseFormula()

-->

# END SECTION 10.3.1.1

# START SECTION 10.3.1.2

<!-- ===================================================== -->

<!-- SECTION 10.3.1.2 -- Convert Math to MATLAB Syntax -->

<!-- ===================================================== -->

<h3 id="section10_3_1_2">Section 10.3.1.2 -- Convert Math to MATLAB Syntax</h3>

<p>

Once LaTeX formatting is stripped, we must translate the resulting symbolic equation into valid MATLAB syntax.

 This process includes inserting multiplication operators, applying correct parentheses, and confirming that 

all math functions use MATLAB-friendly names and structure.

</p>

---

<h4>
n
 Example Symbolic 
®
 MATLAB Conversion:</h4>

| Symbolic Expression | MATLAB Output |

|---------------------|----------------|

| <code>A exp(-b t) cos(w t + phi)</code> | <code>y = A * exp(-b*t) * cos(w*t + phi);</code> |

| <code>y = A sin(w t)</code> | <code>y = A * sin(w*t);</code> |

| <code>y = A (1 - exp(-b t))</code> | <code>y = A * (1 - exp(-b*t));</code> |

---

<h4>
n
 Rule: Insert Multiplication Stars</h4>

When a variable or constant is followed directly by another (e.g., <code>A t</code>), we must insert 

<code>*</code> between them:

<pre><code>


function insertMultiplication(expr) {

  return expr

    .replace(/([a-zA-Z0-9])\s+(?=[a-zA-Z])/g, "$1*")

    .replace(/(\))\s*(?=[a-zA-Z])/g, "$1*")

    .replace(/([a-zA-Z])\s*(\()/g, "$1*(");

}

</code></pre>

This covers:

- <code>A t</code> 
®
 <code>A * t</code>

- <code>exp(-b t)</code> 
®
 <code>exp(-b*t)</code>

- <code>cos(w t)</code> 
®
 <code>cos(w*t)</code>

---

<h4>
nn
 Edge Case Handling</h4>

| Problem | Fix |

|--------|-----|

| <code>y = At</code> | Add space manually if parser doesn(TM)t detect |

| <code>cos(wt + phi)</code> | Regex handles insertion after function name |

| <code>A(w t)</code> | Invalid in MATLAB -- requires full `*` separation |

---

<h4>
n
 Full Transformation Pipeline (combined):</h4>

<pre><code>

function prepareForMATLAB(latexExpr) {

  const noLatex = stripLatexSymbols(latexExpr);

  const matlabReady = insertMultiplication(noLatex);

  return matlabReady;

}

</code></pre>

You can run this on any LaTeX equation pulled from the Regression Results tab.

---

<h4>
n
 Final Output Example:</h4>

Input LaTeX:

<pre><code>y = A e^{-bt} \cos(\omega t + \phi)</code></pre>

Resulting MATLAB Expression:

<pre><code>y = A * exp(-b*t) * cos(w*t + phi);</code></pre>

Use this directly in an `.m` script (next section will auto-generate it).

---

<!-- Glossary Terms Referenced:

- Symbolic Equation

- Multiplication Operator

- MATLAB Function Formatting

- Function Injection

- MATLAB Ready Syntax

-->

# END SECTION 10.3.1.2

# START SECTION 10.3.1.3

<!-- ============================================================ -->

<!-- SECTION 10.3.1.3 -- Handling Power, Logarithmic, Exp, and Cos -->

<!-- ============================================================ -->

<h3 id="section10_3_1_3">Section 10.3.1.3 -- Handling Power, Log, Exp, Cos</h3>

<p>

This subsection addresses the conversion of common mathematical functions into executable MATLAB format. It 

ensures that exponentiation, logarithmic, exponential, and trigonometric terms are correctly translated from 

symbolic notation.

</p>

---

<h4>
n
 Supported Functions:</h4>

| Symbol | Meaning | MATLAB Equivalent |

|--------|---------|-------------------|

| <code>^</code> | Power | <code>x^n</code> |

| <code>\ln(x)</code> | Natural log | <code>log(x)</code> |

| <code>e^{x}</code> | Exponential | <code>exp(x)</code> |

| <code>\cos(x)</code> | Cosine | <code>cos(x)</code> |

| <code>\sin(x)</code> | Sine | <code>sin(x)</code> |

| <code>\tan(x)</code> | Tangent | <code>tan(x)</code> |

All MATLAB functions are lowercase, with full parentheses.

---

<h4>
n
 Auto-Conversion Function:</h4>

You can handle these programmatically:

<pre><code>

function convertFunctions(expr) {

  return expr

    .replace(/\bln\((.*?)\)/g, "log($1)")

    .replace(/\bexp\((.*?)\)/g, "exp($1)")

    .replace(/\bsqrt\((.*?)\)/g, "sqrt($1)")

    .replace(/\bcos\((.*?)\)/g, "cos($1)")

    .replace(/\bsin\((.*?)\)/g, "sin($1)")


    .replace(/\btan\((.*?)\)/g, "tan($1)");

}

</code></pre>

Use this *after* `stripLatexSymbols()` and `insertMultiplication()`.

---

<h4>
nn
 Special Case: Power (Exponent)</h4>

Apps Script and Sheets use <code>^</code> to indicate power, which is valid in MATLAB.

- 
n
 You can leave <code>x^2</code> unchanged

- 
n
 Do not use <code>**</code> (JavaScript syntax -- invalid in MATLAB)

- 
n
 Wrap nested power terms in parentheses for safety

Example:

<pre><code>

y = A * (t^2) * exp(-b*t);

</code></pre>

---

<h4>
n
 Common Transform Examples:</h4>

| Input | Result |

|-------|--------|

| <code>ln(x)</code> | <code>log(x)</code> |

| <code>e^{bt}</code> | <code>exp(b*t)</code> |

| <code>cos(w t)</code> | <code>cos(w*t)</code> |

| <code>x^2</code> | <code>x^2</code> |

| <code>A sqrt(t)</code> | <code>A * sqrt(t)</code> |

---

<h4>
n
 Wrap All Together:</h4>

<pre><code>

function formatExpressionForMATLAB(latexInput) {

  const clean = stripLatexSymbols(latexInput);

  const mul = insertMultiplication(clean);

  const func = convertFunctions(mul);

  return func;

}

</code></pre>

---

<h4>
n
 Final Output Ready for `.m`:</h4>

<pre><code>

y = A * exp(-b*t) * cos(w*t + phi) + C * t^2;

</code></pre>

This output will be injected into the `.m` export file in Section 10.3.2.

---

<!-- Glossary Terms Referenced:

- Function Conversion

- Exponent

- Trigonometric

- MATLAB Syntax

- Symbol Replacement

-->

# END SECTION 10.3.1.3

# START SECTION 10.3.1.4

<!-- ===================================================== -->

<!-- SECTION 10.3.1.4 -- Cleaning Undefined Variables -->

<!-- ===================================================== -->

<h3 id="section10_3_1_4">Section 10.3.1.4 -- Cleaning Undefined Variables</h3>

<p>

Before exporting a regression expression into a MATLAB `.m` file, it(TM)s critical to ensure that all variables 

used in the formula are <strong>defined</strong> and <strong>valid</strong>. This section covers how to detect

 and clean undefined or accidental variables.

</p>

---

<h4>
nn
 Why It Matters</h4>

MATLAB will throw an error if a variable is used but not defined. For example:

<pre><code>

y = A * exp(-b*t) * cos(w*t + 
f
);  % ERROR: 
f
 is not defined

</code></pre>

We must replace symbols like `
f
` with ASCII (`phi`) or ensure a numerical value is assigned.

---

<h4>
n
 Step 1: Extract All Variable Names</h4>

This parser grabs all alphabetic variables in an expression:

<pre><code>

function extractVariables(expr) {

  const matches = expr.match(/[a-zA-Z_][a-zA-Z0-9_]*/g);

  return [...new Set(matches)];

}

</code></pre>

---


<h4>
n
 Step 2: Check Against Known Parameter List</h4>

Assume you have this from your regression:

<pre><code>

const params = ["A", "b", "t", "w", "phi", "C"];

</code></pre>

You can then compare:

<pre><code>

const varsInExpr = extractVariables(expr);

const unknowns = varsInExpr.filter(v => !params.includes(v));

if (unknowns.length > 0) {

  Logger.log("
nn
 Unknown variables found: " + unknowns.join(", "));

}

</code></pre>

---

<h4>
n
 Fixing Options:</h4>

| Type | Solution |

|------|----------|

| Greek symbol (e.g. 
f
) | Replace with ASCII (`phi`) |

| Extra temp variable | Remove or rename |

| Accidental typo (e.g. <code>w</code> vs <code>W</code>) | Standardize case |

---

<h4>
n
 Optional: Auto-Define Unknowns as Parameters</h4>

For user convenience, you can add this logic:

<pre><code>

unknowns.forEach(u => {

  expr = expr.replace(new RegExp("\\b" + u + "\\b", "g"), u.toLowerCase());

  if (!params.includes(u)) params.push(u);

});

</code></pre>

Then prompt the user to define these values before script export.

---

<h4>
n
 Final Example:</h4>

| Raw Formula | Cleaned |

|-------------|---------|

| <code>y = A * exp(-b*t) * cos(w*t + 
f
)</code> | <code>y = A * exp(-b*t) * cos(w*t + phi)</code> |

| <code>y = V_0 + r*t</code> | <code>y = V0 + r*t</code> |

---

<h4>
n
 Best Practices:</h4>

- Use lowercase for all internal parameter names (match MATLAB conventions)

- Strip all Unicode or special characters

- Never assume a variable is defined -- always check

---

<!-- Glossary Terms Referenced:

- Undefined Variable

- Parameter List

- Regression Parameters

- Variable Sanitization

- MATLAB Error

-->

# END SECTION 10.3.1.4

# START SECTION 10.3.2.1

<!-- ================================================================ -->

<!-- SECTION 10.3.2.1 -- Create .m Header, Inputs, and Description -->

<!-- ================================================================ -->

<h3 id="section10_3_2_1">Section 10.3.2.1 -- Create <code>.m</code> Header, Inputs, and Description</h3>

<p>

The first step when generating a MATLAB <code>.m</code> file from a regression result is defining the file(TM)s 

structure: the function name, parameter inputs, and descriptive header block.

</p>

---

<h4>
n
 Goal:</h4>

Transform a regression like:

<pre><code>y = A * exp(-b*t) * cos(w*t + phi)</code></pre>

Into a complete `.m` file that starts like this:

<pre><code>

function y = damped_model(t, A, b, w, phi)

% DAMPED_MODEL: Regression model generated from Google Sheets

%   y = A * exp(-b*t) * cos(w*t + phi)

%   t = time (independent variable)

%   A, b, w, phi = fitted parameters

y = A * exp(-b*t) * cos(w*t + phi);

</code></pre>

---

<h4>
n
 Step 1: Define Function Name</h4>


Use a standardized, lowercase name. Avoid spaces, hyphens, and special characters.

<pre><code>

const functionName = "damped_model";  // recommended

</code></pre>

You may use the regression title, cleaned:

<pre><code>

function cleanFunctionName(name) {

  return name.toLowerCase().replace(/[^a-z0-9_]/g, "_");

}

</code></pre>

---

<h4>
n
 Step 2: Extract Parameter List</h4>

Assume you already have:

<pre><code>

const params = ["A", "b", "w", "phi"];

const independent = "t";

</code></pre>

Generate MATLAB function header:

<pre><code>

const header = `function y = ${functionName}(${independent}, ${params.join(", ")})`;

</code></pre>

---

<h4>
n
 Step 3: Build Docstring Block</h4>

Add a simple comment header for readability:

<pre><code>

const doc = `%% ${functionName}.m

% Auto-generated regression model from Physics Data Sheet

%   Formula: y = ${latex}

%   Variables: ${params.join(", ")}

%   Input: ${independent} (independent variable)

%   Output: y (model prediction)

`;

</code></pre>

You can prepend this to the file content to make it MATLAB editor friendly.

---

<h4>
n
 Full Example Header Block:</h4>

<pre><code>

function y = damped_model(t, A, b, w, phi)

% DAMPED_MODEL: Regression model auto-generated from spreadsheet

%   y = A * exp(-b*t) * cos(w*t + phi)

%   A = Amplitude

%   b = damping constant

%   w = angular frequency

%   phi = phase angle

y = A * exp(-b*t) * cos(w*t + phi);

</code></pre>

---

<h4>
n
 Best Practices:</h4>

- Use lowercase and underscores for function names

- Include a `%%` marker at the top (improves visibility in MATLAB editor)

- Keep the input order consistent with regression model sheet

---

<!-- Glossary Terms Referenced:

- MATLAB Function Header

- Parameter List

- Function Inputs

- Docstring

- Function Name Sanitization

-->

# END SECTION 10.3.2.1

# START SECTION 10.3.2.2

<!-- ============================================================ -->

<!-- SECTION 10.3.2.2 -- Inject Parameters into Function Body -->

<!-- ============================================================ -->

<h3 id="section10_3_2_2">Section 10.3.2.2 -- Inject Parameters into Function Body</h3>

<p>

Once you(TM)ve constructed the header and gathered the variable names, the next step is to insert the regression 

formula into the body of the `.m` file. This is where the actual computation occurs -- where the user(TM)s input 

values are processed through the model.

</p>

---

<h4>
n
 Goal:</h4>

Build this inside the `.m` script:

<pre><code>

function y = damped_model(t, A, b, w, phi)


% DAMPED_MODEL: Auto-generated regression model

%   y = A * exp(-b*t) * cos(w*t + phi)

y = A * exp(-b*t) * cos(w*t + phi);

</code></pre>

---

<h4>
n
 Step-by-Step: Generate the Function Body</h4>

1. Sanitize your symbolic formula using:

   - <code>stripLatexSymbols()</code>

   - <code>insertMultiplication()</code>

   - <code>convertFunctions()</code>

2. Run <code>extractVariables()</code> to identify required parameters.

3. Format the expression as a MATLAB-ready statement:

<pre><code>

const expression = "A * exp(-b*t) * cos(w*t + phi)";

const body = `y = ${expression};`;

</code></pre>

4. Append the result to the `.m` file content block.

---

<h4>
nn
 Notes on Syntax:</h4>

| Rule | Result |

|------|--------|

| All variables must match header inputs | 
n
 |

| Expression must be 100% valid MATLAB | 
n
 |

| Do not include semicolon in header | 
n
 |

| Always end body with `;` for output suppression | 
n
 |

---

<h4>
n
 Handling Custom or Optional Parameters</h4>

If the user modifies the formula or adds a new variable (e.g. `+ C`), the new parameter must be:

- Added to the function header

- Verified for definition

- Inserted into the body

Example:

<pre><code>

function y = trial_model(t, A, b, w, phi, C)

y = A * exp(-b*t) * cos(w*t + phi) + C;

</code></pre>

---

<h4>
n
 Recommended Formatting Block:</h4>

<pre><code>

lines = [];

lines.push(header);            // from 10.3.2.1

lines.push("% " + description);

lines.push(body);              // this section

const content = lines.join("\n");

</code></pre>

You can write this to a `.m` file or preview it in a dialog box before export.

---

<h4>
n
 Example Final Function Body:</h4>

<pre><code>

function y = model1(t, A, b, w, phi)

% MODEL1: Regression model

% Formula: y = A * exp(-b*t) * cos(w*t + phi)

y = A * exp(-b*t) * cos(w*t + phi);

</code></pre>

This string is now ready to be passed to DriveApp or downloaded via Apps Script.

---

<!-- Glossary Terms Referenced:

- Function Body

- Parameter Injection

- Regression Output

- Symbolic Formula

- MATLAB Code Formatting

-->

# END SECTION 10.3.2.2

# START SECTION 10.3.2.3

<!-- ============================================================ -->

<!-- SECTION 10.3.2.3 -- Add Inline Comments and Formatting -->

<!-- ============================================================ -->

<h3 id="section10_3_2_3">Section 10.3.2.3 -- Add Inline Comments and Formatting</h3>

<p>

To make the exported MATLAB script useful for students, teachers, and researchers alike, it should include 

<strong>human-readable comments</strong>. These comments document each input and computation step for 

transparency and future reuse.

</p>

---


<h4>
n
 Objective:</h4>

Make your auto-generated `.m` files as understandable as if they were written manually.

Example target:

<pre><code>

function y = damped_model(t, A, b, w, phi)

% DAMPED_MODEL: Auto-exported regression model from spreadsheet

% Parameters:

%   t    - time input (independent variable)

%   A    - amplitude of oscillation

%   b    - damping constant

%   w    - angular frequency

%   phi  - phase shift

% Compute damped cosine output

y = A * exp(-b*t) * cos(w*t + phi);

</code></pre>

---

<h4>
n
 Strategy: Auto-Insert Parameter Descriptions</h4>

If parameter names are known (from regression labels), you can auto-insert:

<pre><code>

const paramDescriptions = {

  A: "amplitude of oscillation",

  b: "damping constant",

  w: "angular frequency",

  phi: "phase shift",

  t: "time input (independent variable)"

};

</code></pre>

Then, for each param:

<pre><code>

params.forEach(p => {

  commentLines.push(`%   ${p.padEnd(4)} - ${paramDescriptions[p] || "input parameter"}`);

});

</code></pre>

---

<h4>
n
 Recommended Comment Template:</h4>

<pre><code>

lines = [

  `function y = ${name}(${args.join(", ")})`,

  `% ${name.toUpperCase()}: Auto-exported regression model`,

  `% Parameters:`,

  ...commentLines,

  ``,

  `% Compute model`,

  `y = ${expression};`

];

</code></pre>

This creates a clean output file that even beginner MATLAB users can understand.

---

<h4>
n
 Example Output With Comments:</h4>

<pre><code>

function y = spring_fit(t, A, b, w, phi)

% SPRING_FIT: Auto-exported regression model from Sheets

% Parameters:

%   t    - time (independent variable)

%   A    - amplitude of motion

%   b    - damping factor

%   w    - angular velocity

%   phi  - phase shift

% Compute damped oscillation

y = A * exp(-b*t) * cos(w*t + phi);

</code></pre>

This can be copy-pasted into MATLAB or viewed via Google Drive export (next section).

---

<h4>
n
 Optional: Add Units or Metadata from Sheets</h4>

You can optionally parse metadata from headers like:

- fiAmplitude (cm)fl 
®
 insert `cm` into docstring

- fiw (rad/s)fl 
®
 include units inline

---

<!-- Glossary Terms Referenced:

- Inline Comment

- MATLAB Script Documentation

- Parameter Description

- Docstring Format

- Auto-Formatting

-->

# END SECTION 10.3.2.3


# START SECTION 10.3.2.4

<!-- ================================================================ -->

<!-- SECTION 10.3.2.4 -- Validate and Format File Output -->

<!-- ================================================================ -->

<h3 id="section10_3_2_4">Section 10.3.2.4 -- Validate and Format File Output</h3>

<p>

Before saving the generated `.m` file, the final output must be validated and formatted to ensure correct 

syntax, proper spacing, and complete function structure. This step avoids runtime errors in MATLAB and 

improves long-term usability of the exported model.

</p>

---

<h4>
n
 Checklist for a Valid `.m` File:</h4>

| Requirement | Example |

|-------------|---------|

| Header starts with `function y =` | <code>function y = model1(t, A, b)</code> |

| Comments appear above the function body | Descriptions of each parameter |

| No undefined variables | All symbols match input list |

| Final expression ends in `;` | <code>y = A * exp(-b*t);</code> |

| File content has no stray characters or lines | Clean spacing, no JavaScript or LaTeX |

---

<h4>
n
 Code Validator (Apps Script)</h4>

<pre><code>

function validateMATLABCode(content, expectedParams) {

  const missing = expectedParams.filter(p => !content.includes(p));

  const hasFunction = content.includes("function y =");

  const hasSemicolon = /y\s*=\s*.*;/.test(content);

  return {

    valid: missing.length === 0 && hasFunction && hasSemicolon,

    issues: {

      missingParams: missing,

      functionDefined: hasFunction,

      terminatesWithSemicolon: hasSemicolon

    }

  };

}

</code></pre>

Call this before file export or preview generation.

---

<h4>
n
 Line Ending Format</h4>

Use `\n` line endings for cross-platform compatibility. Avoid `\r\n` unless absolutely necessary for older 

MATLAB versions on Windows.

Use:

<pre><code>

const content = lines.join("\n");

</code></pre>

---

<h4>
n
 Suggested File Naming Convention:</h4>

| File Type | Pattern |

|-----------|---------|

| `.m` File | `model_damped_trial3.m` |

| LaTeX Version | `model_damped_trial3_latex.txt` |

| Output Folder | `/matlab_generated_scripts/` |

---

<h4>
n
 Optional: Export Preview Function</h4>

You can show the user a modal preview before export:

<pre><code>

function previewMATLABScript(content) {

  SpreadsheetApp.getUi().alert("Exported .m preview:\n\n" + content);

}

</code></pre>

---

<h4>
n
 Final Output Template:</h4>

<pre><code>

function y = damped_model(t, A, b, w, phi)

% DAMPED_MODEL: Auto-exported model

%   Parameters: A, b, w, phi

y = A * exp(-b*t) * cos(w*t + phi);

</code></pre>

Use this content string in the export step that follows (Section 10.3.3).

---

<!-- Glossary Terms Referenced:

- File Output Format

- Function Definition

- Validation Checklist

- MATLAB Script Errors

- Auto-Formatting


-->

# END SECTION 10.3.2.4

# START SECTION 10.3.3.1

<!-- ============================================================ -->

<!-- SECTION 10.3.3.1 -- Save .m File to Google Drive -->

<!-- ============================================================ -->

<h3 id="section10_3_3_1">Section 10.3.3.1 -- Save <code>.m</code> File to Google Drive</h3>

<p>

Once a regression model has been converted into a MATLAB-compatible string, the final step is to save it to a 

`.m` file inside a known Drive folder. This allows the script to be downloaded or used via Drive-API-enabled 

MATLAB workflows.

</p>

---

<h4>
n
 Requirements:</h4>

- Valid `.m` content string

- Drive folder ID for export

- Unique, clean filename

---

<h4>
n
 Code to Save .m File to Drive</h4>

<pre><code>

function saveMATLABScriptToDrive(fileName, content, folderId) {

  const folder = DriveApp.getFolderById(folderId);

  const existing = folder.getFilesByName(fileName);

  if (existing.hasNext()) {

    existing.next().setTrashed(true); // remove old version

  }

  const file = folder.createFile(fileName, content, MimeType.PLAIN_TEXT);

  Logger.log("
n
 Exported to: " + file.getUrl());

  return file.getUrl();

}

</code></pre>

---

<h4>
n
 Notes:</h4>

| Field | Rule |

|-------|------|

| `fileName` | Must end in `.m` |

| `content` | Valid MATLAB function string |

| `folderId` | Pulled from config tab, cell, or UI input |

---

<h4>
n
 Recommended Export Flow:</h4>

<pre><code>

const fileName = "damped_model.m";

const folderId = "YOUR_FOLDER_ID_HERE";

const content = generateFullMATLABScript(); // built in previous steps

const fileUrl = saveMATLABScriptToDrive(fileName, content, folderId);

</code></pre>

You can display this URL in the sidebar or offer a direct download link.

---

<h4>
n
 Organizing Drive Output:</h4>

| Folder Name | Contents |

|-------------|----------|

| `matlab_export/` | Individual `.m` files |

| `matlab_batches/` | Batch exports (see Section 10.5) |

| `archive/` | Older versions, backup |

---

<h4>
n
 Preview -- Exported File in Drive:</h4>

- Appears immediately

- Opens as plain text in Google Drive

- Compatible with MATLAB Desktop/Online

---

<!-- Glossary Terms Referenced:

- DriveApp

- File Export

- MATLAB Script

- Folder ID

- MIME Type

-->

# END SECTION 10.3.3.1

# START SECTION 10.3.3.2

<!-- ============================================================ -->

<!-- SECTION 10.3.3.2 -- Offer Download as Blob -->

<!-- ============================================================ -->

<h3 id="section10_3_3_2">Section 10.3.3.2 -- Offer Download as Blob</h3>

<p>

In addition to saving a MATLAB script to Google Drive, you can offer the user a direct download via a blob 


object encoded as a data URL. This is useful when you want to skip Drive entirely or enable instant export for

 manual editing.

</p>

---

<h4>
n
 Use Case:</h4>

- User wants to copy or save a `.m` script immediately after generating it

- No need to open Drive

- Good for single-use or editable models

---

<h4>
n
 HTML Download Link Generator</h4>

Use this function to create a safe `.m` file download:

<pre><code>

function createDownloadLink(fileName, content) {

  const encoded = Utilities.base64Encode(content);

  const mime = "text/plain";

  const href = `data:${mime};base64,${encoded}`;

  return `

    &lt;a download="${fileName}" href="${href}" target="_blank"&gt;

      
nn
 Click here to download: ${fileName}

    &lt;/a&gt;

  `;

}

</code></pre>

You can inject this into the sidebar, modal, or preview dialog.

---

<h4>
n
 Integration Example (Apps Script + HTML)</h4>

Apps Script:

<pre><code>

const content = generateFullMATLABScript();

const fileName = "trial_export.m";

const html = HtmlService.createHtmlOutput(createDownloadLink(fileName, content));

SpreadsheetApp.getUi().showModalDialog(html, "Download MATLAB Script");

</code></pre>

This opens a popup allowing direct `.m` file download from the sheet UI.

---

<h4>
nn
 Notes on Browser Support:</h4>

| Browser | Works With |

|---------|------------|

| Chrome, Edge, Firefox | 
n
 Yes |

| Safari | 
n
 Yes, with some formatting caveats |

| Internet Explorer | 
n
 Not recommended |

---

<h4>
n
 Final Output:</h4>

A clickable HTML link:

<pre><code>

&lt;a download="model1.m" href="data:text/plain;base64,QSA9ID..."&gt;

Click to Download

&lt;/a&gt;

</code></pre>

This works even without internet if generated locally.

---

<!-- Glossary Terms Referenced:

- Blob

- Base64 Encoding

- MIME Type

- Modal Dialog

- Script Download

-->

# END SECTION 10.3.3.2

# START SECTION 10.3.4.1

<!-- ============================================================ -->

<!-- SECTION 10.3.4.1 -- Complete .m Example Function -->

<!-- ============================================================ -->

<h3 id="section10_3_4_1">Section 10.3.4.1 -- Complete <code>.m</code> Example Function</h3>

<p>

This section provides a complete, auto-generated MATLAB function as it would appear when exported from the 

Physics Data Collection system. This example uses a damped cosine regression model with multiple parameters, 

formatted and commented to MATLAB best practices.

</p>

---

<h4>
n
 Use Case:</h4>

You(TM)ve fit the following regression model in Sheets:

<pre><code>y = A * exp(-b*t) * cos(w*t + phi)</code></pre>

You now want to export a ready-to-run `.m` function.


---

<h4>
n
 Final Exported MATLAB Function:</h4>

<pre><code>

function y = damped_model(t, A, b, w, phi)

% DAMPED_MODEL: Auto-generated regression function

%

%   y = A * exp(-b*t) * cos(w*t + phi)

%

%   Parameters:

%     t    - Time (independent variable)

%     A    - Amplitude of oscillation

%     b    - Damping coefficient

%     w    - Angular frequency (rad/s)

%     phi  - Phase shift (radians)

%

%   Returns:

%     y    - Modeled output value at each time point t

% Compute the model

y = A * exp(-b*t) .* cos(w*t + phi);

</code></pre>

---

<h4>
n
 Notes:</h4>

| Feature | Detail |

|---------|--------|

| `.*` | Ensures element-wise computation for arrays |

| `%` | All comments are prefixed for MATLAB doc visibility |

| Variables | Use simple ASCII-friendly names |

| Consistency | Matches order of parameters in regression panel |

---

<h4>
n
 Saved Output Filename:</h4>

<pre><code>damped_model.m</code></pre>

This will appear in your chosen Drive folder or as a direct download link (see Section 10.3.3).

---

<h4>
nn
 Editable by User:</h4>

The generated script can be:

- Modified in MATLAB Editor

- Extended to include plots or error checking

- Used as a function call from larger analysis workflows

---

<!-- Glossary Terms Referenced:

- .m file

- MATLAB Function

- Export Format

- Parameterized Model

- Damped Oscillation

-->

# END SECTION 10.3.4.1

# START SECTION 10.3.4.2

<!-- ============================================================ -->

<!-- SECTION 10.3.4.2 -- Example with Plot and Use Case -->

<!-- ============================================================ -->

<h3 id="section10_3_4_2">Section 10.3.4.2 -- Example with Plot and Use Case</h3>

<p>

Now that the `.m` file has been generated and exported, this section demonstrates how to use the function in a

 MATLAB workflow. It includes importing data, plotting the regression output, and comparing model predictions 

to experimental results.

</p>

---

<h4>
n
 Goal:</h4>

- Load the exported function into MATLAB

- Use known parameter values to generate predictions

- Plot model curve and overlay experimental data

---

<h4>
n
 Step 1: Load Data (e.g., from CSV)</h4>

Assume your experimental data is in a file called `Trial_01.csv`:

<pre><code>

data = readmatrix('Trial_01.csv');

t = data(:, 1);      % Time column

y_exp = data(:, 2);  % Observed measurements

</code></pre>

---

<h4>
n
 Step 2: Load Function and Predict</h4>

Assume you previously saved `damped_model.m` to the current folder.

Call the model with parameter values:

<pre><code>


% Parameters from regression

A = 1.2;

b = 0.05;

w = 2.1;

phi = 0.3;

% Run model

y_model = damped_model(t, A, b, w, phi);

</code></pre>

---

<h4>
n
 Step 3: Plot Model and Data</h4>

<pre><code>

plot(t, y_exp, 'ko', 'DisplayName', 'Experimental');

hold on;

plot(t, y_model, 'r-', 'DisplayName', 'Model Fit');

xlabel('Time (s)');

ylabel('Displacement (cm)');

title('Damped Oscillation Model Fit');

legend;

grid on;

</code></pre>

This will generate a clean overlay of the predicted model and actual data.

---

<h4>
n
 Optional: Annotate Fit Parameters</h4>

<pre><code>

str = sprintf('A=%.2f, b=%.3f, w=%.2f, \\phi=%.2f', A, b, w, phi);

text(t(end)*0.6, max(y_model)*0.9, str);

</code></pre>

This displays the fit on the chart for visual reference.

---

<h4>
n
 Output Preview:</h4>

Expected plot:

- Black circles for experimental values

- Red curve for model prediction

- Title and axis labels formatted automatically

---

<h4>
n
 Use Case Summary:</h4>

| Step | Action |

|------|--------|

| 1 | Load data using <code>readmatrix</code> |

| 2 | Call exported function with parameters |

| 3 | Plot experimental vs. model data |

| 4 | Export figure if needed using <code>saveas()</code> |

---

<!-- Glossary Terms Referenced:

- MATLAB Plot

- readmatrix()

- Function Call

- Experimental Data

- Overlay Plot

- Regression Fit

-->

# END SECTION 10.3.4.2

# START SECTION 10.3.4.3

<!-- ============================================================ -->

<!-- SECTION 10.3.4.3 -- Glossary Links and Final Marker -->

<!-- ============================================================ -->

<h3 id="section10_3_4_3">Section 10.3.4.3 -- Glossary Links and Final Marker</h3>

<p>

This final part of Section 10.3 adds backward-compatible glossary links, ensures all referenced concepts are 

connected to the glossary (Section 11), and closes the MATLAB Export section cleanly.

</p>

---

<h4>
n
 Glossary Terms Referenced in Section 10.3:</h4>

<ul>

  <li><a href="#section11_latex">LaTeX</a></li>

  <li><a href="#section11_symbolic">Symbolic Conversion</a></li>

  <li><a href="#section11_regression">Regression Output</a></li>

  <li><a href="#section11_driveapp">DriveApp</a></li>

  <li><a href="#section11_matlab_script">MATLAB Script</a></li>

  <li><a href="#section11_parameter">Parameter</a></li>

  <li><a href="#section11_export_format">Export Format</a></li>

  <li><a href="#section11_plot">Plot (MATLAB)</a></li>

  <li><a href="#section11_readmatrix">readmatrix()</a></li>

  <li><a href="#section11_blob">Blob Download</a></li>

</ul>

---


<h4>
n
 Return to Table of Contents:</h4>

<p>

<a href="#section1">Return to Top</a> | <a href="#section10">Back to Section 10</a> | <a href="#section11">Go 

to Glossary</a>

</p>

---

<!-- This marks the official end of MATLAB Export section -->

# END SECTION 10 -- PART 3

# START SECTION 10.4.1.1

<!-- ============================================================ -->

<!-- SECTION 10.4.1.1 -- Batch Export Interface Overview -->

<!-- ============================================================ -->

<h3 id="section10_4_1_1">Section 10.4.1.1 -- Batch Export Interface Overview</h3>

<p>

Batch exporting is designed to simplify the process of generating multiple MATLAB `.m` scripts from several 

data sources or regression entries within a single sheet. This interface provides a menu-driven method for 

users to initiate a large export run without manually invoking each function one at a time.

</p>

---

<h4>
n
 Entry Point -- Custom Menu</h4>

Add this to your `onOpen()` handler to surface the option:

<pre><code>

function onOpen() {

  const ui = SpreadsheetApp.getUi();

  ui.createMenu("Regression Tools")

    .addItem("Run Batch Export", "showBatchExportDialog")

    .addToUi();

}

</code></pre>

This allows users to trigger a full batch from the spreadsheet menu.

---

<h4>
n
 Batch Export Dialog</h4>

The UI shows options like:

- 
n
 Select folder for `.m` file output

- 
n
 Optional: export CSVs in parallel

- 
nn
 Choose naming convention or prefix

- 
n
 Select sheets to include (checkboxes)

<pre><code>

function showBatchExportDialog() {

  const html = HtmlService.createHtmlOutputFromFile("BatchExportUI")

    .setWidth(500)

    .setHeight(350);

  SpreadsheetApp.getUi().showModalDialog(html, "Batch Export Settings");

}

</code></pre>

You can create the UI in a separate `.html` file with inputs for:

- Folder ID

- Base filename or suffix

- Overwrite behavior

- Log tab selection

---

<h4>
n
 Recommended Columns in Source Sheet:</h4>

| Column | Purpose |

|--------|---------|

| A | Sheet name (source for export) |

| B | Regression function or ID |

| C | Export toggle (`TRUE` / `FALSE`) |

| D | Output file name |

| E | Parameter values |

A batch run will iterate down the list, checking if Column C is `TRUE`.

---

<h4>
n
 Preview of Queued Batch Run:</h4>

Optional preview:

<pre><code>

function previewBatchTargets() {

  const data = SpreadsheetApp.getActiveSpreadsheet()

    .getSheetByName("ExportQueue")

    .getDataRange()

    .getValues();

  const targets = data

    .filter(row => row[2] === true)

    .map(row => ({ sheet: row[0], file: row[3] }));

  Logger.log(targets);

}

</code></pre>


This allows debugging before the full export begins.

---

<h4>
n
 Result of Running Batch Export:</h4>

- Multiple `.m` files created in Drive

- Optional CSV or `.json` included

- Log tab updated with results (see 10.4.6)

- Summary table generated (see 10.4.7)

---

<h4>
n
 Links to Other Sections:</h4>

- Export logic -- see <a href="#section10_4_2_1">10.4.2</a>

- Error handling -- see <a href="#section10_4_6_1">10.4.6</a>

- File validation -- see <a href="#section10_3_2_4">10.3.2.4</a>

---

<!-- Glossary Terms Referenced:

- Batch Export

- Modal Dialog

- Regression Queue

- Spreadsheet Menu

- Export Target Sheet

-->

# END SECTION 10.4.1.1

# START SECTION 10.4.2.1

<!-- ============================================================ -->

<!-- SECTION 10.4.2.1 -- Build Export Loop -->

<!-- ============================================================ -->

<h3 id="section10_4_2_1">Section 10.4.2.1 -- Build Export Loop</h3>

<p>

Once the user initiates a batch export, the script must process each target row from the Export Queue (or 

equivalent config sheet), generating one `.m` file per row. This section details how to iterate through rows, 

validate entries, and trigger script generation.

</p>

---

<h4>
n
 Export Queue Sheet Format (Required Columns)</h4>

| Column | Key | Example |

|--------|-----|---------|

| A | Source Sheet Name | Trial_01 |

| B | Model Function Label | Damped Cosine |

| C | Export? Flag | TRUE |

| D | Output File Name | trial01_model.m |

| E | Parameters | `A=1.2;b=0.05;w=2.1;phi=0.3` |

| F | Notes or Metadata | Optional |

---

<h4>
n
 Sample Batch Loop Function</h4>

<pre><code>

function runBatchExportFromSheet() {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("ExportQueue");

  const data = sheet.getDataRange().getValues();

  const headers = data[0];

  const rows = data.slice(1);

  rows.forEach((row, index) => {

    const exportFlag = row[2];  // Column C

    if (!exportFlag) return;

    const sheetName = row[0];

    const modelLabel = row[1];

    const fileName = row[3];

    const paramString = row[4];

    try {

      const paramMap = parseParams(paramString);

      const content = generateModelCode(sheetName, modelLabel, paramMap);

      saveMATLABScriptToDrive(fileName, content, getExportFolderId());

      Logger.log(`
n
 Exported: ${fileName}`);

      // Update log or summary if needed here

    } catch (err) {

      Logger.log(`
n
 Error in row ${index + 2}: ${err}`);

      // Add row error log (see Section 10.4.6)

    }

  });

}

</code></pre>

---

<h4>
n
 Key Functions to Support the Loop</h4>

- `parseParams(paramString)` -- converts semicolon-separated parameters into a usable object

- `generateModelCode()` -- calls the regression-to-MATLAB generation pipeline (10.3.2)

- `saveMATLABScriptToDrive()` -- handles Drive file creation (10.3.3.1)

- `getExportFolderId()` -- user-provided or config-stored folder

---


<h4>
n
 Log During Loop</h4>

For each entry, capture:

| Column | Logged Value |

|--------|--------------|

| Row | Row number |

| Sheet | Source sheet name |

| Output File | Name/path |

| Status | Success or error message |

This info will populate the log tab and summary table later.

---

<h4>
n
 Benefits of the Loop Design</h4>

- Modular and restartable

- Allows selective row execution via flag

- Supports error tracking, retries, and summary generation

---

<!-- Glossary Terms Referenced:

- Batch Loop

- Export Queue

- Parameter Map

- Script Generator

- Logging

-->

# END SECTION 10.4.2.1

# START SECTION 10.4.2.2

<!-- ============================================================ -->

<!-- SECTION 10.4.2.2 -- Match Sheet to Parameters -->

<!-- ============================================================ -->

<h3 id="section10_4_2_2">Section 10.4.2.2 -- Match Sheet to Parameters</h3>

<p>

To generate correct `.m` files, you must ensure that each batch export row pulls parameters and formulae that 

correspond to a real dataset or defined regression model in the source sheet. This section outlines how to 

dynamically match sheets and extract needed values.

</p>

---

<h4>
n
 Matching Process Overview:</h4>

1. Use the value from the "Sheet Name" column to open the correct tab

2. Extract regression metadata or raw parameters

3. Apply these to the `.m` generation step

4. Validate required columns exist and aren't empty

---

<h4>
n
 Step 1: Open the Source Sheet</h4>

<pre><code>

const sheetName = row[0];

const targetSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);

if (!targetSheet) throw `Sheet "${sheetName}" not found.`;

</code></pre>

---

<h4>
n
 Step 2: Parse Parameter String</h4>

<pre><code>

function parseParams(paramString) {

  return paramString.split(";").reduce((acc, pair) => {

    const [key, val] = pair.split("=");

    if (key && val) acc[key.trim()] = parseFloat(val);

    return acc;

  }, {});

}

</code></pre>

Output:

<pre><code>

{ A: 1.2, b: 0.05, w: 2.1, phi: 0.3 }

</code></pre>

---

<h4>
n
 Step 3: Read Model Info (Optional)</h4>

If your regression sheet includes formulas like:

| Cell | Value |

|------|-------|

| A1 | `=FORMULA("y = A * exp(-b*t) * cos(w*t + phi)")` |

| A2 | `A=1.2; b=0.05; w=2.1; phi=0.3` |

You can fetch these dynamically:

<pre><code>

const formula = targetSheet.getRange("A1").getValue();

const paramMap = parseParams(targetSheet.getRange("A2").getValue());

</code></pre>

Then pass them into the model generator:

<pre><code>


generateModelCode(sheetName, formula, paramMap);

</code></pre>

---

<h4>
n
 Alternate: Pull from Named Ranges</h4>

If each sheet has named ranges (`param_A`, `param_b`, etc.):

<pre><code>

const A = ss.getRangeByName("param_A").getValue();

const b = ss.getRangeByName("param_b").getValue();

</code></pre>

Store all in a dictionary to feed into the generator.

---

<h4>
n
 Validate Before Export</h4>

Always check:

- 
n
 All required parameters are present

- 
n
 None are `NaN` or `undefined`

- 
n
 File name and formula fields are not blank

<pre><code>

if (!fileName.endsWith(".m")) fileName += ".m";

if (!paramMap["A"]) throw "Missing parameter A";

</code></pre>

---

<h4>
n
 Final Output to Export Engine</h4>

Each matched row provides:

| Value | Description |

|-------|-------------|

| `sheetName` | Source tab |

| `formula` | String (optional) |

| `paramMap` | Object of parameters |

| `fileName` | Valid `.m` filename |

Send to:

<pre><code>generateModelCode(sheetName, formula, paramMap);</code></pre>

---

<!-- Glossary Terms Referenced:

- Parameter Extraction

- Regression Formula

- Named Range

- Source Sheet

- Validation

-->

# END SECTION 10.4.2.2

# START SECTION 10.4.3.1

<!-- ============================================================ -->

<!-- SECTION 10.4.3.1 -- Multi-File Export Logic -->

<!-- ============================================================ -->

<h3 id="section10_4_3_1">Section 10.4.3.1 -- Multi-File Export Logic</h3>

<p>

In many experiments, you may want to export both the regression script and the raw data file (typically a 

`.csv`) for use in MATLAB or Python. This section explains how to attach additional files like source data to 

each `.m` script export.

</p>

---

<h4>
n
 Typical Export Files Per Row:</h4>

| File Type | Example |

|-----------|---------|

| MATLAB Script | <code>damped_model.m</code> |

| CSV File | <code>Trial_01.csv</code> |

| Optional JSON | <code>Trial_01_meta.json</code> |

---

<h4>
n
 Step 1: Locate the CSV Source</h4>

If data was imported into the sheet from a CSV, link the original Drive file ID to a hidden column or config 

sheet.

<pre><code>

const csvFileId = row[6]; // Assuming Column G has Drive File ID

const csvFile = DriveApp.getFileById(csvFileId);

</code></pre>

If instead exporting from a current sheet:

<pre><code>

function exportSheetAsCSV(sheetName, fileName, folderId) {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);

  const csv = convertSheetToCSV(sheet);

  return DriveApp.getFolderById(folderId).createFile(fileName, csv, MimeType.CSV);

}

</code></pre>

---

<h4>
n
 Step 2: Generate and Save the `.m` File</h4>


Using the previously described logic:

<pre><code>

const modelScript = generateModelCode(sheetName, formula, paramMap);

DriveApp.getFolderById(folderId).createFile(fileName, modelScript, MimeType.PLAIN_TEXT);

</code></pre>

---

<h4>
n
 Step 3: Pair Both Files into One Export Folder</h4>

Your export folder might now contain:

- `Trial_01_model.m`

- `Trial_01_data.csv`

If `zipExportEnabled` is true, you may choose to zip these.

---

<h4>
n
 Optional UI Controls</h4>

Your Batch Export dialog can include toggles like:

- 
n
 "Include CSV with each `.m` file"

- 
n
 "Create folder per export"

- 
nn
 "Zip output folder"

Read these settings and pass into the export handler as flags.

---

<h4>
n
 Tips for Clean File Management</h4>

| Strategy | Advantage |

|----------|-----------|

| Use consistent filename stems | Easy identification in Drive |

| Group by timestamp or batch ID | Avoid clutter from repeat exports |

| Add folder prefix in config tab | Dynamic export organization |

---

<h4>
n
 Optional: Log All File Links</h4>

Store both links in a log row:

| Field | Example |

|-------|---------|

| Model File | `https://drive.google.com/file/d/...` |

| Data File | `https://drive.google.com/file/d/...` |

This is used in Sections 10.4.6 and 10.4.9.

---

<!-- Glossary Terms Referenced:

- CSV Export

- MIME Type

- DriveApp

- File Pairing

- Export Bundle

-->

# END SECTION 10.4.3.1

# START SECTION 10.4.3.2

<!-- ============================================================ -->

<!-- SECTION 10.4.3.2 -- Folder/ZIP Bundling -->

<!-- ============================================================ -->

<h3 id="section10_4_3_2">Section 10.4.3.2 -- Folder/ZIP Bundling</h3>

<p>

To better manage exported files, especially when dealing with large batches or multiple file types per 

regression (e.g., `.m`, `.csv`, `.json`), it is often helpful to group exports into individual folders or zip 

archives. This section covers both bundling strategies.

</p>

---

<h4>
n
 Option 1: Export to Individual Folders</h4>

For each model, create a subfolder and place all associated files inside it.

<pre><code>

function createExportSubfolder(baseFolderId, modelLabel) {

  const parent = DriveApp.getFolderById(baseFolderId);

  const name = `export_${modelLabel.replace(/\s+/g, "_")}`;

  return parent.createFolder(name);

}

</code></pre>

Then place both `.m` and `.csv` inside:

<pre><code>

const subfolder = createExportSubfolder(folderId, fileName);

subfolder.createFile(mFileName, modelCode, MimeType.PLAIN_TEXT);

subfolder.createFile(csvFileName, csvData, MimeType.CSV);

</code></pre>

---

<h4>
nn
 Option 2: Create a ZIP Archive</h4>

Google Apps Script does not support native zipping of files directly in Drive. However, you can use Google 

Apps Script Advanced Drive Service to zip file blobs (requires setup):

<pre><code>

function createZipBlob(fileBlobs, zipName) {


  const zipBlob = Utilities.zip(fileBlobs, zipName);

  return DriveApp.createFile(zipBlob);

}

</code></pre>

Example usage:

<pre><code>

const mFile = Utilities.newBlob(modelCode, MimeType.PLAIN_TEXT, "model.m");

const csvFile = Utilities.newBlob(csvContent, MimeType.CSV, "data.csv");

const zipBlob = Utilities.zip([mFile, csvFile], "Trial_01.zip");

DriveApp.getFolderById(folderId).createFile(zipBlob);

</code></pre>

---

<h4>
nn
 User Options for Bundling</h4>

In your batch export dialog UI, include:

- 
n
 Create separate subfolder per export

- 
n
 Compress to `.zip`

- 
n
 Include CSV, `.m`, and `.json` (toggle components)

Pass these as flags into your `runBatchExport()` handler.

---

<h4>
n
 Recommended Folder Structure</h4>

If not using ZIPs:

<pre><code>

/ExportRoot

  /export_Trial01

    Trial_01_model.m

    Trial_01_data.csv

  /export_Trial02

    Trial_02_model.m

    Trial_02_data.csv

</code></pre>

With ZIPs:

<pre><code>

/ExportRoot

  Trial_01.zip

  Trial_02.zip

</code></pre>

---

<h4>
n
 Batch Logs Should Track Folder or ZIP Output</h4>

Store either:

| Field | Example |

|-------|---------|

| Subfolder URL | `https://drive.google.com/drive/folders/...` |

| Zip File URL | `https://drive.google.com/file/d/...` |

---

<!-- Glossary Terms Referenced:

- Export Bundle

- ZIP Archive

- Subfolder

- Utilities.zip

- File Blob

-->

# END SECTION 10.4.3.2

# START SECTION 10.4.4.1

<!-- ============================================================ -->

<!-- SECTION 10.4.4.1 -- Drive Routing by Pattern -->

<!-- ============================================================ -->

<h3 id="section10_4_4_1">Section 10.4.4.1 -- Drive Routing by Pattern</h3>

<p>

To keep your Drive workspace organized, it(TM)s often helpful to route export files into subfolders based on 

model type, experiment label, or metadata. This section covers how to dynamically determine export folders 

using pattern-matching rules.

</p>

---

<h4>
n
 Use Case:</h4>

You want:

- All fidampedfl models to go into `/Damped_Models/`

- All fiundampedfl models to go into `/Undamped_Models/`

- Others to default to `/General_Exports/`

---

<h4>
n
 Strategy: Create a Folder Map Object</h4>

<pre><code>

const exportFolderMap = {

  "damped": "FOLDER_ID_DAMPED",

  "undamped": "FOLDER_ID_UNDAMPED",

  "default": "FOLDER_ID_GENERAL"


};

</code></pre>

You(TM)ll then route exports like:

<pre><code>

function getDestinationFolderId(modelLabel) {

  modelLabel = modelLabel.toLowerCase();

  if (modelLabel.includes("damped")) return exportFolderMap.damped;

  if (modelLabel.includes("undamped")) return exportFolderMap.undamped;

  return exportFolderMap.default;

}

</code></pre>

---

<h4>
n
 Integration in Export Loop</h4>

<pre><code>

const folderId = getDestinationFolderId(modelLabel);

saveMATLABScriptToDrive(fileName, modelContent, folderId);

</code></pre>

Repeat this routing logic for `.csv`, `.json`, `.zip`, etc.

---

<h4>
n
 Optional: Use a Folder Config Sheet</h4>

Instead of hardcoding `exportFolderMap`, load it from a sheet:

| Label     | Folder ID              |

|-----------|------------------------|

| damped    | 1abc123...xyz          |

| undamped  | 1def456...uvw          |

| default   | 1ghi789...rst          |

Read into an object:

<pre><code>

function loadFolderMapFromSheet() {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("FolderConfig");

  const data = sheet.getRange("A2:B").getValues();

  return data.reduce((map, [label, id]) => {

    if (label && id) map[label.toLowerCase()] = id;

    return map;

  }, {});

}

</code></pre>

---

<h4>
n
 Final Folder Layout Example</h4>

<pre><code>

/PhysicsModelExports

  /Damped_Models

    damped_trial01.m

  /Undamped_Models

    undamped_trial02.m

  /General_Exports

    mixed_trial03.m

</code></pre>

Each file is routed cleanly based on its model tag or name match.

---

<h4>
n
 Validation Before Writing</h4>

Always check that the folder ID is valid:

<pre><code>

try {

  const folder = DriveApp.getFolderById(folderId);

} catch (e) {

  throw `Folder ID "${folderId}" is invalid or inaccessible`;

}

</code></pre>

---

<!-- Glossary Terms Referenced:

- Folder Routing

- Pattern Matching

- Export Folder Map

- Dynamic Folder Output

- FolderConfig Sheet

-->

# END SECTION 10.4.4.1

# START SECTION 10.4.5.1

<!-- ============================================================ -->

<!-- SECTION 10.4.5.1 -- MATLAB Plot Export -->

<!-- ============================================================ -->

<h3 id="section10_4_5_1">Section 10.4.5.1 -- MATLAB Plot Export</h3>

<p>

For each generated regression model, it can be useful to include a corresponding MATLAB-compatible plot 

snippet. This allows users to visually verify fit quality after import. This section shows how to export a 


complete model function with built-in plotting.

</p>

---

<h4>
n
 Goal:</h4>

- Embed a plot example within each exported `.m` file

- Pre-define plotting code based on input data range

- Use the same regression parameters as fit

---

<h4>
n
 Output Example:</h4>

<pre><code>

function y = model1(t, A, b, w, phi)

% MODEL1: Auto-exported with plot

% y = A * exp(-b*t) * cos(w*t + phi)

y = A * exp(-b*t) .* cos(w*t + phi);

% Plot if no output requested

if nargout == 0

    t = linspace(0, 10, 500);

    y = A * exp(-b*t) .* cos(w*t + phi);

    plot(t, y, 'r-', 'LineWidth', 2);

    xlabel('Time (s)');

    ylabel('Displacement');

    title('Damped Model Preview');

end

</code></pre>

This script behaves as a function when called, or a plotter if run directly.

---

<h4>
n
 Logic to Insert Plot Snippet</h4>

In `generateModelCode()`, detect if plotting is enabled:

<pre><code>

if (includePlot) {

  lines.push('');

  lines.push('% Plot block (auto-generated)');

  lines.push('if nargout == 0');

  lines.push('    t = linspace(0, 10, 500);');

  lines.push(`    y = ${expression};`);

  lines.push('    plot(t, y, ''r-'', ''LineWidth'', 2);');

  lines.push('    xlabel(''Time (s)'');');

  lines.push('    ylabel(''Displacement'');');

  lines.push('    title(''Auto-Generated Plot'');');

  lines.push('end');

}

</code></pre>

---

<h4>
n
 Optional: Export as Separate Plot Script</h4>

Instead of appending inside the `.m` file, you can also generate:

<pre><code>

plot_model1.m

</code></pre>

Containing:

<pre><code>

t = linspace(0, 10, 500);

y = model1(t, 1.2, 0.05, 2.1, 0.3);

plot(t, y, 'b-', 'LineWidth', 1.5);

</code></pre>

This method separates function logic and visualization.

---

<h4>
n
 Folder Structure If Plot Exported Separately:</h4>

<pre><code>

/export_trial01

  model1.m

  model1_plot.m

</code></pre>

The plot script calls the model and displays the preview.

---

<h4>
n
 When to Use Inline vs. Separate:</h4>

| Strategy | Use When |

|----------|----------|

| Inline Plot | User wants 1-click preview in `.m` |

| Separate Script | User wants clean, modular functions |

---

<h4>
n
 Bonus: Add Parameter Comments to Plot</h4>

You can include a `legend()` or `text()` block with parameter values:

<pre><code>

str = sprintf('A=%.2f, b=%.2f, w=%.2f, phi=%.2f', A, b, w, phi);

text(2, A, str);


</code></pre>

This gives visual context to the plot.

---

<!-- Glossary Terms Referenced:

- MATLAB Plot

- Inline Visualization

- Function Preview

- Scripted Chart

- linspace()

-->

# END SECTION 10.4.5.1

# START SECTION 10.4.5.2

<!-- ============================================================ -->

<!-- SECTION 10.4.5.2 -- Sheets Preview Charts -->

<!-- ============================================================ -->

<h3 id="section10_4_5_2">Section 10.4.5.2 -- Sheets Preview Charts</h3>

<p>

While MATLAB plots are ideal for model visualization, you can also embed preview charts directly in Google 

Sheets. This is useful for quick inspection without leaving the spreadsheet. This section explains how to 

auto-generate chart objects in Sheets linked to your regression results.

</p>

---

<h4>
n
 Use Case:</h4>

For each export entry:

- Draw a chart beside the data block

- Plot raw data and optional regression curve

- Label axes automatically

---

<h4>
n
 Step 1: Identify Data Range</h4>

Assume you(TM)re plotting from a source sheet:

| Column | Description |

|--------|-------------|

| A      | Time (ms)   |

| B      | Amplitude   |

| C      | Fitted Data (optional) |

Get the range:

<pre><code>

const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Trial_01");

const range = sheet.getRange("A1:C100");

</code></pre>

---

<h4>
n
 Step 2: Create Chart Object</h4>

Use Apps Script to insert a scatter plot:

<pre><code>

const chart = sheet.newChart()

  .setChartType(Charts.ChartType.SCATTER)

  .addRange(range)

  .setPosition(5, 5, 0, 0)

  .setOption('title', 'Model Fit Preview')

  .setOption('hAxis.title', 'Time (ms)')

  .setOption('vAxis.title', 'Amplitude');

sheet.insertChart(chart);

</code></pre>

---

<h4>
n
 Customize Options</h4>

| Option | Purpose |

|--------|---------|

| `setOption('curveType', 'function')` | Smooth line fit |

| `setOption('pointSize', 3)` | Data visibility |

| `setOption('legend.position', 'top')` | Clarity |

To compare experimental vs. fit:

- Range: `A2:B100` for raw data

- Add `C2:C100` if fit is pre-calculated

---

<h4>
n
 Optional: Auto-Fit Regression to Column C</h4>

If you calculate fitted `y_model` in Column C:

<pre><code>

=ARRAYFORMULA(A2:A100 * EXP(-0.05 * A2:A100) * COS(2.1 * A2:A100 + 0.3))

</code></pre>

Then include it as a second chart series.

---

<h4>
n
 Log Chart Coordinates</h4>

If generating many charts, track their position for cleanup:

<pre><code>


Logger.log(`Inserted chart at R${row},C${col}`);

</code></pre>

Later you can delete charts if needed.

---

<h4>
n
 Final Chart Result:</h4>

A live embedded chart in the sheet that:

- Compares data to model visually

- Uses the actual parameters used for export

- Matches the `.m` and `.csv` file for cross-checking

---

<!-- Glossary Terms Referenced:

- Chart Object

- Scatter Plot

- setOption()

- Google Sheets Chart API

- Spreadsheet Chart Preview

-->

# END SECTION 10.4.5.2

# START SECTION 10.4.6.1

<!-- ============================================================ -->

<!-- SECTION 10.4.6.1 -- Logging Structure -->

<!-- ============================================================ -->

<h3 id="section10_4_6_1">Section 10.4.6.1 -- Logging Structure</h3>

<p>

When performing batch exports, it is critical to log every export attempt -- whether successful or not -- to 

ensure traceability, debugging, and reprocessing. This section defines the logging schema used by the system 

and how to structure the dedicated log tab.

</p>

---

<h4>
n
 Log Sheet Format</h4>

Create a dedicated sheet named `ExportLog` with the following header:

| Column | Field Name | Description |

|--------|------------|-------------|

| A | Timestamp | Time export was attempted |

| B | Sheet Name | Source sheet for model |

| C | File Name | Output `.m` file |

| D | Folder ID | Destination folder |

| E | Status | `
n
 Success` / `
n
 Failed` |

| F | Error Message | If failed, log error |

| G | File Link | Drive link to `.m` |

| H | Data Link | Drive link to `.csv` |

| I | Notes | Optional metadata |

---

<h4>
n
 Sample Row:</h4>

| Timestamp | Sheet | File | Folder | Status | Error | File Link | Data Link | Notes |

|-----------|-------|------|--------|--------|--------|------------|------------|-------|

| `2025-06-10 14:33` | `Trial_03` | `model3.m` | `1AbC...` | 
n
 | | [link] | [link] | Zip: No |

---

<h4>
n
 Function to Write Log Entry</h4>

<pre><code>

function logExportResult(rowData) {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("ExportLog");

  if (!sheet) return;

  const now = new Date();

  const logRow = [

    now.toLocaleString(),   // Timestamp

    rowData.sheetName,

    rowData.fileName,

    rowData.folderId,

    rowData.success ? "
n
 Success" : "
n
 Failed",

    rowData.error || "",

    rowData.fileUrl || "",

    rowData.dataUrl || "",

    rowData.notes || ""

  ];

  sheet.appendRow(logRow);

}

</code></pre>

---

<h4>
n
 What to Log for Success:</h4>

- 
4
n
 Timestamp

- 
4
n
 Clean folder/file IDs

- 
4
n
 Working Drive links

- 
4
n
 Export options used (optional)

What to log for failure:

- 
n
 Type of error


- 
n
 Affected row number or sheet

- 
n
 Stack trace or validation failure if available

---

<h4>
n
 Optional: Color-Coding Rows</h4>

You may apply conditional formatting:

- **Green** background for 
n

- **Red** background for 
n

- **Grey** for retryable errors

Avoid excessive styling to prevent tab lag.

---

<h4>
n
 Links to Other Features:</h4>

- This tab feeds retry tracking (10.4.6.3)

- Used to sync status in the summary table (10.4.7)

- Shared with ZIP metadata if JSON logging enabled (10.4.8)

---

<!-- Glossary Terms Referenced:

- Export Log

- Error Tracking

- Batch Export Status

- File Link Log

- Drive URL

-->

# END SECTION 10.4.6.1

# START SECTION 10.4.6.2

<!-- ============================================================ -->

<!-- SECTION 10.4.6.2 -- Real-Time Error Capture -->

<!-- ============================================================ -->

<h3 id="section10_4_6_2">Section 10.4.6.2 -- Real-Time Error Capture</h3>

<p>

Real-time error capture ensures that any issue occurring during a batch export -- including file write 

failures, parameter mismatches, or invalid folder IDs -- is detected and logged without interrupting the entire

 batch process. This section shows how to safely capture, log, and optionally report each failure.

</p>

---

<h4>
n
 Error Handling in Batch Loops</h4>

Wrap every export unit in a <code>try/catch</code> block to avoid terminating the full loop:

<pre><code>

rows.forEach((row, index) => {

  try {

    const result = runExportForRow(row);

    logExportResult({ ...result, success: true });

  } catch (err) {

    Logger.log(`
n
 Error in row ${index + 2}: ${err}`);

    logExportResult({

      sheetName: row[0],

      fileName: row[3],

      folderId: "N/A",

      success: false,

      error: err.toString(),

      notes: `Row ${index + 2}`

    });

  }

});

</code></pre>

---

<h4>
n
 Common Error Types to Catch</h4>

| Error Type | Example |

|------------|---------|

| Missing sheet | `SheetNotFoundError` |

| Invalid param string | `NaN` in model |

| Drive permission | `DriveAccessDenied` |

| Overwrite conflict | File already exists |

Check each before export:

<pre><code>

if (!row[0]) throw "Sheet name missing";

if (!row[4]) throw "No parameters found";

</code></pre>

---

<h4>
n
 Avoid Duplicate Failures</h4>

Prevent re-logging the same failure by tagging rows or checking log tab:

<pre><code>

function isAlreadyLogged(sheetName, fileName) {

  const logSheet = SpreadsheetApp.getActive().getSheetByName("ExportLog");

  const data = logSheet.getRange("A2:C").getValues();

  return data.some(([_, s, f]) => s === sheetName && f === fileName);

}


</code></pre>

Skip or mark with fiAlready Loggedfl note.

---

<h4>
n
 Optional: Show Toast or UI Report</h4>

You can surface errors visually during batch export:

<pre><code>

SpreadsheetApp.getActiveSpreadsheet().toast("Error in row 5: Missing parameters", "Batch Export");

</code></pre>

Use this sparingly to avoid flooding the interface.

---

<h4>
n
 Optional: Batch Error Email (Advanced)</h4>

After the loop finishes, send a summary email of failures:

<pre><code>

function sendBatchExportErrors(email, errorRows) {

  const body = errorRows.map(e => `${e.fileName} -- ${e.error}`).join('\n');

  MailApp.sendEmail(email, "Export Errors", body);

}

</code></pre>

This is ideal for scheduled runs.

---

<h4>
n
 Final Result</h4>

| Row | Error | Recovery Plan |

|-----|-------|----------------|

| 5 | Missing `b` | Fix formula input |

| 12 | File exists | Enable overwrite or rename |

| 18 | No Drive access | Check folder permissions |

These are logged and retained for review (10.4.6.3 handles retries).

---

<!-- Glossary Terms Referenced:

- try/catch

- Error Logging

- Batch Loop Error Handling

- Toast Notification

- MailApp

-->

# END SECTION 10.4.6.2

# START SECTION 10.4.6.3

<!-- ============================================================ -->

<!-- SECTION 10.4.6.3 -- Retry & Ignore Rules -->

<!-- ============================================================ -->

<h3 id="section10_4_6_3">Section 10.4.6.3 -- Retry & Ignore Rules</h3>

<p>

Not all export errors require immediate fixing -- some are transient (e.g., Drive slowness) and others may be 

safe to ignore (e.g., intentionally skipped rows). This section defines how to retry failed rows selectively 

and how to mark rows that should not trigger further attempts.

</p>

---

<h4>
n
 Retry-Eligible Error Types</h4>

Retry is recommended for:

| Condition | Example |

|----------|---------|

| Drive timeout | Script runs > 6 min |

| ZIP creation fails | Memory limit |

| Folder race condition | Simultaneous write |

Avoid retrying:

| Condition | Example |

|----------|---------|

| Invalid formula | Missing parameters |

| Blank file name | Output column empty |

| Permission denied | Folder not shared |

---

<h4>
n
 Step 1: Track Retry Metadata</h4>

Add extra columns to your `ExportQueue` or `ExportLog`:

| Column | Label | Description |

|--------|-------|-------------|

| J | Retry Count | Number of attempts |

| K | Retry Flag | `RETRY`, `SKIP`, or blank |

| L | Last Error | Message from most recent failure |

This lets you control row-by-row what to attempt again.

---

<h4>
n
 Step 2: Script Logic to Retry Rows</h4>

<pre><code>

function retryFailedExports() {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("ExportQueue");


  const data = sheet.getDataRange().getValues();

  data.forEach((row, index) => {

    if (index === 0) return; // skip headers

    const retryFlag = row[10]; // Column K

    if (retryFlag === "RETRY") {

      try {

        runExportForRow(row);

        sheet.getRange(index + 1, 10).setValue(""); // Clear retry flag

        sheet.getRange(index + 1, 9).setValue((row[9] || 0) + 1); // Increment retry count

      } catch (err) {

        sheet.getRange(index + 1, 11).setValue(err.toString()); // Last Error

      }

    }

  });

}

</code></pre>

---

<h4>
n
 Alternate Strategy: Use a Retry Sheet</h4>

Copy failed rows to a dedicated `RetryQueue` sheet for reruns.

Only rows with `"RETRY"` tag are copied, and on success they(TM)re removed.

---

<h4>
n
 Prevent Infinite Retry Loops</h4>

Add retry limits:

<pre><code>

if (retryCount > 3) {

  setRetryFlag(row, "SKIP");

  logExportResult({ ...row, error: "Too many retries", success: false });

}

</code></pre>

---

<h4>
n
 Optional: Visual Highlighting</h4>

Use conditional formatting on:

- 
n
 3+ retries 
®
 red background

- 
n
 1OE2 retries 
®
 yellow

- 
n
 reset on success

---

<h4>
n
 Final Retry System Benefits</h4>

| Feature | Advantage |

|---------|-----------|

| Manual override | You choose what to rerun |

| Limits | Prevent infinite retries |

| Transparent | Error messages and retry counts logged |

This complements the logging structure in 10.4.6.1 and 10.4.6.2.

---

<!-- Glossary Terms Referenced:

- Retry Logic

- Error Filtering

- Retry Count

- RetryQueue

- Export Failures

-->

# END SECTION 10.4.6.3

# START SECTION 10.4.7.1

<!-- ============================================================ -->

<!-- SECTION 10.4.7.1 -- Sheet Summary Table -->

<!-- ============================================================ -->

<h3 id="section10_4_7_1">Section 10.4.7.1 -- Sheet Summary Table</h3>

<p>

The Summary Table provides a high-level, human-readable overview of all batch export results -- ideal for 

reviewing model status, verifying links, and quickly jumping to specific exports. This sheet complements the 

Export Log and Retry logic.

</p>

---

<h4>
n
 Recommended Columns</h4>

Create a tab named <code>BatchSummary</code> with these columns:

| Col | Label | Example |

|-----|-------|---------|

| A | Sheet Name | Trial_01 |

| B | Model | Damped Cosine |

| C | Output File | model_trial01.m |

| D | Link to `.m` | Hyperlink |

| E | Link to `.csv` | Hyperlink |

| F | Status | 
n
 / 
n
 |

| G | Timestamp | 2025-06-10 14:42 |

| H | Retry Count | 0 |

| I | Folder | Folder name or ID |


---

<h4>
n
 Generation Script</h4>

<pre><code>

function updateSummaryTable(batchResults) {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("BatchSummary");

  if (!sheet) return;

  sheet.clearContents();

  sheet.appendRow(["Sheet", "Model", "File", "Link (.m)", "Link (.csv)", "Status", "Time", "Retries", 

"Folder"]);

  batchResults.forEach(result => {

    sheet.appendRow([

      result.sheetName,

      result.model,

      result.fileName,

      result.fileUrl ? `=HYPERLINK("${result.fileUrl}", "View .m")` : "",

      result.dataUrl ? `=HYPERLINK("${result.dataUrl}", "View CSV")` : "",

      result.success ? "
n
" : "
n
",

      Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "yyyy-MM-dd HH:mm"),

      result.retryCount || 0,

      result.folderLabel || "General"

    ]);

  });

}

</code></pre>

---

<h4>
n
 Benefits vs. ExportLog</h4>

| Feature | ExportLog | BatchSummary |

|---------|-----------|--------------|

| Row-by-row logging | 
n
 | 
n
 |

| Overview for user | 
n
 | 
n
 |

| Links and success view | 
n
 | 
n
 |

| Retry metadata | 
n
 | Optional |

| Charts or formatting | 
n
 | 
n

---

<h4>
n
 Optional Enhancements</h4>

- 
n
 Conditional formatting: green for 
n
, red for 
n

- 
n
 Group rows by folder using pivot table

- 
n
 Add count of success/fail to top of sheet

---

<h4>
n
 Link Summary Table in Help Menu</h4>

You can link this sheet in a fiBatch Resultsfl menu item or HelpDialog footer for easy access:

<pre><code>

ui.createMenu("Tools").addItem("View Batch Summary", "goToSummarySheet");

</code></pre>

Function:

<pre><code>

function goToSummarySheet() {

  SpreadsheetApp.setActiveSheet(

    SpreadsheetApp.getActiveSpreadsheet().getSheetByName("BatchSummary")

  );

}

</code></pre>

---

<!-- Glossary Terms Referenced:

- Summary Table

- Batch Overview

- File Link Hyperlink

- HYPERLINK()

- Folder Label

-->

# END SECTION 10.4.7.1

# START SECTION 10.4.8.1

<!-- ============================================================ -->

<!-- SECTION 10.4.8.1 -- JSON Generator Logic -->

<!-- ============================================================ -->

<h3 id="section10_4_8_1">Section 10.4.8.1 -- JSON Generator Logic</h3>

<p>

For advanced integration and metadata tracking, each export can include a <code>.json</code> file describing 

the model, parameters, source, and settings. This can be used in pipelines that require structured metadata. 

This section explains how to generate the JSON blob programmatically.

</p>

---

<h4>
n
 Example Output File: <code>Trial_01_meta.json</code></h4>

<pre><code>{

  "sheet": "Trial_01",

  "model": "Damped Cosine",


  "file": "Trial_01_model.m",

  "parameters": {

    "A": 1.2,

    "b": 0.05,

    "w": 2.1,

    "phi": 0.3

  },

  "fitFunction": "A * exp(-b * t) * cos(w * t + phi)",

  "generatedBy": "Physics Data Script v5.1",

  "timestamp": "2025-06-10T14:48:00+10:00"

}

</code></pre>

---

<h4>
n
 JavaScript Object Construction</h4>

In your Apps Script code:

<pre><code>

function generateMetadataJSON(sheetName, modelLabel, fileName, paramMap, formula) {

  return JSON.stringify({

    sheet: sheetName,

    model: modelLabel,

    file: fileName,

    parameters: paramMap,

    fitFunction: formula,

    generatedBy: "Physics Data Script v5.1",

    timestamp: new Date().toISOString()

  }, null, 2);

}

</code></pre>

Note the <code>null, 2</code> argument adds indentation for readability.

---

<h4>
n
 Drive Upload Function</h4>

<pre><code>

function uploadJSONToDrive(jsonString, fileName, folderId) {

  const blob = Utilities.newBlob(jsonString, MimeType.JSON, fileName);

  return DriveApp.getFolderById(folderId).createFile(blob);

}

</code></pre>

Use:

<pre><code>

const json = generateMetadataJSON(...);

uploadJSONToDrive(json, "Trial_01_meta.json", folderId);

</code></pre>

---

<h4>
n
 Validate Output</h4>

After file is written, you may optionally:

- Log the download URL

- Parse and check contents

- Store link in ExportLog or Summary Table

---

<h4>
n
 Use Cases for JSON Files</h4>

| Use | Benefit |

|-----|---------|

| Offline audit | Human-readable metadata |

| Pipeline input | Compatible with Python, MATLAB, etc. |

| System traceability | Logs time, origin, structure |

---

<h4>
n
 JSON File Contents -- Minimum Required Fields:</h4>

| Key | Value |

|-----|-------|

| `sheet` | Source tab |

| `file` | Exported `.m` file |

| `parameters` | Dictionary of parameters |

| `timestamp` | ISO date string |

Additional optional fields:

- `notes`, `user`, `fitQuality`, etc.

---

<!-- Glossary Terms Referenced:

- Metadata

- JSON File

- JSON.stringify

- Blob Upload

- MIMEType.JSON

-->

# END SECTION 10.4.8.1

# START SECTION 10.4.8.2

<!-- ============================================================ -->


<!-- SECTION 10.4.8.2 -- Field-by-Field Breakdown -->

<!-- ============================================================ -->

<h3 id="section10_4_8_2">Section 10.4.8.2 -- Field-by-Field Breakdown</h3>

<p>

To maximize interoperability, the metadata JSON should follow a consistent schema. This section provides a 

field-by-field breakdown of the JSON structure and how each part maps to other sections of the HelpDialog 

system and external scripts.

</p>

---

<h4>
n
 Standard JSON Fields</h4>

| Field | Required | Description |

|-------|----------|-------------|

| `sheet` | 
n
 | Sheet name or tab label |

| `model` | 
n
 | Model type or function name |

| `file` | 
n
 | Name of exported `.m` file |

| `parameters` | 
n
 | Dictionary of regression parameters |

| `fitFunction` | 
n
 | Expression string (for human readability) |

| `timestamp` | 
n
 | ISO string of export time |

| `generatedBy` | 
n
 | System version or script ID |

| `notes` | 
n
 | Optional metadata |

| `user` | 
n
 | Name or ID of script runner |

| `qualityScore` | 
n
 | Fit metric, if available |

---

<h4>
n
 Example -- Expanded JSON</h4>

<pre><code>{

  "sheet": "Trial_04",

  "model": "Underdamped Oscillation",

  "file": "Trial_04_model.m",

  "parameters": {

    "A": 0.9,

    "b": 0.12,

    "w": 3.5,

    "phi": 0.25

  },

  "fitFunction": "A * exp(-b*t) * cos(w*t + phi)",

  "timestamp": "2025-06-10T15:12:00+10:00",

  "generatedBy": "Physics Data Script v5.1",

  "user": "student@example.edu",

  "notes": "Clean run, zero baseline offset",

  "qualityScore": 0.984

}

</code></pre>

---

<h4>
n
 Tips for Field Construction</h4>

| Field | Best Practice |

|-------|---------------|

| `fitFunction` | Use LaTeX or ASCII safe version |

| `parameters` | Round to 3OE4 decimals |

| `timestamp` | Use `new Date().toISOString()` |

| `notes` | Pull from column or config tab if available |

| `user` | Use email of session, or override config |

---

<h4>
n
 Export Behavior and File Naming</h4>

Name format:

<code>[ExportLabel]_meta.json</code>

e.g., `Trial_03_meta.json`

Place alongside `.m` file and `.csv` in the export folder or ZIP archive.

---

<h4>
n
 Folder Structure with JSON</h4>

<pre><code>

/exports

  /Trial_03

    Trial_03_model.m

    Trial_03_data.csv

    Trial_03_meta.json

</code></pre>

---

<h4>
n
 Used in Other Sections:</h4>

- Section 10.3.3 (Drive structure)

- Section 10.4.3 (multi-file export)

- Section 10.4.9 (JSON-to-sheet sync)

- Section 10.4.10 (metadata stamping into `.m`)

---

<h4>
n
 Optional Field Validation</h4>

Before writing, validate all required fields are present:

<pre><code>

function validateJSONPayload(obj) {


  const required = ["sheet", "model", "file", "parameters", "fitFunction", "timestamp"];

  required.forEach(field => {

    if (!obj[field]) throw `Missing JSON field: ${field}`;

  });

}

</code></pre>

---

<!-- Glossary Terms Referenced:

- Metadata Schema

- JSON Export Fields

- Timestamp

- Parameters Dictionary

- ISO String

-->

# END SECTION 10.4.8.2

# START SECTION 10.4.9.1

<!-- ============================================================ -->

<!-- SECTION 10.4.9.1 -- Link Back File to Cell -->

<!-- ============================================================ -->

<h3 id="section10_4_9_1">Section 10.4.9.1 -- Link Back File to Cell</h3>

<p>

After a file has been exported, it(TM)s helpful to automatically populate a column in the original configuration 

sheet (e.g., ExportQueue) with a clickable Drive link to the exported `.m`, `.csv`, or `.json` file. This 

provides traceability and user feedback in real time.

</p>

---

<h4>
n
 Use Case:</h4>

User exports 30 models. Once each export completes:

- Column G is filled with link to `.m` file

- Column H is filled with `.csv` or `.json` link

- Status column is updated with a 
n

---

<h4>
n
 Code to Insert Link in Cell</h4>

<pre><code>

function writeExportLinks(rowIndex, fileLink, dataLink) {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("ExportQueue");

  const fileCell = sheet.getRange(rowIndex, 7); // Column G

  const dataCell = sheet.getRange(rowIndex, 8); // Column H

  fileCell.setFormula(`=HYPERLINK("${fileLink}", "View .m")`);

  if (dataLink) dataCell.setFormula(`=HYPERLINK("${dataLink}", "View CSV")`);

  sheet.getRange(rowIndex, 6).setValue("
n
"); // Status column F

}

</code></pre>

This makes links interactive and clearly labeled.

---

<h4>
n
 Tip: Check for Overwrite Before Writing</h4>

Avoid overwriting manually inserted links unless intentional:

<pre><code>

if (!fileCell.getFormula()) {

  fileCell.setFormula(`=HYPERLINK("${fileLink}", "View .m")`);

}

</code></pre>

---

<h4>
n
 Integration with Export Loop</h4>

When a file is successfully uploaded:

<pre><code>

const file = uploadMATLABScript(...);

writeExportLinks(index + 2, file.getUrl(), csvFile.getUrl());

</code></pre>

---

<h4>
n
 Optional: Link to ZIP or Folder</h4>

If using zipped exports or Drive folders:

| Column | Label |

|--------|-------|

| G | `.m` or `.zip` |

| H | Folder link |

| I | Status |

Adjust columns accordingly based on export strategy.

---

<h4>
n
 Final Sheet Output Example:</h4>

| A | B | C | ... | G (`.m` Link) | H (`.csv` Link) | I |

|---|---|---|-----|---------------|-----------------|---|

| Trial_01 | Damped | TRUE | ... | View .m | View CSV | 
n
 |

---


<!-- Glossary Terms Referenced:

- setFormula

- HYPERLINK()

- Export Confirmation

- ExportQueue Sheet

- File Link Insertion

-->

# END SECTION 10.4.9.1

# START SECTION 10.4.9.2

<!-- ============================================================ -->

<!-- SECTION 10.4.9.2 -- Timestamp & Status Sync -->

<!-- ============================================================ -->

<h3 id="section10_4_9_2">Section 10.4.9.2 -- Timestamp & Status Sync</h3>

<p>

To ensure that each exported file can be traced back to its source sheet and export time, we write the status 

and timestamp directly into the <code>ExportQueue</code> sheet alongside each row. This confirms to users 

which exports succeeded and when, even outside of the Export Log tab.

</p>

---

<h4>
n
 Expected Columns in <code>ExportQueue</code> (New Additions)</h4>

| Column | Label | Type | Example |

|--------|-------|------|---------|

| F | Status | Symbol | 
n
 or 
n
 |

| J | Timestamp | DateTime | `2025-06-10 16:07` |

| K | Retry Count | Integer | `0` |

| L | Notes | Text | "Exported with ZIP" |

---

<h4>
n
 Writing Timestamp and Status After Export</h4>

Each export loop iteration should mark a success or failure at the row level:

<pre><code>

function markExportOutcome(rowIndex, success, fileLink, dataLink, errorMsg) {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("ExportQueue");

  const status = success ? "
n
" : "
n
";

  const time = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "yyyy-MM-dd HH:mm");

  sheet.getRange(rowIndex, 6).setValue(status);     // Column F

  sheet.getRange(rowIndex, 10).setValue(time);      // Column J

  sheet.getRange(rowIndex, 11).setValue(errorMsg || "");  // Column K

  // Add file link(s)

  if (fileLink) sheet.getRange(rowIndex, 7).setFormula(`=HYPERLINK("${fileLink}", "View .m")`);

  if (dataLink) sheet.getRange(rowIndex, 8).setFormula(`=HYPERLINK("${dataLink}", "View CSV")`);

}

</code></pre>

---

<h4>
n
 Successful Export Example Row</h4>

| A | B | C | ... | F | G | H | J | K |

|---|---|---|-----|---|---|---|----|----|

| Trial_01 | Damped | TRUE | ... | 
n
 | View .m | View CSV | 2025-06-10 16:14 | 0 |

---

<h4>
n
 Failed Export Example Row</h4>

| A | B | C | ... | F | G | H | J | K |

|---|---|---|-----|---|---|---|----|----|

| Trial_02 | Damped | TRUE | ... | 
n
 |  |  | 2025-06-10 16:15 | Missing param b |

---

<h4>
n
 Optional: Show Error Tooltip on Hover</h4>

You can add a note to the status cell with error info:

<pre><code>

sheet.getRange(rowIndex, 6).setNote("Missing parameter: b");

</code></pre>

This lets users mouse over the 
n
 to understand the cause.

---

<h4>
n
 Retry Count Logic</h4>

If a row is retried and succeeds, increment the count:

<pre><code>

const prevRetry = sheet.getRange(rowIndex, 11).getValue();

sheet.getRange(rowIndex, 11).setValue((prevRetry || 0) + 1);

</code></pre>

Show this in both the `ExportQueue` and `ExportLog`.

---

<h4>
n
 Tips for Formatting Columns</h4>

| Column | Format Suggestion |

|--------|--------------------|

| J (Timestamp) | Format 
®
 Date time (`yyyy-MM-dd HH:mm`) |

| F (Status) | Conditional formatting 
®
 Green for 
n
, Red for 
n
 |

| K (Retry) | Format as Number (0 decimals) |


---

<h4>
n
 Optional Notifications</h4>

For shared environments, post a summary toast:

<pre><code>

SpreadsheetApp.getActiveSpreadsheet().toast(

  `Export complete for row ${rowIndex}: ${success ? "Success" : "Failed"}`,

  "Batch Export"

);

</code></pre>

---

<h4>
n
 Final Result: Export Queue with Clear Tracking</h4>

Every export result is now:

- Marked 
n
 or 
n

- Time-stamped

- Linked to the `.m` and `.csv` files

- Tracked for retry count and error cause

---

<!-- Glossary Terms Referenced:

- ExportQueue Sheet

- Timestamping

- Export Status Symbol

- Retry Counter

- Spreadsheet Notes

-->

# END SECTION 10.4.9.2

# START SECTION 10.4.10.1

<!-- ============================================================ -->

<!-- SECTION 10.4.10.1 -- Annotated `.m` Script Header -->

<!-- ============================================================ -->

<h3 id="section10_4_10_1">Section 10.4.10.1 -- Annotated <code>.m</code> Script Header</h3>

<p>

To ensure long-term traceability, every exported MATLAB script should begin with a structured metadata block. 

This helps researchers, students, or external systems understand what generated the file, with which 

parameters, and under what assumptions. This section details best practices for embedding such annotation.

</p>

---

<h4>
n
 Why Use Annotations in Exported Scripts?</h4>

| Benefit | Description |

|---------|-------------|

| Provenance | Clearly state where the file came from |

| Parameters | Snapshot of all regression values |

| Formula | Embedded symbolic representation |

| Time | Timestamp ensures version control |

| Source | References original sheet and system version |

---

<h4>
n
 Standard Comment Block Template</h4>

Use a consistent multi-line comment header in each exported `.m` file:

<pre><code>

% ============================================

% Physics Data Export -- Auto-Generated Model

% Source Sheet: Trial_07

% Generated On: 2025-06-10 16:19:42

% System Version: PhysicsDataScript v5.1

%

% Model: Damped Cosine

% Fit Function:

%   y = A * exp(-b*t) * cos(w*t + phi)

%

% Parameters:

%   A    = 1.20

%   b    = 0.05

%   w    = 2.50

%   phi  = 0.30

%

% This script was auto-generated from Google Sheets

% using Apps Script automation. Manual edits may break

% compatibility with import tools or log sync.

% ============================================

</code></pre>

---

<h4>
n
 Code to Generate the Header (JavaScript)</h4>

<pre><code>

function buildMATLABHeader(sheetName, modelLabel, formula, paramMap) {

  const now = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "yyyy-MM-dd HH:mm:ss");

  const lines = [

    "% ============================================",

    "% Physics Data Export -- Auto-Generated Model",


    `% Source Sheet: ${sheetName}`,

    `% Generated On: ${now}`,

    "% System Version: PhysicsDataScript v5.1",

    "%",

    `% Model: ${modelLabel}`,

    "% Fit Function:",

    `%   ${formula}`,

    "%",

    "% Parameters:"

  ];

  Object.entries(paramMap).forEach(([key, val]) => {

    lines.push(`%   ${key.padEnd(5)} = ${val.toFixed(4)}`);

  });

  lines.push("%");

  lines.push("% This script was auto-generated from Google Sheets");

  lines.push("% using Apps Script automation. Manual edits may break");

  lines.push("% compatibility with import tools or log sync.");

  lines.push("% ============================================");

  return lines.join("\n");

}

</code></pre>

---

<h4>
n
 Header Placement in Export</h4>

Insert the header **before** the function definition:

<pre><code>

const header = buildMATLABHeader(...);

const functionBody = generateFunctionBody(...);

const finalScript = `${header}\n\n${functionBody}`;

</code></pre>

This ensures the `.m` file begins with metadata before executable content.

---

<h4>
n
 Advanced Additions (Optional Fields)</h4>

| Field | Example |

|-------|---------|

| `R²` value | `R2 = 0.983` |

| Data source file | `Trial_07.csv` |

| Notes | `"Baseline corrected"` |

| Custom tag | `"Batch_042_Run_3"` |

You can store these in a config sheet and inject into the header via string parsing.

---

<h4>
n
 Final Script Layout Example</h4>

<pre><code>

% (Annotation Block)

function y = model(t, A, b, w, phi)

  y = A * exp(-b * t) .* cos(w * t + phi);

end

</code></pre>

---

<h4>
n
 Version Signature Best Practice</h4>

Always include the generator and version ID:

<pre><code>

% System Version: PhysicsDataScript v5.1

</code></pre>

This supports reproducibility and auditing when shared externally or uploaded.

---

<h4>
n
 Why Header Comments Matter for Researchers</h4>

| Need | Annotation Benefit |

|------|---------------------|

| Replication | Parameters + formula |

| Time provenance | Export date |

| Data lineage | Source sheet |

| Tool versioning | Script version |

| Academic traceability | Works as supplementary appendix artifact |

---

<!-- Glossary Terms Referenced:

- MATLAB Script Annotation

- Comment Header

- Version Signature

- Source Sheet

- Regression Parameters

-->

# END SECTION 10.4.10.1

# END SECTION 10 -- PART 4

# START SECTION 10.5.1

<!-- ============================================================ -->

<!-- SECTION 10.5.1 -- Custom Menu Overview -->


<!-- ============================================================ -->

<h3 id="section10_5_1">Section 10.5.1 -- Custom Menu Overview</h3>

<p>

The Physics Data Collection script integrates deeply into the Google Sheets UI via a custom menu system. This 

menu appears when the sheet is opened and provides user access to all core functions -- from CSV import to 

regression analysis. This section describes the complete structure of the menu, how it loads, and how it's 

extended in later modules.

</p>

---

<h4>
n
 Where It Appears</h4>

- The custom menu appears in the **Sheet UI menu bar**, next to "Help"

- Title: <strong>"Physics Tools"</strong>

- Triggered by `onOpen()` every time the file loads

---

<h4>
n
 Main Code to Inject Menu</h4>

<pre><code>

function onOpen() {

  const ui = SpreadsheetApp.getUi();

  const menu = ui.createMenu("Physics Tools");

  menu

    .addItem("
n
 Setup Folders", "setupFolders")

    .addItem("
n
 Refresh CSV Files", "refreshCSVFiles")

    .addItem("
n
 Run Interval Analysis", "runIntervalPrompt")

    .addSeparator()

    .addItem("
n
 Run Regression", "runRegressionPrompt")

    .addItem("
n
 Formula Wizard", "showFormulaSidebar")

    .addSeparator()

    .addItem("
n
 Clean Negative Rows", "cleanNegativeRows")

    .addItem("
n
 View Folder Summary", "goToHomePage")

    .addSeparator()

    .addItem("
n
 Open Help Dialog", "showHelpDialog")

    .addToUi();

}

</code></pre>

---

<h4>
n
 Icon Prefixes</h4>

Each menu item uses emojis to visually differentiate functionality:

| Icon | Meaning |

|------|---------|

| 
n
 | File/Folder tools |

| 
n
 | Update or refresh |

| 
n
 | Interval analysis |

| 
n
 | Regression |

| 
n
 | Sidebar/AI tool |

| 
n
 | Data cleaner |

| 
n
 | Navigation |

| 
n
 | Help documentation |

---

<h4>
n
 Modular Grouping Structure</h4>

To allow flexibility, the menu items are grouped conceptually:

| Group | Items |

|-------|-------|

| Import Tools | Setup Folders, Refresh CSV |

| Analysis Tools | Interval, Regression, Wizard |

| Data Tools | Clean Negative Rows |

| Navigation | Go to Home Page |

| Help | Open Help Dialog |

These groupings will later be dynamically modified in Section 10.5.9.

---

<h4>
n
 Tips for Usage</h4>

- 
n
 **Menus only appear after reload** -- the first open requires Sheets to finish initializing

- 
nn
 **If the menu doesn't appear**, use `Run 
®
 onOpen()` manually in Apps Script

- 
n
 **Advanced users** can attach `onInstall(e)` to trigger `onOpen()` when first added

<pre><code>

function onInstall(e) {

  onOpen(e);

}

</code></pre>

---

<h4>
n
 Integration with HelpDialog (Section 10)</h4>

The fi
n
 Open Help Dialogfl item opens your full markdown-based UI panel using:

<pre><code>

function showHelpDialog() {

  const html = HtmlService.createHtmlOutputFromFile("HelpDialog")

    .setTitle("Physics Data Help");

  SpreadsheetApp.getUi().showSidebar(html);


}

</code></pre>

Make sure your file is named `HelpDialog.html` and matches the generated 15K-line spec.

---

<h4>
n
 Fully Dynamic Extension</h4>

In later sections, the menu will be extended:

- 
n
 Conditionally show options based on active sheet

- 
n
 Update item names dynamically (e.g., fiRun Regression [Trial_01]fl)

- 
n
 Disable buttons based on user state or role

- 
n
 Integrate debugging and AI-generated prompts

---

<h4>
n
 Debug Tip: Use `Logger.log()` Inside Menu Functions</h4>

For example:

<pre><code>

function runIntervalPrompt() {

  Logger.log("Interval prompt opened");

  // continue...

}

</code></pre>

Use View 
®
 Logs to see it during testing.

---

<h4>
n
 Why This Matters</h4>

| Benefit | Description |

|---------|-------------|

| Immediate access | All major features 1-click away |

| No coding needed | All options visible to beginners |

| Extensible | Power users can add or modify easily |

| Documented | Linked in HelpDialog TOC and glossary |

---

<!-- Glossary Terms Referenced:

- onOpen()

- createMenu()

- addItem()

- SpreadsheetApp.getUi()

- HtmlService

- Sidebar

-->

# END SECTION 10.5.1

# START SECTION 10.5.2.1

<!-- ============================================================ -->

<!-- SECTION 10.5.2.1 -- CSV Import Tools Menu: Setup & Refresh -->

<!-- ============================================================ -->

<h3 id="section10_5_2_1">Section 10.5.2.1 -- CSV Import Tools Menu: Setup & Refresh</h3>

<p>

This section explains the tools available in the Physics Tools menu for managing CSV imports, including folder

 setup and CSV refresh. These functions automate connecting your Google Drive folder structure to your data 

sheet and simplify syncing experimental data.

</p>

---

<h4>
n
 Menu Items Covered</h4>

| Menu Item | Linked Function | Purpose |

|-----------|------------------|---------|

| 
n
 Setup Folders | `setupFolders()` | Create and organize Drive folders |

| 
n
 Refresh CSV Files | `refreshCSVFiles()` | Import new or updated CSV files |

---

<h4>
n
 Folder Setup Overview</h4>

The `setupFolders()` function builds a structured set of Google Drive folders that match experimental 

configurations (e.g. Cart, Cart + 250g).

<pre><code>

function setupFolders() {

  const config = {

    "Cart": "red",

    "Cart + 0.250kg": "orange",

    "Cart + 0.500kg": "yellow"

  };

  Object.entries(config).forEach(([label, color]) => {

    // Create folder if it doesn't exist

    // Apply color, label, metadata

  });

  SpreadsheetApp.getUi().alert("Folders created and labeled.");

}

</code></pre>

These folder mappings are also referenced in `FOLDER_CONFIG` in the Apps Script global config block.

---

<h4>
n
 Refreshing CSV Files</h4>


<pre><code>

function refreshCSVFiles() {

  const folders = Object.values(FOLDER_CONFIG);

  folders.forEach(folder => {

    const csvFiles = DriveApp.getFolderById(folder.id).getFilesByType(MimeType.CSV);

    while (csvFiles.hasNext()) {

      const file = csvFiles.next();

      const content = file.getBlob().getDataAsString();

      const sheetName = file.getName().replace(".csv", "");

      let sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);

      if (!sheet) {

        sheet = SpreadsheetApp.getActiveSpreadsheet().insertSheet(sheetName);

      }

      const rows = Utilities.parseCsv(content);

      sheet.clearContents();

      sheet.getRange(1, 1, rows.length, rows[0].length).setValues(rows);

    }

  });

  SpreadsheetApp.getUi().alert("CSV files refreshed.");

}

</code></pre>

---

<h4>
n
 File Handling Rules</h4>

| Condition | Behavior |

|----------|----------|

| Duplicate sheet exists | Overwrite with confirmation |

| Filename = SheetName | Used for matching |

| Invalid CSV (e.g. XLSX) | Skipped with warning |

| Time column detection | Attempted in later validation (10.5.2.2) |

---

<h4>
n
 Optional Enhancements</h4>

You may optionally add:

- 
n
 Progress bar dialog (10.5.10)

- 
n
 Confirmation prompt before import

- 
n
 Row count log per file

- 
n
 Sheet tab color based on folder color

---

<h4>
n
 Logging Last Sync Time</h4>

Optionally update a cell on the home page with the last sync timestamp:

<pre><code>

sheet.getRange("B1").setValue(`Last Sync: ${new Date().toLocaleString()}`);

</code></pre>

This can also be fed into summary sheets or used to trigger notifications.

---

<h4>
n
 Example Folder Layout in Drive</h4>

<pre><code>

/Physics_CSVs

nnn
 Cart

n
   
nnn
 Trial_01.csv

n
   
nnn
 Trial_02.csv

nnn
 Cart + 0.250kg

n
   
nnn
 Trial_03.csv

nnn
 Cart + 0.500kg

n
   
nnn
 Trial_04.csv

</code></pre>

---

<h4>
n
 Final Results</h4>

After using the setup + refresh tools, you will have:

- 
n
 A Drive folder for each experiment category

- 
n
 A Sheet tab for each CSV file

- 
n
 Sync mechanism that ensures updated data is always available

- 
n
 Clean structure for batch analysis, regression, or interval workflows

---

<!-- Glossary Terms Referenced:

- CSV Import

- setupFolders()

- refreshCSVFiles()

- FOLDER_CONFIG

- Sheet Overwrite

- Google Drive Folder ID

-->

# END SECTION 10.5.2.1

# START SECTION 10.5.2.2

<!-- ============================================================ -->

<!-- SECTION 10.5.2.2 -- CSV Import Tools Menu: Validation & Feedback -->

<!-- ============================================================ -->


<h3 id="section10_5_2_2">Section 10.5.2.2 -- CSV Import Tools Menu: Validation & Feedback</h3>

<p>

Once CSV files are imported into the sheet, the system performs multiple validation checks to confirm that the

 data is usable. This section explains how validation is triggered, how results are reported to the user, and 

how errors are handled.

</p>

---

<h4>
n
 Validation Goals</h4>

Each imported sheet is tested for the following:

| Validation Test | Description |

|-----------------|-------------|

| Header Check | Must contain "Time", "Position", or valid data label |

| Time Column Check | First column must be time-series |

| NaN Check | Must not contain invalid values or headers |

| Negative Time Filter | Auto-detect and flag pre-0 ms rows (see 10.5.8) |

| Duplicate Sheet Name | Avoid duplicates if importing new files |

---

<h4>
n
 Automatic Validation on Import</h4>

The `refreshCSVFiles()` function automatically calls a validator:

<pre><code>

function validateImportedSheet(sheet) {

  const data = sheet.getDataRange().getValues();

  const header = data[0];

  if (!header[0].toString().toLowerCase().includes("time")) {

    sheet.getRange(1, 1).setBackground("#ffcccc");

    SpreadsheetApp.getUi().alert(`
n
 Validation failed: First column must be 'Time' in ${sheet.getName()}`);

    return false;

  }

  if (data.length &lt; 2) {

    SpreadsheetApp.getUi().alert(`
n
 Validation failed: No data rows in ${sheet.getName()}`);

    return false;

  }

  return true;

}

</code></pre>

---

<h4>
n
 Feedback Mechanisms</h4>

If validation fails:

- 
n
 Alert is shown

- 
n
 Header cell is colored red

- 
n
 Import skips analysis step

- 
n
 Row is marked in an optional `ImportLog` sheet

---

<h4>
n
 Sample Entry in `ImportLog`</h4>

| Sheet Name | Timestamp | Status | Notes |

|------------|-----------|--------|-------|

| Trial_03   | 2025-06-10 16:23 | 
n
 Failed | Missing "Time" column |

You can append this log from within the validation call:

<pre><code>

function logImportResult(name, success, notes) {

  const sheet = SpreadsheetApp.getActive().getSheetByName("ImportLog");

  sheet.appendRow([

    name,

    new Date().toLocaleString(),

    success ? "
n
 Success" : "
n
 Failed",

    notes

  ]);

}

</code></pre>

---

<h4>
n
 Data Cleaner Prep</h4>

Validated sheets are tagged with a note or cell marker for batch cleanup:

- 
n
 Clean and ready 
®
 note: "Validated"

- 
n
 Minor warning (e.g. empty rows)

- 
n
 Failed (blocked from regression)

You can add:

<pre><code>

sheet.getRange(1, 1).setNote("Validated: Time-series check passed");

</code></pre>

---

<h4>
n
 Optional -- Email Notification (Advanced)</h4>

Notify the user if any files failed:

<pre><code>

if (failures.length > 0) {

  MailApp.sendEmail(Session.getActiveUser().getEmail(), "CSV Import Issues", "Check ImportLog tab for 


failures.");

}

</code></pre>

---

<h4>
n
 Tips for CSV Validation Design</h4>

| Pattern | Best Practice |

|---------|---------------|

| Time axis | Always use "Time (ms)" or "Time (s)" |

| Empty rows | Strip or flag |

| Negative values | OK but log them |

| Encoding | Ensure UTF-8 if using special characters |

---

<h4>
n
 Final Result of Validation Phase</h4>

- Only validated CSVs proceed to interval/regression workflows

- Invalid files are flagged, skipped, or logged

- System remains robust and user-informed

---

<!-- Glossary Terms Referenced:

- CSV Validation

- ImportLog Sheet

- Time Column

- Data Cleaner

- Sheet Annotation

-->

# END SECTION 10.5.2.2

# START SECTION 10.5.3.1

<!-- ============================================================ -->

<!-- SECTION 10.5.3.1 -- Regression Tools Menu: Fit Model + User Input -->

<!-- ============================================================ -->

<h3 id="section10_5_3_1">Section 10.5.3.1 -- Regression Tools Menu: Fit Model + User Input</h3>

<p>

This section explains the "
n
 Run Regression" feature from the Physics Tools menu. It allows users to select a 

sheet, define or confirm a fitting model, and execute a regression process based on available time-series 

data.

</p>

---

<h4>
n
 Menu Trigger</h4>

The following menu item is registered in the `onOpen()` menu:

<pre><code>

.addItem("
n
 Run Regression", "runRegressionPrompt")

</code></pre>

This calls a prompt function:

<pre><code>

function runRegressionPrompt() {

  const ui = SpreadsheetApp.getUi();

  const response = ui.prompt("Regression", "Enter the sheet name to fit:", ui.ButtonSet.OK_CANCEL);

  if (response.getSelectedButton() === ui.Button.OK) {

    const name = response.getResponseText().trim();

    runRegressionForSheet(name);

  }

}

</code></pre>

---

<h4>
n
 Regression Sheet Logic</h4>

<pre><code>

function runRegressionForSheet(sheetName) {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);

  if (!sheet) {

    SpreadsheetApp.getUi().alert(`Sheet '${sheetName}' not found.`);

    return;

  }

  const data = sheet.getDataRange().getValues();

  const time = data.map(row => row[0]);

  const y = data.map(row => row[1]);

  if (!Array.isArray(time) || time.length < 5) {

    SpreadsheetApp.getUi().alert("Insufficient data for regression.");

    return;

  }

  const model = promptUserForModel();

  const initialGuess = generateInitialGuess(model);

  const result = performRegression(model, time, y, initialGuess);

  renderRegressionOutput(sheetName, model, result);

}

</code></pre>

---

<h4>
n
 Prompting for Model Type</h4>


<pre><code>

function promptUserForModel() {

  const ui = SpreadsheetApp.getUi();

  const response = ui.prompt(

    "Model Type",

    "Enter model (e.g. DampedCosine, ExpDecay, Poly3):",

    ui.ButtonSet.OK_CANCEL

  );

  return response.getResponseText().trim();

}

</code></pre>

---

<h4>
n
 Example Models (Supported by Default)</h4>

| Model | Description |

|-------|-------------|

| DampedCosine | `A * exp(-b*t) * cos(w*t + phi)` |

| ExpDecay | `A * exp(-b*t)` |

| Poly3 | `ax^3 + bx^2 + cx + d` |

| UserDefined | Custom -- injected from Formula Wizard |

---

<h4>
n
 Integration with Formula Wizard</h4>

If the user has recently used the Formula Wizard (see 10.5.5), a `userDefinedModel` string may be stored 

globally. This can be used instead of prompting.

<pre><code>

if (userDefinedModel) {

  const model = userDefinedModel;

  // proceed with regression

}

</code></pre>

---

<h4>
n
 Summary of Input Phase</h4>

| Step | Description |

|------|-------------|

| 1
nn
 | User enters sheet name |

| 2
nn
 | Sheet is located and validated |

| 3
nn
 | User enters or selects model |

| 4
nn
 | System generates initial guess |

| 5
nn
 | Regression engine begins |

This input phase feeds directly into the rendering engine, covered in 10.5.3.2.

---

<!-- Glossary Terms Referenced:

- Regression Model

- runRegressionPrompt()

- performRegression()

- Model Selection

- Formula Wizard

-->

# END SECTION 10.5.3.1

# START SECTION 10.5.3.2

<!-- ============================================================ -->

<!-- SECTION 10.5.3.2 -- Regression Tools Menu: Output Rendering + Results -->

<!-- ============================================================ -->

<h3 id="section10_5_3_2">Section 10.5.3.2 -- Regression Tools Menu: Output Rendering + Results</h3>

<p>

Once a regression model is selected and executed, the system generates a full set of outputs including 

parameters, fit quality, and rendered results. These are displayed directly in the original sheet, optionally 

with plots or links.

</p>

---

<h4>
n
 Output Location</h4>

Regression results are inserted:

- 
n
 Below the existing data (leave one blank row)

- 
n
 In a dedicated summary area

- 
n
 With clear headers for readability

---

<h4>
n
 Example Output Template</h4>

| Row | Column A | Column B |

|-----|----------|----------|

| 101 | Fit Model | `Damped Cosine` |

| 102 | Function | `A * exp(-b*t) * cos(w*t + phi)` |

| 103 | Parameters | `A = 1.20` |

| 104 |            | `b = 0.05` |

| 105 |            | `w = 2.43` |

| 106 |            | `phi = 0.31` |

| 107 | R² | `0.981` |

| 108 | Status | 
n
 Success |


---

<h4>
n
 JavaScript: Inserting Fit Output</h4>

<pre><code>

function renderRegressionOutput(sheetName, model, result) {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);

  const startRow = sheet.getLastRow() + 2;

  const output = [

    ["Fit Model", model.label],

    ["Function", model.formula],

    ["Parameters", ""],

    ...Object.entries(result.parameters).map(([k, v]) => ["", `${k} = ${v.toFixed(4)}`]),

    ["R²", result.rSquared.toFixed(3)],

    ["Status", result.success ? "
n
 Success" : "
n
 Failed"]

  ];

  sheet.getRange(startRow, 1, output.length, 2).setValues(output);

}

</code></pre>

---

<h4>
n
 Styling Enhancements</h4>

To make the regression summary stand out:

- Bold first column (A)

- Background color: light gray

- Use thick border above and below summary block

<pre><code>

sheet.getRange(startRow, 1, 1, 2).setFontWeight("bold");

sheet.getRange(startRow, 1, output.length, 2).setBackground("#f4f4f4");

</code></pre>

---

<h4>
n
 Optional: Add Regression Chart</h4>

You can draw a chart overlaying the data and fit curve:

<pre><code>

function insertFitChart(sheet, time, observed, predicted) {

  const chart = sheet.newChart()

    .setChartType(Charts.ChartType.LINE)

    .addRange(sheet.getRange("A1:B100")) // Original

    .addRange(sheet.getRange("C1:C100")) // Fitted

    .setOption("title", "Observed vs. Fit")

    .setPosition(5, 5, 0, 0);

  sheet.insertChart(chart);

}

</code></pre>

---

<h4>
n
 Exporting Results to Log Sheet</h4>

If batch mode is used (Section 10.4), the results can also be written to `ExportLog`:

| Sheet | Model | R² | Timestamp | Status |

|-------|-------|----|-----------|--------|

| Trial_01 | Damped | 0.981 | 2025-06-10 | 
n
 |

---

<h4>
n
 Advanced Add-ons</h4>

- 
n
 Add LaTeX version of fit to output block (see 10.5.5)

- 
n
 Save model and output to JSON (Section 10.4.8)

- 
n
 Auto-link export into summary tab (Section 10.4.7)

---

<h4>
n
 Summary of Output Phase</h4>

| Output | Description |

|--------|-------------|

| Model Info | Label and formula |

| Parameters | Key-value list |

| Fit Quality | R² or error |

| Chart | Optional inline plot |

| Export | Optional external log

---

<!-- Glossary Terms Referenced:

- renderRegressionOutput

- R²

- Regression Summary

- Regression Chart

- Spreadsheet Output Block

-->

# END SECTION 10.5.3.2

# START SECTION 10.5.4

<!-- ============================================================ -->

<!-- SECTION 10.5.4 -- Interval Analysis UI -->

<!-- ============================================================ -->

<h3 id="section10_5_4">Section 10.5.4 -- Interval Analysis UI</h3>

<p>


Interval analysis enables users to define a specific time window within a dataset to analyze, isolate, or 

regress. This section describes how users can manually input or adjust intervals using menu prompts or on-

sheet controls.

</p>

---

<h4>
n
 Menu Integration</h4>

| Menu Item | Function |

|-----------|----------|

| 
n
 Run Interval Analysis | `runIntervalPrompt()` |

This item appears in the main Physics Tools menu and opens a user prompt to define a start and end time for an

 analysis window.

---

<h4>
n
 User Prompt for Interval</h4>

<pre><code>

function runIntervalPrompt() {

  const ui = SpreadsheetApp.getUi();

  const start = ui.prompt("Interval Start", "Enter start time (ms):", ui.ButtonSet.OK_CANCEL);

  if (start.getSelectedButton() !== ui.Button.OK) return;

  const end = ui.prompt("Interval End", "Enter end time (ms):", ui.ButtonSet.OK_CANCEL);

  if (end.getSelectedButton() !== ui.Button.OK) return;

  const startTime = parseFloat(start.getResponseText());

  const endTime = parseFloat(end.getResponseText());

  if (isNaN(startTime) || isNaN(endTime) || startTime >= endTime) {

    ui.alert("Invalid interval.");

    return;

  }

  defineIntervalRange(startTime, endTime);

}

</code></pre>

---

<h4>
n
 Highlight Interval in Active Sheet</h4>

<pre><code>

function defineIntervalRange(startTime, endTime) {

  const sheet = SpreadsheetApp.getActiveSheet();

  const data = sheet.getDataRange().getValues();

  for (let i = 1; i < data.length; i++) {

    const t = parseFloat(data[i][0]);

    const range = sheet.getRange(i + 1, 1, 1, sheet.getLastColumn());

    if (t >= startTime && t <= endTime) {

      range.setBackground("#d0f0d0");

    } else {

      range.setBackground(null);

    }

  }

  sheet.getRange(1, sheet.getLastColumn() + 1).setValue(`Interval: ${startTime}OE${endTime} ms`);

}

</code></pre>

---

<h4>
n
 Best Practices</h4>

| Guideline | Reason |

|-----------|--------|

| Validate numeric input | Avoid NaN errors |

| Avoid zero-width intervals | Start 
¹
 End |

| Color interval rows only | Preserves other formatting |

| Record the interval | Save as metadata or label |

---

<h4>
n
 Integration With Regression</h4>

If an interval is defined, only the data within it should be used in fit functions:

<pre><code>

if (intervalStart !== null && intervalEnd !== null) {

  data = data.filter(row => row[0] >= intervalStart && row[0] <= intervalEnd);

}

</code></pre>

---

<h4>
n
 Optional Enhancements</h4>

- 
n
 Draw chart of selected interval

- 
n
 Auto-remove rows outside interval

- 
n
 Store interval in a hidden config cell (e.g., Z1, Z2)

- 
n
 Remember last used interval per sheet

---

<h4>
n
 Final Result</h4>

| Feature | Effect |

|---------|--------|

| Interval set | Time rows highlighted |

| Data trimmed | Regression will use trimmed data |

| Label added | Interval tag shown on sheet |


| Optional chart | Displays trimmed fit zone |

---

<!-- Glossary Terms Referenced:

- Interval Analysis

- defineIntervalRange()

- runIntervalPrompt()

- Time-Series Trimming

- Highlighting Interval Rows

-->

# END SECTION 10.5.4

# START SECTION 10.5.5.1

<!-- ============================================================ -->

<!-- SECTION 10.5.5.1 -- Sidebar: Input UI + Formula Prompts -->

<!-- ============================================================ -->

<h3 id="section10_5_5_1">Section 10.5.5.1 -- Sidebar: Input UI + Formula Prompts</h3>

<p>

The Formula Wizard is a sidebar tool that allows users to define their own custom regression formula using 

intuitive prompts. This enables full flexibility for advanced users and learning opportunities for beginners 

to construct and visualize their own models.

</p>

---

<h4>
n
 Purpose of Sidebar</h4>

| User Level | Benefit |

|------------|---------|

| Beginner | Prompts guide creation of custom equations |

| Intermediate | Edit and preview LaTeX output |

| Advanced | Inject user-defined models into regression system |

---

<h4>
n
 Sidebar Trigger</h4>

The sidebar is opened via:

<pre><code>

.addItem("
n
 Formula Wizard", "showFormulaSidebar")

</code></pre>

Sidebar function:

<pre><code>

function showFormulaSidebar() {

  const html = HtmlService.createHtmlOutputFromFile("FormulaWizard")

    .setTitle("Custom Regression Formula");

  SpreadsheetApp.getUi().showSidebar(html);

}

</code></pre>

---

<h4>
n
 Sidebar Layout (HTML)</h4>

The `FormulaWizard.html` file contains structured fields:

- 
n
 Model Name

- 
n
 Equation (editable)

- 
n
 Parameters (auto-extracted or manual)

- 
n
 Button to preview rendered formula

- 
n
 Button to save to memory

Example HTML block:

<pre><code>

&lt;label&gt;Model Name:&lt;/label&gt;

&lt;input type="text" id="modelName"&gt;

&lt;label&gt;Equation:&lt;/label&gt;

&lt;textarea id="modelFormula"&gt;A * exp(-b*t) * cos(w*t + phi)&lt;/textarea&gt;

&lt;button onclick="previewLatex()">Preview LaTeX&lt;/button&gt;

&lt;button onclick="submitFormula()">Save Formula&lt;/button&gt;

&lt;div id="previewBox"&gt;&lt;/div&gt;

</code></pre>

---

<h4>
n
 Form Submission (JavaScript)</h4>

User-generated input is passed back to Apps Script using:

<pre><code>

google.script.run

  .withSuccessHandler(onSuccess)

  .saveUserFormula(document.getElementById("modelName").value, document.getElementById("modelFormula").value);

</code></pre>

Apps Script side:

<pre><code>

function saveUserFormula(name, formula) {

  PropertiesService.getDocumentProperties().setProperties({

    userModelName: name,

    userModelFormula: formula

  });

}


</code></pre>

---

<h4>
n
 Validating Input</h4>

You can check formula format using basic regex or attempt symbolic parsing (advanced):

- Confirm variables (e.g. `t`, `A`, `b`) are consistent

- Match parentheses

- Ensure valid function syntax (exp, cos, sin, etc.)

---

<h4>
n
 Summary of Input Workflow</h4>

| Step | Description |

|------|-------------|

| 1
nn
 | User opens sidebar |

| 2
nn
 | Inputs formula & name |

| 3
nn
 | Previews formula |

| 4
nn
 | Submits to script |

| 5
nn
 | Model stored in memory for regression use |

This continues in **10.5.5.2** where LaTeX rendering and sheet insertion are handled.

---

<!-- Glossary Terms Referenced:

- Sidebar

- Formula Wizard

- HtmlService

- google.script.run

- Document Properties

-->

# END SECTION 10.5.5.1

# START SECTION 10.5.5.2

<!-- ============================================================ -->

<!-- SECTION 10.5.5.2 -- Sidebar: LaTeX Output + Inserting into Sheet -->

<!-- ============================================================ -->

<h3 id="section10_5_5_2">Section 10.5.5.2 -- Sidebar: LaTeX Output + Inserting into Sheet</h3>

<p>

After defining a custom regression model via the Formula Wizard, users can preview it as a formatted LaTeX 

expression. This section explains how the system renders that preview, stores the result, and optionally 

inserts it into the active sheet for logging or reporting purposes.

</p>

---

<h4>
n
 LaTeX Rendering Flow</h4>

| Step | Function |

|------|----------|

| 1
nn
 | User clicks fiPreview LaTeXfl |

| 2
nn
 | JavaScript converts to LaTeX |

| 3
nn
 | Output shown in `previewBox` |

| 4
nn
 | (Optional) Render into cell |

---

<h4>
n
 HTML Integration</h4>

You may use MathJax for LaTeX previewing inside the sidebar:

<pre><code>

&lt;script src="https://polyfill.io/v3/polyfill.min.js?features=es6"&gt;&lt;/script&gt;

&lt;script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"&gt;&lt;/script&gt;

&lt;script&gt;

function previewLatex() {

  const eq = document.getElementById("modelFormula").value;

  document.getElementById("previewBox").innerHTML = `\\[${eq}\\]`;

  MathJax.typeset();

}

&lt;/script&gt;

</code></pre>

---

<h4>
n
 Insert LaTeX Output into Sheet</h4>

Optionally, the rendered formula can be inserted into the sheet:

<pre><code>

function insertLatexToSheet() {

  const props = PropertiesService.getDocumentProperties();

  const latex = props.getProperty("userModelFormula");

  const name = props.getProperty("userModelName");

  const sheet = SpreadsheetApp.getActiveSheet();

  const row = sheet.getLastRow() + 2;

  sheet.getRange(row, 1).setValue(`Model: ${name}`);

  sheet.getRange(row + 1, 1).setValue(`LaTeX: ${latex}`);

}

</code></pre>

---

<h4>
n
 Example Sheet Output</h4>

| A | B |


|---|---|

| Model: DampedCosine | |

| LaTeX: A * exp(-b*t) * cos(w*t + phi) | |

---

<h4>
n
 Exporting LaTeX to JSON</h4>

LaTeX versions of the model can also be included in `.json` or `.m` file exports (see 10.4.8):

<pre><code>

{

  "model": "DampedCosine",

  "latex": "A * exp(-b*t) * cos(w*t + phi)",

  ...

}

</code></pre>

---

<h4>
n
 Advanced Enhancements</h4>

| Feature | Description |

|---------|-------------|

| Parameter tag parsing | Extract `A`, `b`, `w` from formula |

| Multiple previews | Allow swapping between symbolic and numeric forms |

| Dark mode toggle | Improves visibility on high-contrast themes |

| Inline rendering | Live preview while typing |

---

<h4>
n
 Security and Sandbox Note</h4>

MathJax and all sidebar scripts must be sandboxed. Avoid loading external `.js` libraries outside the 

supported set. Use CDN links from trusted sources only.

---

<h4>
n
 Final Output Goals</h4>

- User sees clear LaTeX rendering of their custom model

- Formula is inserted into the active sheet for reference

- Formula is stored and usable for regression

- Optional export integration ensures full reproducibility

---

<!-- Glossary Terms Referenced:

- LaTeX

- MathJax

- Formula Insertion

- insertLatexToSheet()

- Formula Preview

-->

# END SECTION 10.5.5.2

# START SECTION 10.5.6

<!-- ============================================================ -->

<!-- SECTION 10.5.6 -- Sheet Home Buttons and Folder Navigation -->

<!-- ============================================================ -->

<h3 id="section10_5_6">Section 10.5.6 -- Sheet Home Buttons and Folder Navigation</h3>

<p>

Each folder group (e.g., Cart, Cart + 250g) has a generated fiHome Pagefl sheet that acts as a navigation hub 

for all CSVs within that folder. These home pages include shortcut buttons, color-coded sections, last-updated

 labels, and quick actions for data review.

</p>

---

<h4>
n
 Sheet Creation Logic</h4>

When `setupFolders()` is called (Section 10.5.2), the script creates a home page sheet per folder. These 

sheets are:

- Named as the folder (e.g., fiCartfl)

- Positioned near the top of the tab list

- Colored to match the folder (e.g., red for Cart)

- Populated with buttons + linked CSVs

---

<h4>
n
 Home Sheet Layout Template</h4>

| Row | A | B | C | D |

|-----|---|---|---|---|

| 1 | Folder: Cart | | | |

| 2 | Color: Red | | | |

| 4 | Refresh CSVs | [Button] | View Summary | [Button] |

| 6 | Trial_01.csv | Open Sheet 
®
 | | |

| 7 | Trial_02.csv | Open Sheet 
®
 | | |

All buttons are generated using Apps Script drawing objects.

---

<h4>
nn
 Creating Buttons</h4>

<pre><code>

function addNavButton(sheet, row, label, functionName) {

  const range = sheet.getRange(row, 2);

  const button = sheet.insertDrawing(range);

  button.setText(label);


  button.assignScript(functionName);

}

</code></pre>

---

<h4>
n
 CSV Refresh Button</h4>

The refresh button on each folder sheet is mapped to:

<pre><code>

function refreshFolderCSVs() {

  const name = SpreadsheetApp.getActiveSheet().getName();

  refreshCSVFilesFromFolder(name);

}

</code></pre>

This limits refreshes to one folder only -- great for testing or staged workflows.

---

<h4>
n
 Summary Navigation Button</h4>

Some home sheets also include a fiView Folder Summaryfl button linking to a summary sheet showing metadata like:

| Trial | Start Time | Duration | Validated | Notes |

|-------|------------|----------|-----------|-------|

The button calls `goToFolderSummary("Cart")` or equivalent.

---

<h4>
n
 Sheet Tab Coloring</h4>

Color consistency is maintained between:

- 
n
 Folder in Drive (label + color)

- 
n
 Home Page tab (tab color)

- 
n
 Header row in summary sheet

This improves orientation in large projects.

---

<h4>
n
 Best Practices</h4>

| Rule | Reason |

|------|--------|

| Keep button labels short | Prevent sheet overlap |

| Use system sheet naming conventions | Enables summary generation |

| Make buttons repositionable | Allows layout tuning per experiment |

---

<h4>
n
 Final User Experience</h4>

- Each folder group has a fiHomefl dashboard

- Users can open trials, refresh data, and view metadata

- Buttons minimize user errors and increase clarity

- Sheet layout is visually aligned to folder context

---

<!-- Glossary Terms Referenced:

- Home Sheet

- Navigation Buttons

- Folder Color

- refreshFolderCSVs()

- Sheet Tab Coloring

-->

# END SECTION 10.5.6

# START SECTION 10.5.7

<!-- ============================================================ -->

<!-- SECTION 10.5.7 -- Scheduled Tasks & Time-Based Triggers -->

<!-- ============================================================ -->

<h3 id="section10_5_7">Section 10.5.7 -- Scheduled Tasks & Time-Based Triggers</h3>

<p>

Google Apps Script allows time-based triggers to automate tasks such as refreshing CSV imports or exporting 

logs. This section explains how to use these triggers for batch automation and minimal manual input.

</p>

---

<h4>
nn
 Purpose of Time Triggers</h4>

| Use Case | Triggered Task |

|----------|----------------|

| Daily Refresh | Re-import all CSVs at 8am |

| Nightly Export | Batch export regression files at midnight |

| Hourly Validation | Check for invalid rows or new sheets |

| Timed Cleanup | Delete orphan sheets on Sunday |

---

<h4>
nn
 Creating a Time Trigger</h4>

You can install a time-based trigger programmatically:

<pre><code>

function installDailyTrigger() {

  ScriptApp.newTrigger("refreshCSVFiles")

    .timeBased()

    .everyDays(1)

    .atHour(8)


    .create();

}

</code></pre>

Other options:

<pre><code>

ScriptApp.newTrigger("exportAllResults")

  .timeBased()

  .everyHours(1)

  .create();

</code></pre>

---

<h4>
n
 Viewing Existing Triggers</h4>

Go to:

n
 **Extensions 
®
 Apps Script 
®
 Triggers tab**

You(TM)ll see:

- Trigger name

- Frequency

- Function it calls

- Status (active/disabled)

---

<h4>
n
 Deleting a Trigger</h4>

<pre><code>

function removeAllTriggers() {

  const triggers = ScriptApp.getProjectTriggers();

  triggers.forEach(t => ScriptApp.deleteTrigger(t));

}

</code></pre>

Use this with caution -- it deletes **all** time-based and form triggers.

---

<h4>
n
 Trigger-Safe Functions</h4>

Time-triggered functions must:

- 
n
 NOT use `SpreadsheetApp.getUi()`

- 
n
 Avoid UI-based alerts, prompts, toasts

- 
n
 Return silently or write logs

- 
n
 Handle errors with `try/catch` or logs

Example:

<pre><code>

function timedImport() {

  try {

    refreshCSVFiles();

    logImportSuccess();

  } catch (e) {

    logTriggerError("timedImport", e);

  }

}

</code></pre>

---

<h4>
n
 Common Trigger Configurations</h4>

| Task | Frequency | Function |

|------|-----------|----------|

| CSV Refresh | Every day | `refreshCSVFiles()` |

| Regression Export | Weekly | `batchExportAll()` |

| Log Cleanup | Monthly | `clearOldLogs()` |

| JSON Sync | Hourly | `exportSummaryJSON()` |

---

<h4>
n
 Optional Enhancements</h4>

- 
n
 Email notification on trigger success/failure

- 
n
 Summary report sheet (updated daily)

- 
n
 Auto-backup to Drive ZIP (see Section 10.4)

- 
n
 Trigger stats table on Admin tab

---

<h4>
n
 Final Trigger System Benefits</h4>

| Benefit | Impact |

|---------|--------|

| Automation | No user clicks required |

| Consistency | Daily imports never missed |

| Error reduction | Controlled retries/logs |

| Transparency | Logs + optional UI messages |

---

<!-- Glossary Terms Referenced:

- Time-Based Trigger

- ScriptApp.newTrigger

- Trigger Function

- Scheduled CSV Import

- Trigger Log

-->


# END SECTION 10.5.7

# START SECTION 10.5.8

<!-- ============================================================ -->

<!-- SECTION 10.5.8 -- Data Cleaner Button Tools -->

<!-- ============================================================ -->

<h3 id="section10_5_8">Section 10.5.8 -- Data Cleaner Button Tools</h3>

<p>

Some datasets include rows that must be removed prior to regression or analysis, such as negative time values 

or invalid header rows. This section explains how the system allows users to clean their data using menu 

buttons -- either by hiding or permanently deleting unwanted rows.

</p>

---

<h4>
n
 Available Options</h4>

| Menu Item | Function |

|-----------|----------|

| 
n
 Clean Negative Rows | `cleanNegativeRows()` |

| (Optional) Clean Empty Rows | `cleanEmptyRows()` |

| (Optional) Clean Zero Time | `cleanBeforeZero()` |

Each function can be added as its own button or dropdown item in the Physics Tools menu.

---

<h4>
n
 Use Case -- Negative Time Values</h4>

Many experiments start logging before `t = 0`. To remove these rows:

<pre><code>

function cleanNegativeRows() {

  const sheet = SpreadsheetApp.getActiveSheet();

  const data = sheet.getDataRange().getValues();

  for (let i = data.length - 1; i >= 1; i--) {

    const time = parseFloat(data[i][0]);

    if (!isNaN(time) && time < 0) {

      sheet.deleteRow(i + 1);

    }

  }

  SpreadsheetApp.getUi().alert("Negative time rows deleted.");

}

</code></pre>

---

<h4>
n
 Use Case -- Hide Instead of Delete</h4>

Safer alternative to preserve original rows:

<pre><code>

function hideNegativeRows() {

  const sheet = SpreadsheetApp.getActiveSheet();

  const data = sheet.getDataRange().getValues();

  for (let i = data.length - 1; i >= 1; i--) {

    const time = parseFloat(data[i][0]);

    if (!isNaN(time) && time < 0) {

      sheet.hideRows(i + 1);

    }

  }

  SpreadsheetApp.getUi().alert("Negative time rows hidden.");

}

</code></pre>

---

<h4>
nn
 Option Selection Dialog (Advanced)</h4>

You can prompt the user to choose "Delete" vs. "Hide":

<pre><code>

function chooseCleanerMode() {

  const ui = SpreadsheetApp.getUi();

  const result = ui.prompt("Clean Negative Rows", "Type 'hide' or 'delete'", ui.ButtonSet.OK_CANCEL);

  if (result.getSelectedButton() !== ui.Button.OK) return;

  const mode = result.getResponseText().toLowerCase();

  if (mode === "hide") {

    hideNegativeRows();

  } else if (mode === "delete") {

    cleanNegativeRows();

  } else {

    ui.alert("Invalid input.");

  }

}

</code></pre>

---

<h4>
n
 Best Practices</h4>

| Guideline | Reason |

|-----------|--------|

| Always backup before delete | Prevent loss of real data |

| Use hide for safety | Ideal for education or shared files |

| Confirm time header | Make sure column A is fiTime (ms)fl |


| Color cleaned rows (if hiding) | Visual cue for excluded data |

---

<h4>
n
 Optional Enhancements</h4>

- Store fiLast Cleanedfl timestamp in Z1

- Add checkbox column to manually exclude rows

- Auto-invoke on sheet open (with confirmation)

- Add undo link to restore rows if hiding

---

<h4>
n
 Final Result</h4>

- Users can easily sanitize time-series datasets

- Errors from negative/invalid rows are avoided in regression

- Sheet remains clean, consistent, and analysis-ready

---

<!-- Glossary Terms Referenced:

- cleanNegativeRows()

- hideNegativeRows()

- Data Cleaner

- Invalid Time Rows

- Sheet Row Removal

-->

# END SECTION 10.5.8

# START SECTION 10.5.9

<!-- ============================================================ -->

<!-- SECTION 10.5.9 -- Dynamic Menu State Control -->

<!-- ============================================================ -->

<h3 id="section10_5_9">Section 10.5.9 -- Dynamic Menu State Control</h3>

<p>

As your spreadsheet becomes more complex, not all menu actions should be available at all times. This section 

explains how to dynamically modify the contents of the Physics Tools menu based on the active sheet, user-

defined variables, and validation checks.

</p>

---

<h4>
n
 Why Dynamically Control Menu State?</h4>

| Use Case | Action |

|----------|--------|

| System sheet is active | Hide regression buttons |

| Sheet missing time data | Disable interval tools |

| User is not authorized | Hide advanced options |

| Sheet is a summary page | Hide CSV import tools |

---

<h4>
n
 Key Pattern: Conditional Menu Injection</h4>

You must reconstruct the menu based on the active context:

<pre><code>

function onOpen() {

  const ui = SpreadsheetApp.getUi();

  const sheet = SpreadsheetApp.getActiveSheet();

  const name = sheet.getName();

  const menu = ui.createMenu("Physics Tools");

  if (!SYSTEM_SHEETS.includes(name)) {

    menu.addItem("
n
 Run Regression", "runRegressionPrompt");

    menu.addItem("
n
 Run Interval Analysis", "runIntervalPrompt");

  }

  menu.addItem("
n
 Open Help Dialog", "showHelpDialog").addToUi();

}

</code></pre>

---

<h4>
n
 Restrict by Sheet Name</h4>

Define `SYSTEM_SHEETS` globally (e.g., Home, Glossary, ExportLog):

<pre><code>

const SYSTEM_SHEETS = ["Home", "Glossary", "ExportLog", "ImportLog"];

</code></pre>

These sheets should block menu items related to:

- Regression

- Data cleaning

- Interval analysis

---

<h4>
n
 Advanced Pattern: User Role-Based Menu</h4>

Optional -- restrict features to owner only:

<pre><code>

function isOwner() {

  return Session.getActiveUser().getEmail() === "your.email@example.com";

}

</code></pre>

Then dynamically add advanced tools:


<pre><code>

if (isOwner()) {

  menu.addItem("
n
 Developer Tools", "openDevPanel");

}

</code></pre>

---

<h4>
n
 Sheet Content-Based Menu Switching</h4>

You can check for a valid fiTimefl column or fit zone:

<pre><code>

function sheetHasTimeColumn(sheet) {

  const header = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];

  return header.some(cell => typeof cell === "string" && cell.toLowerCase().includes("time"));

}

</code></pre>

If missing, hide interval and regression options:

<pre><code>

if (sheetHasTimeColumn(sheet)) {

  menu.addItem("
n
 Run Regression", "runRegressionPrompt");

}

</code></pre>

---

<h4>
n
 Menu Refresh Triggers</h4>

| Event | Required Action |

|-------|-----------------|

| Sheet switch | Rerun `onOpen()` or attach `onSelectionChange()` |

| Menu fails to load | Use `Run 
®
 onOpen()` from script editor |

| Sheet added dynamically | Add to menu trigger system manually |

---

<h4>
n
 Final Result</h4>

| Scenario | Menu Adapts |

|----------|-------------|

| On user sheet | All tools visible |

| On Home page | Only Help + Summary links |

| Sheet invalid | Fit buttons hidden |

| User unauthorized | Admin panel hidden |

---

<!-- Glossary Terms Referenced:

- Dynamic Menu

- SYSTEM_SHEETS

- isOwner()

- sheetHasTimeColumn()

- Menu Injection

-->

# END SECTION 10.5.9

# START SECTION 10.5.10

<!-- ============================================================ -->

<!-- SECTION 10.5.10 -- Menu Error Handling & User Dialogs -->

<!-- ============================================================ -->

<h3 id="section10_5_10">Section 10.5.10 -- Menu Error Handling & User Dialogs</h3>

<p>

This section covers all user interface elements for error reporting, confirmations, and alerts triggered by 

menu actions. Ensuring users receive clear, helpful feedback is critical for usability, debugging, and 

adoption.

</p>

---

<h4>
nn
 Alert Boxes (Interruptive)</h4>

Use these when user attention is required:

<pre><code>

SpreadsheetApp.getUi().alert("Import failed: file missing time column.");

</code></pre>

| Pros | Cons |

|------|------|

| Always visible | Interrupts flow |

| Works in browser | Not usable in time-based triggers |

---

<h4>
n
 Toast Notifications (Non-blocking)</h4>

Use `toast()` for background confirmation messages:

<pre><code>

SpreadsheetApp.getActiveSpreadsheet().toast("CSV refresh complete", "Physics Tools", 5);

</code></pre>

| Use Case | Example |

|----------|---------|

| Background process finished | fiAll 6 sheets imported.fl |

| Non-critical notice | fiSkipped 1 empty sheet.fl |

---


<h4>
n
 Confirmation Dialogs</h4>

Use `prompt()` or `alert()` with `ButtonSet` to confirm choices:

<pre><code>

const result = SpreadsheetApp.getUi().alert(

  "Confirm Deletion",

  "Do you want to delete negative rows?",

  SpreadsheetApp.getUi().ButtonSet.YES_NO

);

if (result === SpreadsheetApp.getUi().Button.YES) {

  cleanNegativeRows();

}

</code></pre>

---

<h4>
n
 Retry Logic</h4>

Wrap key operations in `try/catch` and notify user if something fails:

<pre><code>

try {

  refreshCSVFiles();

} catch (e) {

  SpreadsheetApp.getUi().alert(`Error during import: ${e.message}`);

}

</code></pre>

---

<h4>
n
 Error Logging (Optional)</h4>

Log error messages to an fiImportLogfl or fiErrorLogfl sheet:

<pre><code>

function logMenuError(context, message) {

  const logSheet = SpreadsheetApp.getActive().getSheetByName("ErrorLog");

  logSheet.appendRow([

    new Date().toLocaleString(),

    context,

    message

  ]);

}

</code></pre>

---

<h4>
n
 Tips for Menu UX</h4>

| Practice | Why It Helps |

|----------|--------------|

| Short alert titles | Reduce clutter |

| Consistent messages | Builds trust |

| Use emojis for status | Quick scan 
n
 
n
 
nn
 |

| Limit toast duration | Avoid overlap |

---

<h4>
n
 Combined Pattern Example</h4>

<pre><code>

function runSafeRefresh() {

  try {

    refreshCSVFiles();

    SpreadsheetApp.getActiveSpreadsheet().toast("Refresh complete 
n
", "CSV Import", 4);

  } catch (e) {

    SpreadsheetApp.getUi().alert("Refresh failed:\n" + e.message);

    logMenuError("refreshCSVFiles", e.message);

  }

}

</code></pre>

---

<h4>
n
 Final Benefits</h4>

| Feature | Result |

|---------|--------|

| Alerts | Stop errors from going unnoticed |

| Toasts | Notify user without interruption |

| Logs | Debug long-term issues |

| Prompts | Confirm actions that can(TM)t be undone |

---

<!-- Glossary Terms Referenced:

- alert()

- toast()

- prompt()

- ErrorLog

- User Feedback

- UI Dialog

-->

# END SECTION 10.5.10

<!-- =============================================== -->

<!-- 10.6.7.1 -- Structure of Output -->

<!-- =============================================== -->


<h3 id="section10_6_7_1">10.6.7.1 -- Structure of Output</h3>

<p>

Before saving a generated <code>.m</code> file to Google Drive, the system organizes the final script into a 

well-defined structure.

This layout ensures readability, compatibility with MATLAB conventions, and ease of interpretation by 

instructors or collaborators.

The standard structure contains three major blocks: <strong>constants</strong>, <strong>model 

definition</strong>, and <strong>metadata</strong>.

</p>

<h4>
n
 Top Section -- Constants</h4>

<ul>

  <li>Declares all scalar variables used in the model</li>

  <li>Includes both regression-derived values and cell-defined constants</li>

  <li>Each line uses format: <code>a = 1.23;</code> with optional comment source</li>

</ul>

<h4>
n
 Middle Section -- Model Definition</h4>

<ul>

  <li>Defines main formula (e.g. <code>y = A * exp(-b * t) * cos(w * t + phi);</code>)</li>

  <li>Supports multi-line expressions and helper functions if needed</li>

  <li>Uses indentation and spacing to improve readability</li>

</ul>

<h4>
n
 Bottom Section -- Metadata Block</h4>

<ul>

  <li>Includes export timestamp and script version (e.g., <code>% Exported: 2025-06-13 -- v5.1</code>)</li>

  <li>May list variable origins (e.g., <code>% from cell B2</code>, <code>% from regression</code>)</li>

  <li>Optional: UID, source sheet, checksum, or Drive link</li>

</ul>

<h4>
n
 Example Block</h4>

<pre><code>

% --- Constants ---

A = 12.3;   % from regression

b = 0.034;  % from cell B2

w = 6.28;

phi = 0.1;

% --- Model Definition ---

y = A * exp(-b * t) * cos(w * t + phi);

% --- Metadata ---

% Exported: 2025-06-13 -- v5.1

% UID: Trial_04_Cart250g

% Source Sheet: Cart_Trial_4

% Generated by Apps Script

</code></pre>

<p>

Next: <a href="#section10_6_7_2">10.6.7.2 -- Export Line Order 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- .m File

- Metadata

- UID

- Regression

- Export

-->

<!-- =============================================== -->

<!-- 10.6.7.2 -- Export Line Order -->

<!-- =============================================== -->

<h3 id="section10_6_7_2">10.6.7.2 -- Export Line Order</h3>

<p>

To ensure consistent structure and readability, all generated <code>.m</code> scripts follow a strict export 

line order.

This convention not only improves human readability but also supports machine parsing and reproducible 

workflows for classroom, research, or grading contexts.

</p>

<h4>
n
 Standard Line Order</h4>

<ol>

  <li><strong>Parameter Declarations:</strong>

    All variables used in the equation are listed first, each on its own line.

    These include both <em>fit-derived</em> and <em>cell-defined</em> values.

  </li>

  <li><strong>Model Formula:</strong>

    The main functional expression is inserted next, generally as a single statement assigning to 

<code>y</code>, <code>f</code>, or similar.

  </li>

  <li><strong>Optional Helper Functions:</strong>

    Any custom sub-functions (e.g., for multi-line logic or nested expressions) are inserted below the main 

model.

  </li>

  <li><strong>Metadata Block:</strong>

    Footer section with timestamp, source info, UID, and optional tags (e.g., <code>% from cell</code>, 


<code>% exported by</code>).

  </li>

</ol>

<h4>
n
 Example Output Order</h4>

<pre><code>

% --- Parameter Declarations ---

A = 11.0;

b = 0.025;

w = 6.5;

phi = 0.3;

% --- Model Formula ---

y = A * exp(-b * t) * cos(w * t + phi);

% --- Metadata ---

% Exported: 2025-06-13 -- v5.1

% From: Sheet Cart_Trial_5

% UID: TRIAL05

% Notes: A from cell B1, rest from regression

</code></pre>

<h4>
n
 Consistency Aids</h4>

<ul>

  <li>All sections are separated by clear comment blocks: <code>% --- Block Name ---</code></li>

  <li>Spacing is applied consistently for ease of editing or review</li>

  <li>Order is enforced programmatically -- no user override by default</li>

</ul>

<p>

Next: <a href="#section10_6_7_3">10.6.7.3 -- Formatting Controls 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Export

- Model Formula

- Parameter Declaration

- Metadata

- .m File

-->

<!-- =============================================== -->

<!-- 10.6.7.3 -- Formatting Controls -->

<!-- =============================================== -->

<h3 id="section10_6_7_3">10.6.7.3 -- Formatting Controls</h3>

<p>

The export system includes automatic formatting controls to ensure all <code>.m</code> files remain clean, 

readable, and compliant with MATLAB syntax standards.

These controls are applied during the final export step and cannot be toggled off unless the user explicitly 

modifies the source code.

</p>

<h4>
n
 Auto-Formatting Rules</h4>

<ul>

  <li><strong>Whitespace Normalization:</strong>

    Removes double spaces, trims line ends, and ensures uniform indentation (2 spaces per nested level).</li>

  <li><strong>Expression Simplification:</strong>

    Redundant brackets are stripped (e.g., <code>((A)) 
®
 A</code>), and trailing semicolons are added if 

missing.</li>

  <li><strong>Scientific Notation Handling:</strong>

    Converts spreadsheet-style <code>1.2E-3</code> into MATLAB-compatible <code>1.2e-3</code> if needed.</li>

</ul>

<h4>
/
n
 Custom Line Overrides</h4>

<ul>

  <li>Advanced users can mark specific lines with <code>%!NOFORMAT</code> to skip formatting logic.</li>

  <li>This is useful when inserting code snippets manually or including complex MATLAB blocks.</li>

  <li>Lines with this tag are copied verbatim into the final output.</li>

</ul>

<h4>
n
 Final Output Validation</h4>

<ul>

  <li>Each exported file is scanned for common errors (e.g., unmatched brackets, unclosed quotes).</li>

  <li>If validation fails, the script halts and presents a user warning with a clickable fiFix Nowfl 

option.</li>

  <li>Validation logs are written to the Error Log sheet with timestamps and details.</li>

</ul>

<p>

Next: <a href="#section10_6_7_4">10.6.7.4 -- Metadata Block Footer 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- .m File

- NOFORMAT

- Metadata

- Error Log

- Export Validation

-->


<!-- =============================================== -->

<!-- 10.6.7.4 -- Metadata Block Footer -->

<!-- =============================================== -->

<h3 id="section10_6_7_4">10.6.7.4 -- Metadata Block Footer</h3>

<p>

At the end of each exported <code>.m</code> file, the system appends a standardized <strong>Metadata Block 

Footer</strong>.

This block documents when, where, and how the file was generated. It serves both as a version trace and as a 

tool for downstream auditing or validation.

</p>

<h4>
n
 What It Includes</h4>

<ul>

  <li><strong>Export Timestamp:</strong> The exact UTC date and time the script was generated (e.g., <code>% 

Exported: 2025-06-13T06:45Z</code>).</li>

  <li><strong>UID Tag:</strong> A unique identifier for the dataset or session (e.g., <code>% UID: 

Cart250g_T4</code>).</li>

  <li><strong>Source Sheet:</strong> The name of the original Google Sheet tab (e.g., <code>% Source: 

Cart_Trial4</code>).</li>

  <li><strong>Script Version:</strong> The internal version that created the file (e.g., <code>% Script 

Version: v5.1</code>).</li>

  <li><strong>Integrity Note (optional):</strong> Placeholder for future SHA or checksum reference (not yet 

implemented).</li>

</ul>

<h4>
n
 Purpose</h4>

<ul>

  <li>Allows educators or collaborators to verify file origin.</li>

  <li>Enables rapid debugging if files behave unexpectedly in MATLAB.</li>

  <li>Facilitates long-term project tracking, especially in multi-export workflows.</li>

</ul>

<h4>
n
 Example Footer</h4>

<pre><code>

% --- Metadata ---

% Exported: 2025-06-13T06:45Z

% UID: Cart250g_T4

% Source: Sheet Cart_Trial4

% Script Version: v5.1

</code></pre>

<p>

Next: <a href="#section10_6_7_5">10.6.7.5 -- Export Warnings & Fallbacks 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Metadata

- UID

- Script Version

- Export

-->

<!-- =============================================== -->

<!-- 10.6.7.5 -- Export Warnings & Fallbacks -->

<!-- =============================================== -->

<h3 id="section10_6_7_5">10.6.7.5 -- Export Warnings & Fallbacks</h3>

<p>

To ensure robustness, the export system includes built-in <strong>warnings</strong> and <strong>fallback 

behaviors</strong> to handle unexpected issues during <code>.m</code> file generation. These measures protect 

against malformed output, user errors, and silent failures.

</p>

<h4>
nn
 Warning Triggers</h4>

<ul>

  <li><strong>Missing Variables:</strong> If any required parameter (e.g., <code>A</code>, <code>w</code>) is 

undefined, a warning is shown and export is aborted.</li>

  <li><strong>Invalid Characters:</strong> Characters that violate MATLAB syntax (e.g., unmatched quotes or 

illegal symbols) trigger an error log entry.</li>

  <li><strong>Empty Model Formula:</strong> If no function body is defined, the system halts export and 

displays a dialog: <em>fiNo model equation present.fl</em></li>

</ul>

<h4>
n
 Fallback Strategies</h4>

<ul>

  <li><strong>Auto-Recovery:</strong> If partial export succeeds, the system saves a backup copy of the 

attempted file with a <code>_FAILED</code> suffix.</li>

  <li><strong>Error Log Output:</strong> Details of what failed and why are written to the fiError Logfl sheet, 

along with timestamps and attempted values.</li>

  <li><strong>Interactive Retry:</strong> A prompt allows the user to revise inputs (e.g., fix formula in cell

 A2) and retry export without reloading the spreadsheet.</li>

</ul>

<h4>
n
 Example Entry in Error Log</h4>

<pre><code>

[2025-06-13 06:47:03] EXPORT FAILURE

Sheet: Cart_Trial_4

Error: Variable 'b' not defined


Resolution: User prompted to fix missing parameter

</code></pre>

<p>

Next: <a href="#section10_7_1_1">10.7.1.1 -- Formula Translation Logic 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Export

- Error Log

- Retry

- Auto-Recovery

- .m File

-->

<!-- =============================================== -->

<!-- 10.7.1.1 -- Formula Translation Logic -->

<!-- =============================================== -->

<h3 id="section10_7_1_1">10.7.1.1 -- Formula Translation Logic</h3>

<p>

The system converts user-entered spreadsheet formulas into executable <code>.m</code> syntax through a multi-

stage <strong>translation engine</strong>. This step is essential for compatibility with MATLAB(TM)s syntax, 

variable naming conventions, and function library.

</p>

<h4>
n
 Translation Workflow</h4>

<ol>

  <li><strong>Tokenization:</strong> The formula string (from cell <code>A2</code> in the fiData Processingfl 

sheet) is parsed into individual tokens: variables, operators, numbers, and functions.</li>

  <li><strong>Substitution:</strong> Spreadsheet-style terms (e.g., <code>^</code>, <code>EXP()</code>, 

<code>PI()</code>) are replaced with MATLAB equivalents (<code>.^</code>, <code>exp()</code>, 

<code>pi</code>).</li>

  <li><strong>Validation:</strong> Each symbol is checked against a whitelist of safe characters and known 

variable names. Invalid items trigger an export warning.</li>

</ol>

<h4>
n
 Supported Operators & Syntax</h4>

<ul>

  <li><code>^</code> 
®
 <code>.^</code> (element-wise power)</li>

  <li><code>*</code> 
®
 unchanged (scalar multiply)</li>

  <li><code>EXP(x)</code> 
®
 <code>exp(x)</code></li>

  <li><code>SIN(x)</code>, <code>COS(x)</code>, etc. 
®
 lowercase MATLAB equivalents</li>

</ul>

<h4>
nn
 Limitations</h4>

<ul>

  <li>Functions must follow spreadsheet-compatible syntax initially (e.g., <code>SIN(A1)</code> not <code>sin 

x</code>).</li>

  <li>Advanced functions (e.g., conditional logic or <code>IF</code> statements) are not currently 

translated.</li>

  <li>All variable names must match declared constants or cell references -- unknown names will break 

export.</li>

</ul>

<p>

Next: <a href="#section10_7_1_2">10.7.1.2 -- Symbol Replacements & Known Functions 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Tokenization

- .m File

- Formula Cell

- Spreadsheet Syntax

- Function Substitution

-->

<!-- =============================================== -->

<!-- 10.7.1.2 -- Symbol Replacements & Known Functions -->

<!-- =============================================== -->

<h3 id="section10_7_1_2">10.7.1.2 -- Symbol Replacements & Known Functions</h3>

<p>

To ensure compatibility between spreadsheet-style formulas and MATLAB execution, the system applies a fixed 

map of <strong>symbol replacements</strong> and recognizes a curated list of <strong>known functions</strong>.

 These mappings are applied during formula parsing before export.

</p>

<h4>
n
 Symbol Replacements</h4>

<table>

  <thead>

    <tr><th>Spreadsheet Symbol</th><th>Replaced With</th></tr>

  </thead>

  <tbody>

    <tr><td><code>^</code></td><td><code>.^</code> (element-wise power)</td></tr>

    <tr><td><code>*</code></td><td><code>*</code> (scalar multiply, unchanged)</td></tr>

    <tr><td><code>/</code></td><td><code>./</code> (element-wise division)</td></tr>

    <tr><td><code>EXP()</code></td><td><code>exp()</code></td></tr>

    <tr><td><code>SIN()</code>, <code>COS()</code>, etc.</td><td><code>sin()</code>, <code>cos()</code> 


(lowercase)</td></tr>

    <tr><td><code>PI()</code></td><td><code>pi</code></td></tr>

  </tbody>

</table>

<h4>
n
 Known Function List</h4>

<p>

The following functions are automatically recognized and translated:

</p>

<ul>

  <li><code>sin()</code>, <code>cos()</code>, <code>tan()</code>, <code>exp()</code>, <code>log()</code>, 

<code>sqrt()</code></li>

  <li><code>abs()</code>, <code>round()</code>, <code>floor()</code>, <code>ceil()</code></li>

  <li><code>pi</code>, <code>e</code> (as constants)</li>

</ul>

<h4>
n
 Notes</h4>

<ul>

  <li>All function names are converted to lowercase automatically.</li>

  <li>Functions must be written using parentheses (e.g., <code>exp(x)</code> not <code>exp x</code>).</li>

  <li>Unsupported functions generate a warning and halt export.</li>

</ul>

<p>

Next: <a href="#section10_7_1_3">10.7.1.3 -- Handling of Variables and Constants 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Function Substitution

- Symbol Mapping

- Spreadsheet Syntax

- .m File

-->

<!-- =============================================== -->

<!-- 10.7.1.3 -- Handling of Variables and Constants -->

<!-- =============================================== -->

<h3 id="section10_7_1_3">10.7.1.3 -- Handling of Variables and Constants</h3>

<p>

During the formula export process, the system carefully distinguishes between <strong>variables</strong> 

(typically from regression or time input) and <strong>constants</strong> (usually user-defined in cells). Each

 is processed differently to ensure valid <code>.m</code> file output and proper alignment with spreadsheet 

data.

</p>

<h4>
n
 Variables</h4>

<ul>

  <li>Common variables include <code>t</code> (time), <code>x</code>, <code>y</code>, etc., often defined 

implicitly by usage in the equation.</li>

  <li>If a variable is not found in the constant map or declared parameters, it is assumed to be a runtime 

variable (e.g., <code>t</code> in <code>cos(w * t)</code>).</li>

  <li>All runtime variables must match a known context or they will trigger a validation warning.</li>

</ul>

<h4>
n
 Constants</h4>

<ul>

  <li>Constants are typically pulled from cells (e.g., <code>B2 = 0.034</code> for <code>b</code>), and 

included as literal declarations in the output.</li>

  <li>The system scans for labeled cell mappings such as fiA = [value]fl or fik = [cell ref]fl.</li>

  <li>Each constant is output as <code>k = 1.23;</code> with optional comment: <code>% from cell 

B2</code>.</li>

</ul>

<h4>
n
 Warnings for Undefined Values</h4>

<ul>

  <li>If a variable or constant appears in the formula but is not defined in cells or regression results, a 

fatal warning is issued.</li>

  <li>All parameters must be mapped or manually added before export.</li>

</ul>

<p>

Next: <a href="#section10_7_1_4">10.7.1.4 -- Error Catching and Token Debugging 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Variable

- Constant

- Cell Mapping

- Formula Parsing

- Export Validation

-->

<!-- =============================================== -->

<!-- 10.7.1.4 -- Error Catching and Token Debugging -->

<!-- =============================================== -->

<h3 id="section10_7_1_4">10.7.1.4 -- Error Catching and Token Debugging</h3>

<p>

As part of the formula translation system, the engine includes a dedicated <strong>error catcher and token 


debugger</strong> to ensure reliability. This component detects malformed expressions, unrecognized elements, 

and syntactical mismatches before the final export to a <code>.m</code> file.

</p>

<h4>
n
 Types of Errors Detected</h4>

<ul>

  <li><strong>Unmatched Symbols:</strong> Parentheses, brackets, or quotes that are opened but not 

closed.</li>

  <li><strong>Invalid Characters:</strong> Use of unsupported symbols such as <code>$</code>, <code>@</code>, 

or <code>,</code> (smart quotes).</li>

  <li><strong>Unknown Tokens:</strong> Variables or function names that are not part of the allowed symbol 

list or declared inputs.</li>

</ul>

<h4>
n
 Debug Token Logging</h4>

<ul>

  <li>When an error is caught, the token stream is dumped to the fiError Logfl sheet for inspection.</li>

  <li>Each token is labeled by type (e.g., <code>VAR</code>, <code>OP</code>, <code>NUM</code>, 

<code>FUNC</code>, <code>ERROR</code>).</li>

  <li>Line-by-line parsing highlights where the translation failed and what corrective action may be 

needed.</li>

</ul>

<h4>
n
 User Feedback</h4>

<ul>

  <li>An on-screen dialog alerts the user to the issue, such as: <code>fiERROR: Unknown function 'COSINE'. Did 

you mean 'cos()'?fl</code></li>

  <li>Guidance may include suggested replacements, links to fix, or line references in the sheet.</li>

  <li>Advanced users can inspect the debug log manually for fine-grained troubleshooting.</li>

</ul>

<p>

Next: <a href="#section10_7_1_5">10.7.1.5 -- Safe Evaluation vs Code Injection Risk 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Token

- Token Debugging

- Error Log

- .m File

- Expression Validation

-->

<!-- =============================================== -->

<!-- 10.7.1.5 -- Safe Evaluation vs Code Injection Risk -->

<!-- =============================================== -->

<h3 id="section10_7_1_5">10.7.1.5 -- Safe Evaluation vs Code Injection Risk</h3>

<p>

To protect both users and the Google Sheets environment, the system enforces strict safeguards during formula 

export to mitigate <strong>code injection risks</strong>. The translation engine never executes formulas--only 

parses and rewrites them as text for export into <code>.m</code> files.

</p>

<h4>
nn
 Core Safety Principles</h4>

<ul>

  <li><strong>No evaluation of spreadsheet input:</strong> All content from the fiData Processingfl sheet (e.g.,

 cell A2) is treated as plain text and never executed within Apps Script.</li>

  <li><strong>Whitelist of characters and tokens:</strong> Only known functions, operators, numbers, and 

approved variables are allowed through parsing.</li>

  <li><strong>No raw JS or shell execution:</strong> Symbols like <code>;</code>, <code>'</code>, 

<code>\`</code>, <code>$()</code>, or script tags are blocked from reaching output without escaping.</li>

</ul>

<h4>
n
 Blacklist Triggers</h4>

<ul>

  <li>Any formula containing JavaScript-style function calls (e.g., <code>alert()</code>, 

<code>console.log()</code>) is rejected.</li>

  <li>Attempts to use shell-like constructs (e.g., <code>!rm -rf</code>) generate an immediate validation 

failure and error log entry.</li>

  <li>Export is halted if dangerous tokens or injection patterns are detected.</li>

</ul>

<h4>
n
 Output Hardening</h4>

<ul>

  <li>All translated formulas are sanitized before being written to Drive.</li>

  <li>The final exported <code>.m</code> file is plain-text only, with no ability to execute malicious 

content.</li>

  <li>For added protection, escaped versions of suspect characters are auto-commented in the metadata block if

 detected.</li>

</ul>

<p>

Next: <a href="#section10_7_2_1">10.7.2.1 -- Regression Parameter Mapping 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Code Injection

- Formula Parsing


- Output Hardening

- Token Validation

- .m File

-->

<!-- =============================================== -->

<!-- 10.7.1.6 -- Unit Normalization & Dimensional Traps -->

<!-- =============================================== -->

<h3 id="section10_7_1_6">10.7.1.6 -- Unit Normalization & Dimensional Traps</h3>

<p>

When translating spreadsheet formulas into executable <code>.m</code> scripts, the system must consider 

<strong>unit normalization</strong> to avoid dimensional errors in model execution. This step is vital when 

users mix milliseconds, seconds, degrees, radians, or raw sensor output.

</p>

<h4>
n
 Normalization Features</h4>

<ul>

  <li>Time inputs (e.g., <code>t</code>) are assumed to be in milliseconds unless declared otherwise.</li>

  <li>If the template contains <code>w * t</code>, the system automatically adjusts for radian consistency if 

configured to do so.</li>

  <li>Users may tag a cell with <code>[unit: s]</code> or <code>[unit: ms]</code> to override the default 

assumption.</li>

</ul>

<h4>
nn
 Dimensional Pitfalls</h4>

<ul>

  <li>Common mistakes include mixing raw distance data (e.g., cm) with velocity formulas that assume SI base 

units.</li>

  <li>Trigonometric functions are sensitive to unit mismatches -- cosine expects radians, not degrees.</li>

  <li>Exported files include comment warnings if inconsistent units are detected or implied.</li>

</ul>

<h4>
n
 Best Practices</h4>

<ul>

  <li>Always normalize time to seconds in your equations (e.g., <code>t/1000</code> if raw input is in 

ms).</li>

  <li>Declare expected units in adjacent cells or in formula comments (e.g., <code>% t in 

seconds</code>).</li>

</ul>

<p>

Next: <a href="#section10_7_1_7">10.7.1.7 -- Function Subset Whitelisting 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Unit Normalization

- Dimensional Trap

- Milliseconds vs Seconds

- Export Comment Warnings

- Trig Function Radians

-->

<!-- =============================================== -->

<!-- 10.7.1.7 -- Function Subset Whitelisting -->

<!-- =============================================== -->

<h3 id="section10_7_1_7">10.7.1.7 -- Function Subset Whitelisting</h3>

<p>

For security and stability, only a tightly controlled <strong>whitelist of functions</strong> is permitted 

during formula translation. This list ensures that exported <code>.m</code> files contain only safe, verified 

expressions compatible with standard MATLAB usage and pedagogical environments.

</p>

<h4>
n
 Allowed Function Groups</h4>

<ul>

  <li><strong>Trigonometric:</strong> <code>sin()</code>, <code>cos()</code>, <code>tan()</code></li>

  <li><strong>Exponential & Logarithmic:</strong> <code>exp()</code>, <code>log()</code>, 

<code>sqrt()</code></li>

  <li><strong>Numeric:</strong> <code>abs()</code>, <code>round()</code>, <code>floor()</code>, 

<code>ceil()</code></li>

</ul>

<h4>
n
 Disallowed Functions</h4>

<ul>

  <li>Advanced control structures like <code>if()</code>, <code>while</code>, and <code>switch</code> are 

<em>not allowed</em>.</li>

  <li>System commands or file operations (e.g., <code>fopen</code>, <code>system()</code>) are blocked 

entirely.</li>

  <li>Custom user functions must be declared explicitly outside the formula engine.</li>

</ul>

<h4>
n
 Detection Behavior</h4>

<ul>

  <li>Any formula using non-whitelisted functions is flagged with a validation error.</li>

  <li>The error message includes a list of unsupported items and suggested replacements.</li>

  <li>Disallowed terms are recorded in the Error Log for traceability and debugging.</li>

</ul>

<p>

Next: <a href="#section10_7_2_6">10.7.2.6 -- Nested Model Support 
nn
</a>


</p>

<!--

Glossary Terms Referenced:

- Whitelist

- Function Security

- Disallowed Expressions

- MATLAB Function Safety

- .m Export Rules

-->

<!-- =============================================== -->

<!-- 10.7.2.1 -- Regression Parameter Mapping -->

<!-- =============================================== -->

<h3 id="section10_7_2_1">10.7.2.1 -- Regression Parameter Mapping</h3>

<p>

Once a regression is completed, the resulting parameters (e.g., <code>A</code>, <code>b</code>, 

<code>w</code>, <code>phi</code>) must be <strong>mapped correctly</strong> into the export structure. This 

mapping process assigns each parameter a symbolic name and numerical value for inclusion in the generated 

<code>.m</code> script.

</p>

<h4>
n
 Mapping Workflow</h4>

<ul>

  <li>The regression engine returns an array of fitted coefficients in a known order (e.g., [A, b, w, 

phi]).</li>

  <li>A <strong>parameter map</strong> (object or dictionary) assigns each coefficient to a symbol defined by 

the user or template.</li>

  <li>Each mapped symbol is injected into the top of the export script as a literal declaration: <code>A = 

1.23;</code></li>

</ul>

<h4>
n
 Example Mapping</h4>

<p>Given a regression result: <code>[12.5, 0.043, 6.28, 0.1]</code> and template: <code>A, b, w, 

phi</code></p>

<pre><code>

% --- Constants ---

A = 12.5;   % from regression

b = 0.043;

w = 6.28;

phi = 0.1;

</code></pre>

<h4>
nn
 Notes and Customization</h4>

<ul>

  <li>Users may override parameter symbols manually in the Data Processing sheet (e.g., rename <code>b</code> 

to <code>k</code>).</li>

  <li>If a mapping is incomplete, the system prompts the user to supply missing symbol names before 

export.</li>

  <li>Multiple regression outputs (e.g., for blended models) are supported by assigning indexed or grouped 

labels (e.g., <code>A1</code>, <code>A2</code>).</li>

</ul>

<p>

Next: <a href="#section10_7_2_2">10.7.2.2 -- Handling Missing or Partial Parameters 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Parameter Mapping

- Regression

- Coefficients

- .m File

- Data Processing Sheet

-->

<!-- =============================================== -->

<!-- 10.7.2.2 -- Handling Missing or Partial Parameters -->

<!-- =============================================== -->

<h3 id="section10_7_2_2">10.7.2.2 -- Handling Missing or Partial Parameters</h3>

<p>

In some cases, the regression output may be <strong>incomplete</strong> or contain fewer parameters than 

expected. This sub-system gracefully handles such scenarios by offering fallback behaviors, user prompts, and 

safety checks before generating the final <code>.m</code> file.

</p>

<h4>
n
 When Parameters Are Missing</h4>

<ul>

  <li>If a required symbol (e.g., <code>w</code> or <code>phi</code>) has no corresponding regression output, 

a warning is triggered.</li>

  <li>The system logs the missing parameter to the fiError Logfl sheet and prevents export until resolved.</li>

  <li>Users are given a chance to define missing parameters manually via cell references in the Data 

Processing sheet.</li>

</ul>

<h4>
n
 Optional Parameters</h4>

<ul>

  <li>If the template supports optional terms (e.g., damping offset <code>D</code>), the script can export a 

simplified version if that value is missing.</li>


  <li>Each optional symbol is listed with a placeholder comment: <code>% D = [missing]</code>.</li>

  <li>This keeps the output file structurally complete even if all values are not present.</li>

</ul>

<h4>
n
 Blocking vs Skippable</h4>

<ul>

  <li>Missing <em>required</em> parameters (used in the formula) will block export with a dialog and line 

reference.</li>

  <li>Missing <em>unused</em> parameters (not referenced in the model) will be skipped silently.</li>

  <li>This avoids unnecessary interruptions for simplified models.</li>

</ul>

<p>

Next: <a href="#section10_7_2_3">10.7.2.3 -- Parameter Commenting and Source Tracing 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Parameter Mapping

- Optional Parameter

- Data Processing Sheet

- Error Log

- .m File Export

-->

<!-- =============================================== -->

<!-- 10.7.2.3 -- Parameter Commenting and Source Tracing -->

<!-- =============================================== -->

<h3 id="section10_7_2_3">10.7.2.3 -- Parameter Commenting and Source Tracing</h3>

<p>

To improve transparency and traceability, each parameter declared in the exported <code>.m</code> file 

includes an optional <strong>comment tag</strong> identifying its source. This helps distinguish values 

derived from regression fits versus those entered manually in the spreadsheet.

</p>

<h4>
nn
 Comment Sources</h4>

<ul>

  <li><strong>fifrom regressionfl</strong> 
®
 Auto-fitted by the model, extracted from algorithm output.</li>

  <li><strong>fifrom cell B2fl</strong> 
®
 User-defined constant linked to a spreadsheet cell (address auto-

detected).</li>

  <li><strong>fimissing (manual entry required)fl</strong> 
®
 Placeholder for undefined but expected 

parameter.</li>

</ul>

<h4>
n
 Example Output with Comments</h4>

<pre><code>

% --- Constants ---

A = 11.5;       % from regression

b = 0.032;      % from cell B2

phi = 0.4;      % missing (manual entry required)

</code></pre>

<h4>
n
 Traceability in Export Logs</h4>

<ul>

  <li>Every declared parameter is also listed in the internal export log with its source, numeric value, and 

assigned symbol.</li>

  <li>These records help with debugging, classroom review, and reproducibility.</li>

  <li>Future versions may include clickable links back to the source cell for user convenience.</li>

</ul>

<p>

Next: <a href="#section10_7_2_4">10.7.2.4 -- Value Formatting and Precision Control 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Parameter Commenting

- Source Tracing

- Regression Parameter

- Export Logs

- .m File Declaration

-->

<!-- =============================================== -->

<!-- 10.7.2.4 -- Value Formatting and Precision Control -->

<!-- =============================================== -->

<h3 id="section10_7_2_4">10.7.2.4 -- Value Formatting and Precision Control</h3>

<p>

To maintain numerical accuracy while ensuring readability in exported <code>.m</code> files, the system 

applies configurable <strong>value formatting</strong> and <strong>precision control</strong> for all numeric 

declarations. This ensures that constants like <code>b = 0.034</code> are neither overly truncated nor 

cluttered with excessive decimals.

</p>

<h4>
n
 Default Formatting Behavior</h4>

<ul>

  <li>By default, all numeric values are rounded to <strong>6 significant figures</strong>.</li>

  <li>Trailing zeros are removed unless required for clarity (e.g., <code>1.200</code> 
®
 

<code>1.2</code>).</li>

  <li>Scientific notation is used for small values: <code>1.2e-4</code> instead of <code>0.00012</code>.</li>


</ul>

<h4>
nn
 Precision Settings</h4>

<ul>

  <li>Users can override the default rounding by entering a desired precision in a hidden settings cell (e.g.,

 <code>__precision = 4</code>).</li>

  <li>If set, this applies to all constants and regression values during export.</li>

  <li>Settings can be adjusted per sheet or globally across the document using script configuration.</li>

</ul>

<h4>
n
 Output Example</h4>

<pre><code>

A = 12.3456;     % from regression

b = 3.2e-4;      % from cell B2

k = 0.781;       % manually entered

</code></pre>

<p>

Next: <a href="#section10_7_2_5">10.7.2.5 -- Template Alignment and Substitution 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Precision Control

- Value Formatting

- Scientific Notation

- Parameter Declaration

- .m File Output

-->

<!-- =============================================== -->

<!-- 10.7.2.5 -- Template Alignment and Substitution -->

<!-- =============================================== -->

<h3 id="section10_7_2_5">10.7.2.5 -- Template Alignment and Substitution</h3>

<p>

To ensure that exported equations conform to user expectations and MATLAB syntax, the system supports flexible

 <strong>template alignment</strong> and <strong>symbol substitution</strong>. This allows users to define 

which symbols should appear in the final <code>.m</code> file and how they map to regression results or 

constants.

</p>

<h4>
n
 Template Input</h4>

<ul>

  <li>Users can define a template expression (e.g., <code>y = A * exp(-b * t) * cos(w * t + phi)</code>) in 

the Data Processing sheet (typically cell <code>A2</code>).</li>

  <li>This formula acts as a blueprint -- all parameters within must be satisfied by either regression outputs 

or defined constants.</li>

  <li>If a required symbol is not found, a warning halts the export process.</li>

</ul>

<h4>
n
 Symbol Substitution Logic</h4>

<ul>

  <li>The system maps regression results to symbolic names (e.g., <code>param[0]</code> 
®
 <code>A</code>), 

replacing placeholders accordingly.</li>

  <li>If a user uses different symbols (e.g., <code>k</code> instead of <code>b</code>), they can define this 

mapping explicitly in the sheet.</li>

  <li>All substitutions are logged for traceability and debugging.</li>

</ul>

<h4>
n
 Smart Fallbacks</h4>

<ul>

  <li>Unused regression values are ignored unless referenced in the template.</li>

  <li>Extra template parameters not used in the equation are silently omitted but listed in the metadata block

 if flagged.</li>

</ul>

<p>

Next: <a href="#section10_7_3_1">10.7.3.1 -- Auto-Naming Convention for Exported Files 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Template Alignment

- Symbol Substitution

- Export Blueprint

- Regression Parameter Mapping

- .m File Template

-->

<!-- =============================================== -->

<!-- 10.7.2.6 -- Nested Model Support -->

<!-- =============================================== -->

<h3 id="section10_7_2_6">10.7.2.6 -- Nested Model Support</h3>

<p>

Certain experimental designs require <strong>nested models</strong>, where one formula depends on the output 

of another. The system accommodates this by allowing staged evaluation and layering of sub-functions in the 

export process for <code>.m</code> scripts.

</p>

<h4>
nn
 Structure of Nested Models</h4>

<ul>


  <li>Each sub-formula is defined with a unique label (e.g., <code>z = A * exp(-b * t)</code>), followed by a 

parent formula (e.g., <code>y = z * cos(w * t)</code>).</li>

  <li>Declarations are ordered top-down to ensure MATLAB parses correctly.</li>

  <li>Intermediate expressions may be reused in multiple final expressions.</li>

</ul>

<h4>
n
 Example Output</h4>

<pre><code>

z = A * exp(-b * t);       % nested component

y = z * cos(w * t + phi);  % final output

</code></pre>

<h4>
nn
 How to Use</h4>

<ul>

  <li>Enter each formula in its own row in the Data Processing sheet (e.g., A2 = z-formula, A3 = 

y-formula).</li>

  <li>Use consistent symbolic references across expressions.</li>

  <li>The system parses rows in sequence and builds dependency-aware output.</li>

</ul>

<p>

Next: <a href="#section10_7_2_7">10.7.2.7 -- Multi-Formula Sheet Modes 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Nested Models

- Staged Evaluation

- Sub-Function

- Formula Dependency

- Data Processing Sheet

-->

<!-- =============================================== -->

<!-- 10.7.2.7 -- Multi-Formula Sheet Modes -->

<!-- =============================================== -->

<h3 id="section10_7_2_7">10.7.2.7 -- Multi-Formula Sheet Modes</h3>

<p>

For advanced workflows, the system supports <strong>multi-formula sheets</strong> -- allowing users to define 

and export multiple independent or related models from the same Data Processing sheet. This feature is ideal 

for comparative regression, bifurcation analysis, or ensemble modeling.

</p>

<h4>
n
 Supported Modes</h4>

<ul>

  <li><strong>Parallel Mode:</strong> Each row defines a separate model (e.g., A2 = y1(t), A3 = y2(t), etc.). 

All are exported into the same <code>.m</code> file sequentially.</li>

  <li><strong>Series Mode:</strong> Formulas depend on outputs of previous rows (e.g., y2 = f(y1, t)). This 

mimics functional chains.</li>

  <li><strong>Selective Mode:</strong> User tags certain rows (e.g., <code>[export]</code>) to include only 

specific models.</li>

</ul>

<h4>
n
 Export Layout</h4>

<ul>

  <li>Each formula receives its own block with clear comments and parameter declarations.</li>

  <li>Metadata includes model count, ordering, and source row references (e.g., <code>% from A3</code>).</li>

  <li>Files are named using UID suffixes or appended numbers (e.g., <code>model_1.m</code>, 

<code>model_2.m</code>).</li>

</ul>

<h4>
n
 Enable Multi-Formula Mode</h4>

<ul>

  <li>Set <code>__multi_formula = true</code> in the sheet header row.</li>

  <li>Ensure each row with a formula includes all needed variables or references prior outputs.</li>

</ul>

<p>

Next: <a href="#section10_7_3_1">10.7.3.1 -- Auto-Naming Convention for Exported Files 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Multi-Formula Mode

- Parallel Export

- Sequential Export

- UID Suffix

- Data Processing Sheet

-->

<!-- =============================================== -->

<!-- 10.7.3.1 -- Auto-Naming Convention for Exported Files -->

<!-- =============================================== -->

<h3 id="section10_7_3_1">10.7.3.1 -- Auto-Naming Convention for Exported Files</h3>

<p>

Each <code>.m</code> file generated by the script is assigned a unique filename using an <strong>auto-naming 

convention</strong>. This ensures files are identifiable, organized, and safe from accidental overwrite. 

Naming is based on metadata such as sheet name, timestamp, model UID, and export index.

</p>

<h4>
n
 Default Naming Format</h4>


<pre><code>

Model_SpringTrial_B3_uid1932A.m

</code></pre>

<ul>

  <li><code>Model_SpringTrial</code> 
®
 Extracted from sheet name or user-defined input.</li>

  <li><code>B3</code> 
®
 Indicates the row that triggered export (useful for tracing).</li>

  <li><code>uid1932A</code> 
®
 Unique 5OE6 character identifier for tracking (see 10.7.3.2).</li>

</ul>

<h4>
nn
 Custom Filename Field</h4>

<ul>

  <li>Users can override the default format by specifying a filename in column fiExport Namefl.</li>

  <li>Custom names still append the UID unless explicitly suppressed via setting.</li>

  <li>Illegal filename characters are automatically removed.</li>

</ul>

<p>

Next: <a href="#section10_7_3_2">10.7.3.2 -- UID Tagging and Metadata Header 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.7.3.2 -- UID Tagging and Metadata Header -->

<!-- =============================================== -->

<h3 id="section10_7_3_2">10.7.3.2 -- UID Tagging and Metadata Header</h3>

<p>

Every export includes a unique identifier (UID) embedded in both the filename and the file(TM)s metadata header. 

This <strong>UID tagging</strong> ensures every model can be traced to its origin and linked with logs, 

validations, or previous runs.

</p>

<h4>
n
 UID Format and Purpose</h4>

<ul>

  <li>UIDs are generated using timestamp hashes (e.g., <code>uid1932A</code>).</li>

  <li>They appear in the filename, export logs, and comment headers within the script.</li>

  <li>Essential for supporting undo/redo, version recovery, and export lineage.</li>

</ul>

<h4>
n
 Metadata Header Block</h4>

<pre><code>

% --- Export Metadata ---

% File: Model_SpringTrial_B3_uid1932A.m

% UID: 1932A

% Exported from: Sheet fiSpringTrialfl, Row B3

% Date: 2025-06-13 14:32

</code></pre>

<p>

Next: <a href="#section10_7_3_3">10.7.3.3 -- Filename Conflicts and Overwrite Prompts 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.7.3.3 -- Filename Conflicts and Overwrite Prompts -->

<!-- =============================================== -->

<h3 id="section10_7_3_3">10.7.3.3 -- Filename Conflicts and Overwrite Prompts</h3>

<p>

When exporting scripts, filename conflicts may occur if a file with the same name already exists in the target

 folder. To prevent accidental overwrites, the system includes an <strong>overwrite safeguard 

mechanism</strong>.

</p>

<h4>
nn
 Conflict Detection Workflow</h4>

<ul>

  <li>Before export, the script checks the Drive folder for matching filenames.</li>

  <li>If a match is found, the user is prompted to:

    <ul>

      <li>
nn
 Overwrite</li>

      <li>
n
 Rename</li>

      <li>
n
 Cancel export</li>

    </ul>

  </li>

</ul>

<h4>
n
 Overwrite Safety Features</h4>

<ul>

  <li>The system auto-backups the original file before overwriting (see 10.15.1.2).</li>

  <li>A UID is preserved even across overwrite operations to maintain continuity.</li>

  <li>Warnings appear in the sidebar and Export Log when overwrites occur.</li>

</ul>

<p>

Next: <a href="#section10_7_4_1">10.7.4.1 -- Drive Folder Linking and Sheet Matching 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- UID Tagging

- Filename Conflict

- Overwrite Protection

- Metadata Block

- Export Log Traceability


-->

<!-- =============================================== -->

<!-- 10.7.3.4 -- Template Mapping for Header Comments -->

<!-- =============================================== -->

<h3 id="section10_7_3_4">10.7.3.4 -- Template Mapping for Header Comments</h3>

<p>

To improve clarity and documentation of exported <code>.m</code> scripts, a <strong>template-to-header 

mapping</strong> is applied. This inserts human-readable comments at the top of each file to explain variable 

meaning, formula source, and symbolic translation.

</p>

<h4>
n
 Template Mapping Workflow</h4>

<ul>

  <li>Each parameter or variable is scanned against the original formula in the sheet.</li>

  <li>If found, its symbolic representation is logged (e.g., <code>A = Amplitude</code>).</li>

  <li>Constants defined via <code>param = value</code> in adjacent cells are also included.</li>

</ul>

<h4>
n
 Example Header Block</h4>

<pre><code>

% --- Model Description ---

% Formula: y = A * exp(-b * t) * cos(w * t + phi)

% A = Amplitude

% b = Damping coefficient

% w = Angular frequency

% phi = Phase shift

</code></pre>

<p>

This mapping improves <strong>interpretability</strong> for students and educators reviewing the output.

</p>

<p>

Next: <a href="#section10_7_3_5">10.7.3.5 -- Sorting by Export Order in Logs 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.7.3.5 -- Sorting by Export Order in Logs -->

<!-- =============================================== -->

<h3 id="section10_7_3_5">10.7.3.5 -- Sorting by Export Order in Logs</h3>

<p>

To maintain a coherent audit trail, the system supports sorting the <code>Export Log</code> by the order in 

which models were generated. This ensures that batch exports are reviewed in sequence and traceable to script 

execution order.

</p>

<h4>
n
 How It Works</h4>

<ul>

  <li>Each export is timestamped precisely at the moment of file creation.</li>

  <li>A hidden counter or incremental index is stored in the log row metadata.</li>

  <li>Sorting options include:

    <ul>

      <li>
n
 By Timestamp (default)</li>

      <li>
n
 By Export Index</li>

      <li>
n
 By Model Name</li>

    </ul>

  </li>

</ul>

<h4>
n
 Log Table Preview</h4>

<pre><code>

| Export # | File Name           | UID     | Time       |

|----------|---------------------|---------|------------|

| 001      | SpringModel_uid1.m  | uid1    | 14:32:01   |

| 002      | SpringModel_uid2.m  | uid2    | 14:32:05   |

</code></pre>

<p>

User can change sorting mode via the Export tab menu or config cell (e.g., <code>__sort = time</code>).

</p>

<p>

Next: <a href="#section10_7_3_6">10.7.3.6 -- Enable ZIP Export Bundle 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.7.3.6 -- Enable ZIP Export Bundle -->

<!-- =============================================== -->

<h3 id="section10_7_3_6">10.7.3.6 -- Enable ZIP Export Bundle</h3>

<p>

For convenient sharing and offline use, users can choose to <strong>bundle all exported <code>.m</code> files 

into a ZIP archive</strong>. This feature is especially useful for submitting lab results, archiving large 

batch exports, or importing into MATLAB in one step.

</p>

<h4>
n
 How to Enable</h4>

<ul>

  <li>Set <code>__zip_export = true</code> in the config sheet or trigger cell.</li>

  <li>All successfully exported files are added to a virtual archive using the Drive API.</li>


  <li>The ZIP file is saved in the same folder with a name like <code>Export_Batch_YYYYMMDD.zip</code>.</li>

</ul>

<h4>
n
 Technical Details</h4>

<ul>

  <li>ZIP creation uses temporary blobs for each file, then compresses them using 

<code>Utilities.zip()</code>.</li>

  <li>Files are listed in the archive with UID-tagged filenames.</li>

  <li>Export summary (log) is included in the ZIP as <code>README.txt</code>.</li>

</ul>

<p>

Next: <a href="#section10_7_4_1">10.7.4.1 -- Drive Folder Linking and Sheet Matching 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Export Header Mapping

- Export Log Sort

- ZIP Export

- Export Batch Log

-->

<!-- =============================================== -->

<!-- 10.7.4.1 -- Drive Folder Linking and Sheet Matching -->

<!-- =============================================== -->

<h3 id="section10_7_4_1">10.7.4.1 -- Drive Folder Linking and Sheet Matching</h3>

<p>

The export process is integrated with a structured folder management system using the 

<code>FOLDER_CONFIG</code> object. Each CSV-imported sheet must be <strong>linked to its source 

folder</strong> to maintain traceability, simplify updates, and ensure accurate sorting during export.

</p>

<h4>
n
 Linking Sheets to Folders</h4>

<ul>

  <li>Each imported sheet includes hidden metadata (via the Home Page or script) that tags it with the 

original Drive Folder ID.</li>

  <li>This is used to auto-route exported <code>.m</code> files back into their matching folder.</li>

  <li>Users may manually override export paths using a special fiExport Tofl cell if needed.</li>

</ul>

<h4>
n
 Matching Algorithm</h4>

<ul>

  <li>Sheet name is cross-referenced with folder map using <code>getFolderInfoForSheet()</code>.</li>

  <li>If no match is found, fallback logic sends file to the default folder or prompts the user.</li>

</ul>

<p>

Ensuring this mapping is correctly configured is critical to avoid export errors and maintain a reproducible 

pipeline.

</p>

<p>

Next: <a href="#section10_7_4_2">10.7.4.2 -- Folder Color Matching and Tab Updates 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.7.4.2 -- Folder Color Matching and Tab Updates -->

<!-- =============================================== -->

<h3 id="section10_7_4_2">10.7.4.2 -- Folder Color Matching and Tab Updates</h3>

<p>

To improve visual organization and quick identification, each folder listed in <code>FOLDER_CONFIG</code> is 

assigned a color. When sheets are imported or home pages are created, the script will <strong>auto-apply 

matching tab colors</strong> to the corresponding Google Sheet tabs.

</p>

<h4>
n
 Color Matching Features</h4>

<ul>

  <li>Each folder in the config file includes a <code>color</code> field (hex format).</li>

  <li>Imported sheets and fiHome_[Folder]fl sheets receive this color automatically.</li>

  <li>If a sheet is renamed or moved, the system can recheck and reapply colors using 

<code>createHomePagesForAllFolders()</code>.</li>

</ul>

<h4>
nn
 Manual Override Options</h4>

<ul>

  <li>Users may temporarily change tab color manually for visual grouping.</li>

  <li>Running the home page script will reset them based on config.</li>

</ul>

<p>

Color cues are especially helpful when working with many imported files -- they allow fast sorting by 

experiment group.

</p>

<p>

Next: <a href="#section10_7_4_3">10.7.4.3 -- Auto-Sync Folder Config Changes 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.7.4.3 -- Auto-Sync Folder Config Changes -->

<!-- =============================================== -->


<h3 id="section10_7_4_3">10.7.4.3 -- Auto-Sync Folder Config Changes</h3>

<p>

If the <code>FOLDER_CONFIG</code> object is modified -- for example, by adding a new folder or changing color 

assignments -- those changes can be propagated automatically to all relevant sheets and UI elements using the 

<strong>auto-sync system</strong>.

</p>

<h4>
n
 Auto-Sync Capabilities</h4>

<ul>

  <li>Updates fiHome_[Folder]fl tabs with new metadata: name, color, order, folder ID.</li>

  <li>Recolors existing tabs that match updated folder links.</li>

  <li>Adjusts sorting in menus and sheet order functions to reflect the new config order.</li>

</ul>

<h4>
n
 How to Trigger</h4>

<ul>

  <li>Run <code>createHomePagesForAllFolders()</code> or select fiRefresh Folder Linksfl from the menu.</li>

  <li>Scripts scan the active spreadsheet and match tab names to updated folder info.</li>

  <li>Mismatch alerts are shown in a modal if a linked folder no longer exists.</li>

</ul>

<p>

Keeping folder configuration synchronized avoids broken exports, misrouted files, and user confusion.

</p>

<p>

Next: <a href="#section10_7_5_1">10.7.5.1 -- Logging Export Destinations 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- FOLDER_CONFIG

- Folder Link

- Tab Color

- Auto-Sync

- Drive Folder Metadata

-->

<!-- =============================================== -->

<!-- 10.7.4.4 -- Smart Sorting of Folder Index -->

<!-- =============================================== -->

<h3 id="section10_7_4_4">10.7.4.4 -- Smart Sorting of Folder Index</h3>

<p>

Folder ordering in the system is governed by the <code>order</code> field in <code>FOLDER_CONFIG</code>. The 

fismart sortfl system ensures that tabs and menu items are displayed in a user-defined, logical order, rather 

than alphabetically or by import time.

</p>

<h4>
n
 Sorting Logic</h4>

<ul>

  <li>Each folder has a numeric <code>order</code> key (e.g., 1 = fiCartfl, 2 = fiCart + 250gfl, etc.).</li>

  <li>Home page tabs, dropdowns, and log tables respect this ordering via 

<code>sortFoldersByOrder()</code>.</li>

  <li>If two folders share the same order index, alphabetical fallback is applied.</li>

</ul>

<h4>
n
 Where Order Affects Behavior</h4>

<ul>

  <li>Menu display order for folder-based commands</li>

  <li>Sidebar drop-downs in the regression or import tools</li>

  <li>Sheet tab placement (if using auto-reorder)</li>

</ul>

<p>

Maintaining a clean, intentional order improves clarity when analyzing multiple configurations or mass data 

imports.

</p>

<p>

Next: <a href="#section10_7_4_5">10.7.4.5 -- Detect Orphaned Sheets 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.7.4.5 -- Detect Orphaned Sheets -->

<!-- =============================================== -->

<h3 id="section10_7_4_5">10.7.4.5 -- Detect Orphaned Sheets</h3>

<p>

An <strong>orphaned sheet</strong> is one that was imported via CSV or created from a folder but no longer has

 a corresponding folder entry in <code>FOLDER_CONFIG</code>. This can happen if a folder was renamed, removed,

 or manually deleted.

</p>

<h4>
nn
 How Orphans Are Detected</h4>

<ul>

  <li>Each sheet stores its linked folder via hidden metadata or tab label.</li>

  <li>The function <code>detectOrphanedSheets()</code> compares this metadata to 

<code>FOLDER_CONFIG</code>.</li>

  <li>Missing matches trigger a warning dialog and log entry in the fiError Logfl.</li>

</ul>

<h4>
nn
 Example Errors Logged</h4>


<pre><code>

Sheet fiCart_Trial5fl 
®
 No matching folder in config

Sheet fiSensorRun13fl 
®
 Folder ID removed or missing

</code></pre>

<p>

Prompt handling of orphaned sheets is key to avoiding lost data routing or export misfires.

</p>

<p>

Next: <a href="#section10_7_4_6">10.7.4.6 -- Manual Override of Folder Assignment 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.7.4.6 -- Manual Override of Folder Assignment -->

<!-- =============================================== -->

<h3 id="section10_7_4_6">10.7.4.6 -- Manual Override of Folder Assignment</h3>

<p>

In certain cases, users may want to override the default folder linkage for an individual sheet. For example, 

to reassign an import from one experiment folder to another without editing the <code>FOLDER_CONFIG</code> 

globally.

</p>

<h4>
-
n
 Methods of Override</h4>

<ul>

  <li>Add a cell in the sheet named <code>__folder_override</code> with a valid folder name or ID.</li>

  <li>Use the menu option fiReassign Sheet to Folder—fl which opens a folder picker UI.</li>

  <li>Set the tab name to include a marker: <code>[
®
 Cart + 0.750kg]</code> (optional shorthand).</li>

</ul>

<h4>
n
 Effects of Override</h4>

<ul>

  <li>Export destination is changed for that sheet only.</li>

  <li>Tab color and metadata header update to reflect the new folder.</li>

  <li>Logging will still reference the new assigned folder correctly.</li>

</ul>

<p>

This feature supports temporary reassignment without needing admin access to system config.

</p>

<p>

Next: <a href="#section10_7_5_1">10.7.5.1 -- Logging Export Destinations 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- FOLDER_CONFIG

- Folder Order

- Orphaned Sheet

- Folder Override

-->

<!-- =============================================== -->

<!-- 10.7.5.1 -- Logging Export Destinations -->

<!-- =============================================== -->

<h3 id="section10_7_5_1">10.7.5.1 -- Logging Export Destinations</h3>

<p>

Each time a script is exported as a MATLAB <code>.m</code> file, a corresponding log entry is created in the 

fiExport Logfl sheet. This log tracks exactly where each file was sent, ensuring reproducibility and 

transparency across the export process.

</p>

<h4>
nn
 What Gets Logged</h4>

<ul>

  <li>Sheet name and linked folder</li>

  <li>Final exported filename</li>

  <li>Destination folder ID or name</li>

  <li>Timestamp of export event</li>

</ul>

<h4>
nn
 Core Logging Function</h4>

<p>

The function <code>logExport(sheetName, fileName, folderId)</code> appends this data as a new row in the 

fiExport Logfl tab. It ensures all exports, including retries and overrides, are recorded for auditing.

</p>

<p>

Next: <a href="#section10_7_5_2">10.7.5.2 -- Filename + Sheet Reference in Log 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.7.5.2 -- Filename + Sheet Reference in Log -->

<!-- =============================================== -->

<h3 id="section10_7_5_2">10.7.5.2 -- Filename + Sheet Reference in Log</h3>

<p>

The export log includes both the <strong>Google Sheet tab name</strong> and the <strong>generated 

filename</strong> for each exported MATLAB file. This allows reverse-tracing from Drive folders back to sheet 

origins.

</p>

<h4>
n
 Format</h4>


<pre><code>

| Sheet       | Export Filename     | Folder     | Timestamp           |

|-------------|---------------------|------------|---------------------|

| Trial_03    | Trial_03_model.m    | Cart + 0.5 | 2025-06-12 14:38:00 |

</code></pre>

<h4>
n
 Reference Integrity</h4>

<ul>

  <li>Sheet names are hyperlinked directly to the tab using <code>=HYPERLINK()</code> with 

<code>gid</code>.</li>

  <li>Filenames use a normalization function to ensure consistency.</li>

  <li>Filename mismatches across exports are flagged as warnings.</li>

</ul>

<p>

This dual logging makes debugging much easier if exported files are misplaced, renamed, or improperly routed.

</p>

<p>

Next: <a href="#section10_7_5_3">10.7.5.3 -- Error Handling in Log Entries 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.7.5.3 -- Error Handling in Log Entries -->

<!-- =============================================== -->

<h3 id="section10_7_5_3">10.7.5.3 -- Error Handling in Log Entries</h3>

<p>

When an export attempt fails -- due to permission errors, folder mismatches, or scripting issues -- the system 

captures this event in the Export Log with a corresponding error label and message.

</p>

<h4>
nn
 Failure Entries</h4>

<pre><code>

| Sheet     | Export Filename | Folder       | Timestamp           | Status  | Notes                     |

|-----------|------------------|--------------|---------------------|---------|---------------------------|

| Trial_07  | Trial_07_model.m | Unknown      | 2025-06-12 15:02:10 | 
n
 FAIL | Folder ID invalid/missing |

</code></pre>

<h4>
nn
 Implementation</h4>

<ul>

  <li><code>logExportError()</code> is called from the export function if <code>DriveApp.createFile()</code> 

fails or returns an invalid file.</li>

  <li>Error entries are shown in red in the Export Log via conditional formatting.</li>

  <li>Severe errors are also recorded in the fiError Logfl tab for visibility.</li>

</ul>

<p>

This system ensures no export operation fails silently and all issues are traceable for remediation.

</p>

<p>

Next: <a href="#section10_7_5_4">10.7.5.4 -- Export Summary by Folder 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Export Log

- Export Filename

- Folder Link

- Error Log

-->

<!-- =============================================== -->

<!-- 10.7.5.4 -- Export Summary by Folder -->

<!-- =============================================== -->

<h3 id="section10_7_5_4">10.7.5.4 -- Export Summary by Folder</h3>

<p>

To provide a higher-level overview of export activity, the system includes a summary function that aggregates 

export counts by folder. This feature helps identify coverage gaps, frequent exports, and missed folders in 

batch runs.

</p>

<h4>
n
 How It Works</h4>

<ul>

  <li>Parses the Export Log and groups entries by folder name or ID.</li>

  <li>Tallies number of successful and failed exports per folder.</li>

  <li>Generates a new sheet titled <code>Export Summary</code> with timestamp.</li>

</ul>

<h4>
n
 Sample Table</h4>

<pre><code>

| Folder         | Successes | Failures |

|----------------|-----------|----------|

| Cart + 0.250kg |    8      |    0     |

| Cart + 0.750kg |    5      |    1     |

</code></pre>

<p>

This is especially useful for instructors tracking group submissions or long-running dataset coverage.

</p>

<p>


Next: <a href="#section10_7_5_5">10.7.5.5 -- Timestamp Sync and Source Metadata 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.7.5.5 -- Timestamp Sync and Source Metadata -->

<!-- =============================================== -->

<h3 id="section10_7_5_5">10.7.5.5 -- Timestamp Sync and Source Metadata</h3>

<p>

Every row in the Export Log includes a precise export timestamp formatted as <code>yyyy-MM-dd HH:mm</code>. 

This is synchronized with the user(TM)s timezone and helps trace the sequence of exports across folders or users.

</p>

<h4>
n
 Timestamp Source</h4>

<ul>

  <li>Uses <code>Utilities.formatDate()</code> in Apps Script with the current user(TM)s script timezone.</li>

  <li>Logged immediately after export finishes (not before).</li>

</ul>

<h4>
n
 Metadata Tracking</h4>

<ul>

  <li>Sheet UID (if available)</li>

  <li>Sheet version or formula ID hash</li>

  <li>Menu path and source (e.g. fiExport Allfl, fiManual Exportfl, fiAuto Exportfl)</li>

</ul>

<p>

Together, this ensures reproducibility of exports -- especially important in research and classroom audits.

</p>

<p>

Next: <a href="#section10_7_5_6">10.7.5.6 -- CSV Backup of Log Records 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.7.5.6 -- CSV Backup of Log Records -->

<!-- =============================================== -->

<h3 id="section10_7_5_6">10.7.5.6 -- CSV Backup of Log Records</h3>

<p>

To ensure offline accessibility and long-term archive support, the system includes a utility to export the 

fiExport Logfl as a downloadable CSV file. This serves as a backup for users who need to transfer logs outside 

the Google environment or attach logs to formal reports.

</p>

<h4>
n
 CSV Generation</h4>

<ul>

  <li>Triggered by the menu: fiExport 
®
 Save Export Log as CSVfl.</li>

  <li>Exports all rows in the fiExport Logfl sheet into a temporary file in the linked Drive folder.</li>

  <li>File is named <code>Export_Log_YYYYMMDD_HHMM.csv</code>.</li>

</ul>

<h4>
n
 Benefits</h4>

<ul>

  <li>Enables tracking changes across versions.</li>

  <li>Prepares for external audit submissions.</li>

  <li>Compatible with Excel or external script pipelines.</li>

</ul>

<p>

This step closes the export logging loop and allows users to own and archive their full export history.

</p>

<!--

Glossary Terms Referenced:

- Export Log

- Timestamp

- UID

- CSV Export

-->

<!-- =============================================== -->

<!-- 10.8.1.1 -- Manual input of Drive folder ID -->

<!-- =============================================== -->

<h3 id="section10_8_1_1">10.8.1.1 -- Manual input of Drive folder ID</h3>

<p>

To export files to a specific Google Drive folder, users may manually enter the <strong>folder ID</strong>. 

This method is straightforward and script-compatible, especially for advanced users managing custom Drive 

paths.

</p>

<h4>
n
 How to Input</h4>

<ul>

  <li>User pastes the folder ID (from the Drive URL) into a cell named <code>__drive_folder_id</code>.</li>

  <li>Example: From URL <code>https://drive.google.com/drive/folders/1A2B3C</code>, the ID is 

<code>1A2B3C</code>.</li>

  <li>This ID is stored either in a named range or in a configuration sidebar field.</li>

</ul>

<h4>
n
 Validation</h4>

<ul>

  <li>The system checks the string length and format before use.</li>

  <li>Incorrect or expired IDs trigger an error dialog and fallback behavior (see 10.8.1.5).</li>


</ul>

<p>

This manual entry method ensures full control over the export target, especially useful for developers or 

teachers managing specific student folders.

</p>

<p>

Next: <a href="#section10_8_1_2">10.8.1.2 -- UI-based folder picker (future feature) 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.1.2 -- UI-based folder picker (future feature) -->

<!-- =============================================== -->

<h3 id="section10_8_1_2">10.8.1.2 -- UI-based folder picker (future feature)</h3>

<p>

To improve usability for non-technical users, a planned enhancement will allow users to select Drive folders 

using a <strong>graphical interface</strong> instead of pasting raw IDs. This will rely on the Google Picker 

API.

</p>

<h4>
nn
 Features</h4>

<ul>

  <li>Allows students or teachers to browse and select folders from their Drive visually.</li>

  <li>Automatically stores the selected folder(TM)s ID and name into the export configuration.</li>

  <li>Removes the need to locate Drive IDs manually.</li>

</ul>

<h4>
n
 Status</h4>

<ul>

  <li>This is a <em>planned feature</em> and currently not implemented in v5.1.</li>

  <li>Pending secure OAuth scope upgrades and UI integration testing.</li>

</ul>

<p>

When available, this feature will make the export workflow much more user-friendly -- especially for school 

settings.

</p>

<p>

Next: <a href="#section10_8_1_3">10.8.1.3 -- Saving folder config to named range or hidden sheet 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.1.3 -- Saving folder config to named range or hidden sheet -->

<!-- =============================================== -->

<h3 id="section10_8_1_3">10.8.1.3 -- Saving folder config to named range or hidden sheet</h3>

<p>

Once a valid folder ID is provided (either manually or via future picker), it must be saved persistently. The 

system does this by writing the value to a <strong>named range</strong> or a cell within a 

<code>Settings</code> sheet that may be hidden by default.

</p>

<h4>
n
 Storage Methods</h4>

<ul>

  <li>Named range: e.g., <code>__drive_folder_id</code> with the folder ID string.</li>

  <li>Settings sheet: e.g., cell <code>B2</code> on a tab titled fiSystem_Configfl.</li>

  <li>Optional: User Properties service for script-wide storage.</li>

</ul>

<h4>
n
 Advantages</h4>

<ul>

  <li>Ensures consistency across exports without repeated manual entry.</li>

  <li>Enables the script to auto-resume exports on reload.</li>

  <li>Supports portability across student copies of the master sheet.</li>

</ul>

<p>

Storing the folder configuration this way is key to enabling scheduled exports and one-click submission.

</p>

<p>

Next: <a href="#section10_8_1_4">10.8.1.4 -- Validating folder exists and is accessible 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Folder ID

- Named Range

- Drive Picker

- Settings Sheet

-->

<!-- =============================================== -->

<!-- 10.8.1.7 -- Test access tool in menu -->

<!-- =============================================== -->

<h3 id="section10_8_1_7">10.8.1.7 -- Test access tool in menu</h3>

<p>

To ensure that the selected Google Drive folder is valid and writable, the system includes a fi<strong>Test 

Export Folder</strong>fl tool in the menu. This lets users validate folder access without performing an actual 

export.

</p>


<h4>
n
 What It Does</h4>

<ul>

  <li>Attempts to access the current export folder using <code>DriveApp.getFolderById()</code>.</li>

  <li>Checks for write permissions by attempting to create and immediately delete a dummy file.</li>

  <li>Returns status message in a modal popup and optionally in a cell.</li>

</ul>

<h4>
n
 Output Format</h4>

<pre><code>

3
 Folder accessible: fiStudent_Exports_2025fl

ID: 1AbcXYZ... (Writable)

</code></pre>

<h4>
n
 On Failure</h4>

<ul>

  <li>Displays the error returned by the Drive API.</li>

  <li>Suggests corrective actions (e.g., check link, login, or share access).</li>

</ul>

<p>

Next: <a href="#section10_8_2_1">10.8.2.1 -- Using DriveApp.createFile() 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.2.1 -- Using DriveApp.createFile() -->

<!-- =============================================== -->

<h3 id="section10_8_2_1">10.8.2.1 -- Using <code>DriveApp.createFile()</code></h3>

<p>

The core export operation uses <code>DriveApp.createFile()</code> to write each <code>.m</code> script to the 

target folder. This method creates a new file with the specified name, content string, and MIME type.

</p>

<h4>
nn
 Key Parameters</h4>

<ul>

  <li><code>fileName</code> -- The full filename (e.g., <code>trial_3_model.m</code>)</li>

  <li><code>content</code> -- The string representing the full MATLAB model content</li>

  <li><code>MIME type</code> -- Set to <code>MimeType.PLAIN_TEXT</code></li>

</ul>

<h4>
n
 Wrapped in Safety Logic</h4>

<ul>

  <li>Call is enclosed in <code>try/catch</code> to trap permission errors.</li>

  <li>Logs success/failure and UID in the Export Log sheet.</li>

  <li>If target folder ID is invalid, fallback logic is triggered automatically.</li>

</ul>

<p>

This function is the backbone of the export system and is invoked by both the sidebar and batch export tools.

</p>

<p>

Next: <a href="#section10_8_2_2">10.8.2.2 -- File naming schemes: <code>trial_x.m</code>, 

<code>UID_2025.m</code> 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.2.2 -- File naming schemes: trial_x.m, UID_2025.m -->

<!-- =============================================== -->

<h3 id="section10_8_2_2">10.8.2.2 -- File naming schemes: <code>trial_x.m</code>, <code>UID_2025.m</code></h3>

<p>

The system supports flexible file naming schemes to organize exports clearly and prevent overwrites. File 

names can be constructed from sheet data, timestamps, UIDs, or user-defined inputs.

</p>

<h4>
n
 Supported Formats</h4>

<ul>

  <li><code>trial_3.m</code> -- Uses the row number or trial ID</li>

  <li><code>Trial_Cart_0.5kg_UID24A.m</code> -- Combines dataset name and UID</li>

  <li><code>UID_2025.m</code> -- Pure identifier-based filename</li>

</ul>

<h4>
nn
 Configuration Options</h4>

<ul>

  <li>Format string can be set in a named cell (e.g., <code>__file_name_format</code>).</li>

  <li>Illegal filename characters (e.g., <code>/ \ : * ?</code>) are automatically stripped or replaced.</li>

  <li>If name is blank, the script assigns a fallback name such as <code>UntitledExport_001.m</code>.</li>

</ul>

<p>

Good naming hygiene helps instructors sort student exports and prevents versioning issues during grading.

</p>

<p>

Next: <a href="#section10_8_2_3">10.8.2.3 -- File overwrite policy 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- DriveApp

- File Name Format

- Export MIME Type

- UID


-->

<!-- =============================================== -->

<!-- 10.8.2.3 -- File overwrite policy -->

<!-- =============================================== -->

<h3 id="section10_8_2_3">10.8.2.3 -- File overwrite policy</h3>

<p>

When exporting files to Drive, the system checks whether a file with the same name already exists in the 

target folder. Users can configure the <strong>overwrite policy</strong> to avoid accidental loss or 

duplication.

</p>

<h4>
nn
 Available Policies</h4>

<ul>

  <li><strong>Overwrite:</strong> Replaces existing file with same name (default for instructors).</li>

  <li><strong>Skip:</strong> Aborts export if a match is found -- logs warning.</li>

  <li><strong>Auto-Rename:</strong> Adds suffix (e.g., <code>_copy1</code>, <code>_2025</code>) to make 

unique.</li>

</ul>

<h4>
n
 How to Set</h4>

<ul>

  <li>Via config cell: <code>__overwrite_policy = skip</code></li>

  <li>Or from the export sidebar dropdown</li>

</ul>

<h4>
nn
 Internal Handling</h4>

<ul>

  <li>Uses <code>DriveApp.getFilesByName()</code> to detect conflict before export.</li>

  <li>Conflict status is logged to the Export Log sheet with file ID reference.</li>

</ul>

<p>

This ensures safe handling of Drive contents in both student and instructor environments.

</p>

<p>

Next: <a href="#section10_8_2_4">10.8.2.4 -- Optional timestamp suffix 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.2.4 -- Optional timestamp suffix -->

<!-- =============================================== -->

<h3 id="section10_8_2_4">10.8.2.4 -- Optional timestamp suffix</h3>

<p>

To distinguish between multiple versions of exported models, users can opt to append a <strong>timestamp 

suffix</strong> to each filename. This avoids overwrites and supports traceable versioning.

</p>

<h4>
n
 Suffix Format</h4>

<ul>

  <li>Follows ISO short format: <code>_YYYYMMDD_HHMM</code></li>

  <li>Example: <code>Trial3_model_20250613_1432.m</code></li>

  <li>Customizable through sidebar toggle or <code>__timestamp_suffix = true</code></li>

</ul>

<h4>
n
 Applied When</h4>

<ul>

  <li>Always applied if overwrite mode is <code>skip</code>.</li>

  <li>Optional for overwrite or auto-rename modes.</li>

  <li>Also added in fiArchivefl mode by default.</li>

</ul>

<p>

Timestamps greatly reduce the risk of confusion when reviewing exports across time or trial conditions.

</p>

<p>

Next: <a href="#section10_8_2_5">10.8.2.5 -- File description and metadata 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.2.5 -- File description and metadata -->

<!-- =============================================== -->

<h3 id="section10_8_2_5">10.8.2.5 -- File description and metadata</h3>

<p>

Each exported file can include optional Drive-level <strong>descriptive metadata</strong> visible in Drive UI.

 This makes it easier to manage and sort files at a glance, especially in shared folders or for instructional 

use.

</p>

<h4>
n
 Description Fields</h4>

<ul>

  <li>Assigned via <code>DriveApp.File.setDescription()</code></li>

  <li>Includes formula summary, export time, and trial name if available</li>

  <li>Additional info: user ID, export mode, or regression type</li>

</ul>

<h4>
n
 Where It's Used</h4>

<ul>

  <li>Visible in Google Drive fiDetailsfl sidebar</li>

  <li>Can be searched in Drive via keywords</li>


  <li>Also shown in export summary or ZIP metadata manifest</li>

</ul>

<p>

Metadata improves transparency, auditing, and review during large-scale lab exports or collaborative projects.

</p>

<p>

Next: <a href="#section10_8_2_6">10.8.2.6 -- Folder sub-organization (e.g. by class/group) 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Overwrite Policy

- Timestamp Suffix

- File Metadata

- Drive Description

- Auto-Rename

-->

<!-- =============================================== -->

<!-- 10.8.2.6 -- Folder sub-organization (e.g. by class/group) -->

<!-- =============================================== -->

<h3 id="section10_8_2_6">10.8.2.6 -- Folder sub-organization (e.g. by class/group)</h3>

<p>

To streamline management of student exports or group datasets, the system can automatically create 

<strong>subfolders</strong> within the export target. These are generated based on metadata such as class 

name, user ID, or experiment type.

</p>

<h4>
n
 Supported Groupings</h4>

<ul>

  <li><strong>By UID:</strong> Exports are saved in folders like <code>UID_209A</code></li>

  <li><strong>By Class/Period:</strong> Uses metadata such as <code>Period = 3B</code></li>

  <li><strong>By Dataset:</strong> Groups by sheet label or trial type</li>

</ul>

<h4>
nn
 Implementation Details</h4>

<ul>

  <li>Subfolders are created if not already present using <code>DriveApp.createFolder()</code></li>

  <li>Stored folder references are cached for reuse to avoid redundant API calls</li>

  <li>Directory names are sanitized for Drive compatibility</li>

</ul>

<p>

This ensures better Drive structure for instructors receiving many files and enables per-student audit trails.

</p>

<p>

Next: <a href="#section10_8_3_1">10.8.3.1 -- Save vs Preview vs Archive mode 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.3.1 -- Save vs Preview vs Archive mode -->

<!-- =============================================== -->

<h3 id="section10_8_3_1">10.8.3.1 -- Save vs Preview vs Archive mode</h3>

<p>

The export system supports three distinct modes of operation: <strong>Save</strong>, <strong>Preview</strong>,

 and <strong>Archive</strong>. This gives users fine control over how and where models are stored.

</p>

<h4>
n
 Save Mode</h4>

<ul>

  <li>Writes the finalized <code>.m</code> file to Drive</li>

  <li>Includes metadata, logs, and file structure</li>

</ul>

<h4>
n
 Preview Mode</h4>

<ul>

  <li>Renders the model in a dialog or side panel without Drive export</li>

  <li>Useful for debugging or inspecting results before committing</li>

</ul>

<h4>
nn
 Archive Mode</h4>

<ul>

  <li>Appends a timestamp suffix and saves to a locked subfolder or archive folder</li>

  <li>Ensures results cannot be accidentally overwritten</li>

  <li>Ideal for submission or record-keeping</li>

</ul>

<p>

These modes are selectable from the export menu or sidebar dropdown. Default behavior can be set via config 

cell <code>__export_mode</code>.

</p>

<p>

Next: <a href="#section10_8_3_2">10.8.3.2 -- Checkbox or menu toggle to control mode 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Export Mode

- Preview Export


- Archive Folder

- Subfolder Creation

-->

<!-- =============================================== -->

<!-- 10.8.3.2 -- Checkbox or menu toggle to control mode -->

<!-- =============================================== -->

<h3 id="section10_8_3_2">10.8.3.2 -- Checkbox or menu toggle to control mode</h3>

<p>

To make export modes easily switchable, the system provides a <strong>mode selector</strong> via either a 

sidebar dropdown or in-sheet checkbox control. This empowers users to choose between <em>Save</em>, 

<em>Preview</em>, and <em>Archive</em> without editing code or named ranges.

</p>

<h4>
n
 Sidebar Menu Toggle</h4>

<ul>

  <li>A dropdown selector in the Export panel reflects the current export mode.</li>

  <li>Choosing a new mode updates the hidden <code>__export_mode</code> cell.</li>

</ul>

<h4>
nn
 Sheet Checkbox Alternative</h4>

<ul>

  <li>A tri-state checkbox or dropdown (e.g., cell B1) can act as the control.</li>

  <li>Useful for workflows where UI access is limited (e.g., shared environments).</li>

</ul>

<h4>
n
 Mode Persistence</h4>

<ul>

  <li>The last-used mode is stored via <code>PropertiesService</code> for each user.</li>

  <li>This ensures the same export type is preserved across sessions.</li>

</ul>

<p>

Next: <a href="#section10_8_3_3">10.8.3.3 -- Export-only parameters or full <code>.m</code> model 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.3.3 -- Export-only parameters or full .m model -->

<!-- =============================================== -->

<h3 id="section10_8_3_3">10.8.3.3 -- Export-only parameters or full <code>.m</code> model</h3>

<p>

Users can choose to export either just the regression parameters or the full executable MATLAB model. This 

distinction allows for cleaner exports when only numeric constants are needed for substitution or analysis.

</p>

<h4>
n
 Parameter-Only Mode</h4>

<ul>

  <li>Exports declarations like <code>A = 0.034;</code>, <code>w = 1.2;</code>, etc.</li>

  <li>No function body or plotting logic is included.</li>

  <li>Ideal for symbolic or spreadsheet-based model building.</li>

</ul>

<h4>
n
 Full Model Mode</h4>

<ul>

  <li>Includes full expression or function such as <code>y = A * cos(w * t + 
f
)</code>.</li>

  <li>Also exports metadata, unit tags, comments, and formula context.</li>

</ul>

<h4>
nn
 Controlled By</h4>

<ul>

  <li><code>__export_minimal = true</code> or sidebar toggle</li>

  <li>Overrides based on export type (e.g., Archive always exports full)</li>

</ul>

<p>

This setting improves clarity and supports reuse of parameters across environments.

</p>

<p>

Next: <a href="#section10_8_3_4">10.8.3.4 -- Export to multiple folders (copy to shared) 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.3.4 -- Export to multiple folders (copy to shared) -->

<!-- =============================================== -->

<h3 id="section10_8_3_4">10.8.3.4 -- Export to multiple folders (copy to shared)</h3>

<p>

To support collaborative workflows, the export system allows a single model to be saved to <strong>multiple 

Drive folders</strong>. This is especially helpful for student submissions and instructor archiving.

</p>

<h4>
n
 Use Cases</h4>

<ul>

  <li>Save one copy to student(TM)s folder, another to teacher(TM)s archive</li>

  <li>Mirror export across shared project folders (e.g., Class_A, Class_B)</li>

</ul>

<h4>
nn
 Implementation</h4>

<ul>

  <li>Configured via sidebar multi-select or special named cell list (e.g., <code>__extra_folders</code>)</li>

  <li>Each folder must be validated and accessible</li>

  <li>Copies are logged separately in the Export Log with references to all destinations</li>


</ul>

<h4>
n
 Confirmation Prompts</h4>

<ul>

  <li>User is alerted if more than one folder is selected</li>

  <li>Log entries include all Drive URLs and write status per copy</li>

</ul>

<p>

Next: <a href="#section10_8_3_5">10.8.3.5 -- Scheduled delayed export after review 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.3.5 -- Scheduled delayed export after review -->

<!-- =============================================== -->

<h3 id="section10_8_3_5">10.8.3.5 -- Scheduled delayed export after review</h3>

<p>

Some workflows require exports to occur only after a teacher or reviewer confirms the content. To support 

this, the system allows a <strong>delayed or queued export</strong> that holds a file until approved.

</p>

<h4>
n
 How It Works</h4>

<ul>

  <li>File is generated and stored in a preview buffer or temporary object</li>

  <li>Status marked as <code>fiPendingfl</code> in the Export Log or Export Queue</li>

  <li>Teacher clicks fiApprove & Exportfl to finalize</li>

</ul>

<h4>
n
 Scheduling Options</h4>

<ul>

  <li>Optional date/time delay (e.g., fiExport after 3 PMfl)</li>

  <li>Integrated with trigger-based scheduling (see 10.8.6.1)</li>

</ul>

<h4>
n
 Log Integration</h4>

<ul>

  <li>Pending exports are tracked with full filename, metadata, and UID</li>

  <li>Exported-on timestamp differs from created-on timestamp</li>

</ul>

<p>

This is ideal for moderated assessments, class checks, or student-staged submissions.

</p>

<p>

Next: <a href="#section10_8_4_1">10.8.4.1 -- Create or update "Export Log" sheet 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Export Queue

- Scheduled Export

- Archive Mode

- Parameter-Only Export

- Export Duplication

-->

<!-- =============================================== -->

<!-- 10.8.4.1 -- Create or update "Export Log" sheet -->

<!-- =============================================== -->

<h3 id="section10_8_4_1">10.8.4.1 -- Create or update "Export Log" sheet</h3>

<p>

Every export action is recorded in a centralized <strong>fiExport Logfl</strong> sheet to ensure traceability. 

If this sheet does not already exist, it is automatically created during the first export attempt.

</p>

<h4>
nn
 Sheet Creation Logic</h4>

<ul>

  <li>Checked at the start of each export using <code>getSheetByName("Export Log")</code></li>

  <li>If missing, a new sheet is added and formatted with headers</li>

</ul>

<h4>
n
 Header Columns</h4>

<ul>

  <li>File Name</li>

  <li>Folder Name or ID</li>

  <li>Timestamp</li>

  <li>Export Mode</li>

  <li>Status</li>

  <li>UID</li>

</ul>

<h4>
n
 Automatic Updates</h4>

<ul>

  <li>Each export appends a new row</li>

  <li>Failed exports are also logged with full error context</li>

</ul>

<p>

This sheet acts as the primary audit trail for all generated MATLAB files.

</p>

<p>


Next: <a href="#section10_8_4_2">10.8.4.2 -- Columns: File Name, Folder, Time, Status, UID 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.4.2 -- Columns: File Name, Folder, Time, Status, UID -->

<!-- =============================================== -->

<h3 id="section10_8_4_2">10.8.4.2 -- Columns: File Name, Folder, Time, Status, UID</h3>

<p>

The <code>Export Log</code> includes standardized columns to track every important aspect of a file export. 

These fields support filtering, batch auditing, and traceability for every generated script.

</p>

<h4>
n
 Standard Columns</h4>

<ul>

  <li><strong>File Name:</strong> Exported <code>.m</code> filename</li>

  <li><strong>Folder:</strong> Destination folder name or Drive ID</li>

  <li><strong>Time:</strong> Formatted as <code>YYYY-MM-DD HH:MM</code></li>

  <li><strong>Status:</strong> Success, Failed, Pending, etc.</li>

  <li><strong>UID:</strong> Unique identifier for dataset or sheet</li>

</ul>

<h4>
n
 Additional Metadata (Optional)</h4>

<ul>

  <li>Mode: Save / Archive / Preview</li>

  <li>Triggered By: Sidebar, menu, or schedule</li>

  <li>Hash or checksum (see 10.8.5.3)</li>

</ul>

<p>

These fields form the backbone of both the user-facing export summary and backend archive linkage.

</p>

<p>

Next: <a href="#section10_8_4_3">10.8.4.3 -- Include link to Drive file in log 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.4.3 -- Include link to Drive file in log -->

<!-- =============================================== -->

<h3 id="section10_8_4_3">10.8.4.3 -- Include link to Drive file in log</h3>

<p>

For easier access and grading, the <code>Export Log</code> includes a clickable <strong>Drive link</strong> 

for each exported file. This enables teachers or reviewers to open, download, or reshare exports directly from

 the log.

</p>

<h4>
n
 How It Works</h4>

<ul>

  <li>After export, the script retrieves the file(TM)s ID and creates a hyperlink using 

<code>https://drive.google.com/file/d/FILE_ID/view</code></li>

  <li>Inserted as a hyperlink formula: <code>=HYPERLINK(...)</code></li>

  <li>Displayed as either the filename or fiOpen Filefl text</li>

</ul>

<h4>
n
 Benefits</h4>

<ul>

  <li>Saves time navigating Drive manually</li>

  <li>Supports fast review during moderation or group projects</li>

  <li>Ensures each log entry is actionable</li>

</ul>

<p>

The link is stored permanently in the sheet unless the Drive file is manually deleted.

</p>

<p>

Next: <a href="#section10_8_4_4">10.8.4.4 -- Auto-color success vs failure 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Export Log

- UID

- Drive Hyperlink

- File Status

-->

<!-- =============================================== -->

<!-- 10.8.4.4 -- Auto-color success vs failure -->

<!-- =============================================== -->

<h3 id="section10_8_4_4">10.8.4.4 -- Auto-color success vs failure</h3>

<p>

To make the <code>Export Log</code> easier to interpret at a glance, the system includes <strong>automatic row

 coloring</strong> based on export status. This visual cue helps quickly identify failed, pending, or 

successful exports.

</p>

<h4>
n
 Color Rules</h4>

<ul>

  <li><span style="color:green"><strong>Green</strong></span> -- Successful export (Status = fiSuccessfl)</li>

  <li><span style="color:red"><strong>Red</strong></span> -- Failed export (Status = fiFailedfl or fiErrorfl)</li>


  <li><span style="color:gray"><strong>Gray</strong></span> -- Pending export (Status = fiPendingfl)</li>

</ul>

<h4>
nn
 Implementation</h4>

<ul>

  <li>Applied via conditional formatting rules or <code>setBackgrounds()</code> in Apps Script</li>

  <li>Updates dynamically after every new log entry</li>

  <li>Also highlights problem entries (e.g., duplicate UIDs or invalid links)</li>

</ul>

<h4>
n
 Customization</h4>

<ul>

  <li>Teachers may change colors manually, but rules reset on script run</li>

  <li>May be disabled via settings toggle (e.g., <code>__log_color = false</code>)</li>

</ul>

<p>

This improves usability and helps instructors scan dozens of entries without reading every row.

</p>

<p>

Next: <a href="#section10_8_4_5">10.8.4.5 -- Duplicate detection alert 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.4.5 -- Duplicate detection alert -->

<!-- =============================================== -->

<h3 id="section10_8_4_5">10.8.4.5 -- Duplicate detection alert</h3>

<p>

To prevent accidental overwrites or repeated exports, the system scans the <code>Export Log</code> for 

<strong>duplicate entries</strong> before writing new rows. If a match is found, a warning is triggered and 

the user may choose to proceed or cancel.

</p>

<h4>
n
 What Constitutes a Duplicate?</h4>

<ul>

  <li>Matching combination of File Name + UID</li>

  <li>Matching timestamp within the same minute (optional)</li>

  <li>Matching folder and filename path</li>

</ul>

<h4>
nn
 Alert Workflow</h4>

<ul>

  <li>Script checks log before export</li>

  <li>Prompts user with fiDuplicate Detectedfl dialog</li>

  <li>Options: Overwrite, Create Unique Copy, Cancel</li>

</ul>

<h4>
n
 Configurable Behavior</h4>

<ul>

  <li><code>__warn_on_duplicate = true</code> (default)</li>

  <li>Auto-renaming uses suffix <code>_copy</code> or UID hash</li>

</ul>

<p>

This prevents grading confusion, especially when students re-export with minor changes.

</p>

<p>

Next: <a href="#section10_8_5_1">10.8.5.1 -- Timestamp and script version in .m header 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Conditional Formatting

- Duplicate Export

- Log Status Colors

- UID

-->

<!-- =============================================== -->

<!-- 10.8.5.1 -- Timestamp and script version in .m header -->

<!-- =============================================== -->

<h3 id="section10_8_5_1">10.8.5.1 -- Timestamp and script version in <code>.m</code> header</h3>

<p>

Each exported <code>.m</code> file includes a standardized <strong>header comment block</strong> containing 

the timestamp and HelpDialog script version. This metadata ensures that exported models are traceable and 

version-controlled.

</p>

<h4>
n
 Timestamp Format</h4>

<ul>

  <li>Follows <code>YYYY-MM-DD HH:MM</code> format (local timezone)</li>

  <li>Automatically inserted during file creation</li>

</ul>

<h4>
nn
 Script Version</h4>

<ul>

  <li>Includes current HelpDialog version (e.g., <code>v5.1</code>)</li>

  <li>Updated manually when HelpDialog receives script-level updates</li>

</ul>

<h4>
n
 Example Output</h4>


<pre><code>

% Exported: 2025-06-13 14:38

% Script Version: HelpDialog v5.1

</code></pre>

<p>

This header improves reproducibility and allows instructors to verify which version of the script generated 

the file.

</p>

<p>

Next: <a href="#section10_8_5_2">10.8.5.2 -- Variable source map (from cells) 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.5.2 -- Variable source map (from cells) -->

<!-- =============================================== -->

<h3 id="section10_8_5_2">10.8.5.2 -- Variable source map (from cells)</h3>

<p>

To enhance clarity and debugging, exported <code>.m</code> files include inline comments that indicate the 

<strong>source of each parameter</strong>. These may refer to cell addresses, named ranges, or original sheet 

positions.

</p>

<h4>
n
 Source Annotations</h4>

<ul>

  <li>Added as comments next to each parameter declaration</li>

  <li>Example: <code>% A = 0.42  % from B3 (Amplitude)</code></li>

  <li>Optional metadata tags like <code>[Manual]</code> or <code>[Derived]</code> may also appear</li>

</ul>

<h4>
n
 Usefulness</h4>

<ul>

  <li>Helps verify which inputs affect the model</li>

  <li>Supports reviewers or teachers examining work for errors</li>

  <li>Reveals if any values are manually overridden vs formula-derived</li>

</ul>

<h4>
n
 Config Options</h4>

<ul>

  <li>Can be toggled via sidebar or <code>__include_sources = true</code></li>

</ul>

<p>

This creates transparency across user workflows and assists with validation during assessments.

</p>

<p>

Next: <a href="#section10_8_5_3">10.8.5.3 -- UID, export hash, checksum line 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.5.3 -- UID, export hash, checksum line -->

<!-- =============================================== -->

<h3 id="section10_8_5_3">10.8.5.3 -- UID, export hash, checksum line</h3>

<p>

Each export includes a <strong>UID (Unique Identifier)</strong> and optionally a <strong>checksum</strong> to 

verify file content integrity. This enables version comparison, duplicate detection, and archival tracking.

</p>

<h4>
n
 UID Format</h4>

<ul>

  <li>Generated per export (e.g., <code>UID_2039B</code>)</li>

  <li>Appended to filenames, logs, and inline in file header</li>

</ul>

<h4>
n
 Checksum Line</h4>

<ul>

  <li>Based on SHA-1 or CRC of file content</li>

  <li>Helps validate content wasn(TM)t modified post-export</li>

  <li>Displayed as: <code>% Checksum: 9d3ac...</code></li>

</ul>

<h4>
n
 Use Cases</h4>

<ul>

  <li>Cross-reference export with log entries</li>

  <li>Audit multiple submissions for consistency</li>

  <li>Compare revisions between students or timepoints</li>

</ul>

<p>

These tags are especially helpful when managing large sets of exports or investigating possible edits.

</p>

<p>

Next: <a href="#section10_8_5_4">10.8.5.4 -- Optional footer comment: fiGenerated by Apps Scriptfl 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Script Header

- UID

- Checksum


- Export Metadata

-->

<!-- =============================================== -->

<!-- 10.8.5.4 -- Optional footer comment: fiGenerated by Apps Scriptfl -->

<!-- =============================================== -->

<h3 id="section10_8_5_4">10.8.5.4 -- Optional footer comment: fiGenerated by Apps Scriptfl</h3>

<p>

To provide a clear indication of how a file was generated, the export system can optionally append a 

<strong>footer comment</strong> noting that the file was created by the automated system. This footer acts as 

a soft watermark for authenticity and support reference.

</p>

<h4>
nn
 Footer Format</h4>

<pre><code>

% File generated by Physics Export System (HelpDialog v5.1)

</code></pre>

<h4>
n
 Purpose</h4>

<ul>

  <li>Signals to teachers/reviewers that the export followed standardized processing</li>

  <li>Helps identify generated vs manually edited files</li>

  <li>Assists in version control and issue diagnosis</li>

</ul>

<h4>
nn
 Configuration</h4>

<ul>

  <li>Enabled by default</li>

  <li>Can be toggled off via <code>__footer_enabled = false</code></li>

</ul>

<p>

This optional footer can support file provenance in assessments or shared Drive environments.

</p>

<p>

Next: <a href="#section10_8_5_5">10.8.5.5 -- Embed sheet name or file link 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.5.5 -- Embed sheet name or file link -->

<!-- =============================================== -->

<h3 id="section10_8_5_5">10.8.5.5 -- Embed sheet name or file link</h3>

<p>

For traceability and source verification, each exported <code>.m</code> file can include a footer or header 

comment that embeds the <strong>original sheet name</strong> or even a direct <strong>link to the source 

spreadsheet</strong>.

</p>

<h4>
n
 Embed Options</h4>

<ul>

  <li><strong>Sheet name:</strong> <code>% From sheet: Trial_A_250g</code></li>

  <li><strong>File link:</strong> <code>% https://docs.google.com/spreadsheets/d/... </code></li>

  <li><strong>Tab reference:</strong> via <code>gid=</code> query string for deep linking</li>

</ul>

<h4>
nn
 Use Cases</h4>

<ul>

  <li>Helps reviewers trace model back to source data</li>

  <li>Supports submission tracking in student projects</li>

  <li>Enables seamless re-import for future workflows</li>

</ul>

<h4>
n
 Enabling This Feature</h4>

<ul>

  <li>Default behavior includes sheet name</li>

  <li>File link added if <code>__embed_link = true</code> is set</li>

</ul>

<p>

This is especially useful in collaborative or moderated environments.

</p>

<p>

Next: <a href="#section10_8_5_6">10.8.5.6 -- Internal tag for future import detection 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.5.6 -- Internal tag for future import detection -->

<!-- =============================================== -->

<h3 id="section10_8_5_6">10.8.5.6 -- Internal tag for future import detection</h3>

<p>

To support future features like re-importing and validation, each <code>.m</code> file includes an internal 

marker tag that indicates it was generated by this system. This allows scripts to identify previously exported

 files and extract metadata.

</p>

<h4>
nn
 Tag Format</h4>

<pre><code>

% BEGIN AUTO -- DO NOT EDIT BELOW

</code></pre>

<h4>
n
 Functionality</h4>


<ul>

  <li>Used as a delimiter for parsing export sections</li>

  <li>Allows importers to extract parameters, check hash, or validate UID</li>

  <li>May evolve into versioned tag block in later updates</li>

</ul>

<h4>
n
 Integration</h4>

<ul>

  <li>Always included unless user disables all export metadata (not recommended)</li>

  <li>Currently used internally only, future support planned for import/review UI</li>

</ul>

<p>

This marker futureproofs the export system and supports automated workflows in future script versions.

</p>

<p>

Next: <a href="#section10_8_6_1">10.8.6.1 -- Time-based trigger creation 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Export Footer

- Source Link

- UID

- Import Tag

-->

<!-- =============================================== -->

<!-- 10.8.6.1 -- Time-based trigger creation -->

<!-- =============================================== -->

<h3 id="section10_8_6_1">10.8.6.1 -- Time-based trigger creation</h3>

<p>

The export system supports scheduling exports to occur at set times using Google Apps Script(TM)s <strong>time-

driven triggers</strong>. This is ideal for automated exports (e.g., daily submission backups or final batch 

exports).

</p>

<h4>
n
 Scheduling Options</h4>

<ul>

  <li><strong>Daily:</strong> Export once per day at a specified hour</li>

  <li><strong>Hourly:</strong> Useful for frequent batch updates</li>

  <li><strong>Custom Interval:</strong> (e.g., every 6 hours)</li>

</ul>

<h4>
nn
 Technical Details</h4>

<ul>

  <li>Uses <code>ScriptApp.newTrigger().timeBased()</code> to register scheduled exports</li>

  <li>Stores trigger metadata in a <code>Triggers</code> sheet or property store</li>

  <li>On execution, queued jobs check export mode and proceed accordingly</li>

</ul>

<p>

This enables fully automated workflows, including overnight export queues or rolling sync operations.

</p>

<p>

Next: <a href="#section10_8_6_2">10.8.6.2 -- UI setup for scheduling (form or sidebar) 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.6.2 -- UI setup for scheduling (form or sidebar) -->

<!-- =============================================== -->

<h3 id="section10_8_6_2">10.8.6.2 -- UI setup for scheduling (form or sidebar)</h3>

<p>

To make scheduled exports user-friendly, the system provides an interface for choosing export timing and sheet

 target. This may be embedded as a sidebar panel, popup modal, or form interface.

</p>

<h4>
n
 Form Fields</h4>

<ul>

  <li><strong>Frequency:</strong> Daily, Hourly, or Custom</li>

  <li><strong>Start Time:</strong> When the first export should run</li>

  <li><strong>Sheet Selector:</strong> Target data sheet or folder</li>

</ul>

<h4>
n
 Buttons and Actions</h4>

<ul>

  <li>fiCreate Triggerfl -- Submits scheduling info and registers job</li>

  <li>fiTest Triggerfl -- Performs dry run and returns success/failure</li>

  <li>fiClear All Triggersfl -- Deletes all active scheduled exports</li>

</ul>

<h4>
n
 Storage</h4>

<ul>

  <li>Settings saved in property store or a local sheet row</li>

  <li>Supports reloading previous trigger preferences</li>

</ul>

<p>

This UI improves accessibility for students or teachers who aren(TM)t familiar with script editors.

</p>


<p>

Next: <a href="#section10_8_6_3">10.8.6.3 -- Target sheet/section per export job 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.6.3 -- Target sheet/section per export job -->

<!-- =============================================== -->

<h3 id="section10_8_6_3">10.8.6.3 -- Target sheet/section per export job</h3>

<p>

Each scheduled export trigger may be tied to a <strong>specific sheet or data section</strong>. This ensures 

the right data is processed at the right time, supporting targeted automation.

</p>

<h4>
n
 How Targeting Works</h4>

<ul>

  <li>UI or form allows selection of a trial, UID, or tab name</li>

  <li>Trigger metadata includes the export context and sheet reference</li>

  <li>On execution, script parses this info and exports only that section</li>

</ul>

<h4>
n
 Storage Mechanism</h4>

<ul>

  <li>Stored in a <code>Scheduled_Exports</code> sheet or as a JSON blob</li>

  <li>Includes: Sheet name, UID, export mode, timestamp</li>

</ul>

<h4>
n
 Use Cases</h4>

<ul>

  <li>Automated individual exports per student</li>

  <li>Trigger-based updates of group datasets</li>

</ul>

<p>

This feature provides per-user or per-experiment automation with minimal manual intervention.

</p>

<p>

Next: <a href="#section10_8_6_4">10.8.6.4 -- Export queue logging 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Time-based Trigger

- Scheduled Export

- Trigger UI

- UID

-->

<!-- =============================================== -->

<!-- 10.8.6.4 -- Export queue logging -->

<!-- =============================================== -->

<h3 id="section10_8_6_4">10.8.6.4 -- Export queue logging</h3>

<p>

To manage scheduled and delayed exports, the system maintains an <strong>Export Queue</strong> sheet. This 

queue tracks all jobs that are pending, running, or completed -- offering transparency into automation 

operations.

</p>

<h4>
nn
 Queue Columns</h4>

<ul>

  <li>UID or Trial Name</li>

  <li>Scheduled Time</li>

  <li>Status (Pending, Running, Success, Failed)</li>

  <li>Target Sheet and Export Mode</li>

</ul>

<h4>
n
 Automatic Updates</h4>

<ul>

  <li>Entries added via the scheduling UI or sidebar</li>

  <li>Jobs are updated at runtime based on trigger success</li>

  <li>Failed or missed exports are flagged in red for review</li>

</ul>

<h4>
n
 Cleanup</h4>

<ul>

  <li>Completed jobs may auto-delete or archive after X days</li>

  <li>Archived entries are moved to fiExport Queue Archivefl sheet</li>

</ul>

<p>

The queue provides a central dashboard for instructors managing class-wide exports or reviewing student 

submissions.

</p>

<p>

Next: <a href="#section10_8_6_5">10.8.6.5 -- Cancel/export immediately buttons 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.6.5 -- Cancel/export immediately buttons -->

<!-- =============================================== -->

<h3 id="section10_8_6_5">10.8.6.5 -- Cancel/export immediately buttons</h3>


<p>

To give users manual control over queued jobs, the system includes interactive buttons to 

<strong>cancel</strong> or <strong>force export</strong> immediately. These actions are available via the 

queue sheet or sidebar.

</p>

<h4>
n
 Button Actions</h4>

<ul>

  <li><strong>Cancel:</strong> Removes the job from the Export Queue</li>

  <li><strong>Export Now:</strong> Runs the export immediately regardless of schedule</li>

</ul>

<h4>
n
 Where Found</h4>

<ul>

  <li>Queue sheet contains buttons next to each job</li>

  <li>Sidebar includes bulk controls for canceling or exporting all</li>

</ul>

<h4>
nn
 Safety Features</h4>

<ul>

  <li>Confirmation prompts shown before action</li>

  <li>Export Log records whether the export was triggered manually or scheduled</li>

</ul>

<p>

This manual override system is ideal for teachers needing last-minute corrections or resubmissions.

</p>

<p>

Next: <a href="#section10_8_6_6">10.8.6.6 -- Future enhancement: Class export manager 
nn
</a>

</p>

<!-- =============================================== -->

<!-- 10.8.6.6 -- Future enhancement: Class export manager -->

<!-- =============================================== -->

<h3 id="section10_8_6_6">10.8.6.6 -- Future enhancement: Class export manager</h3>

<p>

An upcoming planned feature is the <strong>Class Export Manager</strong> -- a batch tool for instructors to 

export all student datasets in one go. It(TM)s designed to simplify grading workflows and streamline class-wide 

file management.

</p>

<h4>
n
 Planned Capabilities</h4>

<ul>

  <li>One-click fiExport All Studentsfl button</li>

  <li>Grouped by teacher, class, or assignment folder</li>

  <li>Supports templated filenames with student IDs</li>

</ul>

<h4>
n
 UI Concepts</h4>

<ul>

  <li>Sidebar selector for class, experiment, and output mode</li>

  <li>Progress bar and export report</li>

  <li>Auto-links to all files in summary sheet</li>

</ul>

<h4>
n
 Status</h4>

<ul>

  <li>Not yet implemented (tracked in v6 planning)</li>

  <li>Pending Drive API quota evaluation for batch performance</li>

</ul>

<p>

Once completed, this manager will be a key asset for full-course automation and rubric-based marking.

</p>

<!--

Glossary Terms Referenced:

- Export Queue

- Scheduled Jobs

- Manual Override

- Class Export

-->

<!-- =============================================== -->

<!-- 10.9.1.1 -- Using MATLAB `dir()` to locate `.csv` files -->

<!-- =============================================== -->

<h3 id="section10_9_1_1">10.9.1.1 -- Using MATLAB <code>dir()</code> to locate <code>.csv</code> files</h3>

<p>

The first step in reading all CSV datasets from a folder is to locate the relevant files. MATLAB provides the 

<code>dir()</code> function, which can be used to scan a specified directory for file patterns such as 

<code>'*.csv'</code>. This returns a structured array of file metadata, which includes filenames, file sizes, 

modification dates, and more.

</p>

<pre><code>files = dir('student_trials/*.csv');</code></pre>

<p>

This command scans only the target folder (non-recursive by default) and filters for files ending in 

<code>.csv</code>. Using the extension filter ensures that system files like <code>.DS_Store</code> or 

configuration logs are excluded from the results. If needed, you can combine <code>dir()</code> with 

<code>fullfile()</code> to ensure that the search pattern is cross-platform compatible (see 10.9.1.3).


</p>

<p>

The output of <code>dir()</code> forms the basis of automated import loops. It ensures your script scales 

across dozens of trials without hardcoding filenames.

</p>

<p>

Next: <a href="#section10_9_1_2">10.9.1.2 -- Looping with <code>for i = 1:length(files)</code> 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- `dir()` (MATLAB)

- File Pattern

- Structured Array

- Cross-platform Path

-->

<!-- =============================================== -->

<!-- 10.9.1.2 -- Looping with `for i = 1:length(files)` -->

<!-- =============================================== -->

<h3 id="section10_9_1_2">10.9.1.2 -- Looping with <code>for i = 1:length(files)</code></h3>

<p>

After using <code>dir()</code> to list all <code>.csv</code> files in a directory, a <code>for</code> loop is 

typically used to iterate through each file. This pattern ensures that every file is processed sequentially 

and that errors can be isolated per iteration.

</p>

<pre><code>for i = 1:length(files)

    name = files(i).name;

    disp(['Reading: ', name]);

end</code></pre>

<p>

This pattern is scalable and robust. It supports:

</p>

<ul>

  <li>Batch processing of experimental trials or lab datasets</li>

  <li>Insertion of logging or error handling logic per iteration</li>

  <li>Customization of import behavior based on filename or metadata</li>

</ul>

<p>

Using <code>for i</code> indexing over <code>files</code> is preferred in educational settings because it 

provides clarity, flexibility, and compatibility with try/catch logic (see 10.9.3.1). It also allows you to 

preview filenames or metadata before reading each file.

</p>

<p>

Next: <a href="#section10_9_1_3">10.9.1.3 -- Building dynamic filepaths 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- `for` Loop

- Indexing

- File Enumeration

- Iterative Import

-->

<!-- =============================================== -->

<!-- 10.9.1.3 -- Building dynamic filepaths -->

<!-- =============================================== -->

<h3 id="section10_9_1_3">10.9.1.3 -- Building dynamic filepaths</h3>

<p>

In MATLAB, files detected by <code>dir()</code> only include their name -- not the full file path. To access 

them for reading, you must concatenate the parent folder path with the file name. The recommended method is to

 use <code>fullfile()</code>, which handles slashes automatically and works on all operating systems.

</p>

<pre><code>folder = 'student_trials';

filename = fullfile(folder, files(i).name);</code></pre>

<p>

This eliminates the risk of malformed paths such as <code>student_trials\\data.csv</code> (Windows) or 

<code>student_trials//data.csv</code> (Unix). It also handles folders with spaces or special characters 

without breaking file access.

</p>

<p>

Avoid manually concatenating folder strings with slashes (<code>/</code> or <code>\</code>), as that approach 

can fail across systems or when filenames change. <code>fullfile()</code> remains the safest and most scalable

 method.

</p>

<p>

Next: <a href="#section10_9_1_4">10.9.1.4 -- Filtering `.csv` only (ignoring `.DS_Store`, etc.) 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- `fullfile()` (MATLAB)


- Dynamic Filepath

- Cross-platform File Access

- Path Join

-->

<!-- =============================================== -->

<!-- 10.9.1.4 -- Filtering `.csv` only (ignoring `.DS_Store`, etc.) -->

<!-- =============================================== -->

<h3 id="section10_9_1_4">10.9.1.4 -- Filtering <code>.csv</code> only (ignoring <code>.DS_Store</code>, 

etc.)</h3>

<p>

Even when using <code>dir('*.csv')</code>, stray files like <code>.DS_Store</code> (macOS), 

<code>Thumbs.db</code> (Windows), or misnamed files can cause errors during import. To avoid this, add a 

manual extension check inside the loop to confirm each file truly ends with <code>.csv</code>.

</p>

<pre><code>

filename = files(i).name;

[~,~,ext] = fileparts(filename);

if ~strcmpi(ext, '.csv')

    disp(['Skipped non-CSV file: ', filename]);

    continue;

end

</code></pre>

<p>

This adds a second layer of validation and allows optional logging of skipped files. Such logs help students 

or instructors identify incorrectly named files or OS-generated clutter in shared folders.

</p>

<p>

Ensuring correct extensions improves script robustness and prevents MATLAB from attempting to read invalid or 

unsupported formats, which can trigger unnecessary crashes.

</p>

<p>

Next: <a href="#section10_9_1_5">10.9.1.5 -- Skipping hidden/system files 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- File Extension

- `fileparts()`

- `.DS_Store`

- File Filter

-->

<!-- =============================================== -->

<!-- 10.9.1.5 -- Skipping hidden/system files -->

<!-- =============================================== -->

<h3 id="section10_9_1_5">10.9.1.5 -- Skipping hidden/system files</h3>

<p>

System files like <code>.DS_Store</code> or <code>.~lock</code> prefixed files can interfere with import 

loops. These are hidden or temporary files used by the OS or programs like Excel. Scripts must actively check 

and skip any filename that starts with a period or tilde.

</p>

<pre><code>

if startsWith(filename, '.') || startsWith(filename, '~')

    disp(['Skipped hidden/system file: ', filename]);

    continue;

end

</code></pre>

<p>

Adding this condition prevents malformed binary files from being read as text, which could otherwise throw 

unexpected read errors. These issues are particularly common in classroom or shared Drive environments.

</p>

<p>

Combined with a <code>try/catch</code> block (see 10.9.3.1), this check ensures that import failures from 

hidden files are avoided before any file processing begins.

</p>

<p>

Next: <a href="#section10_9_1_6">10.9.1.6 -- Compatibility with Windows/Mac/Unix paths 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Hidden File

- `startsWith()` (MATLAB)

- System Artifact

- Filename Filter

-->

<!-- =============================================== -->

<!-- 10.9.1.6 -- Compatibility with Windows/Mac/Unix paths -->

<!-- =============================================== -->

<h3 id="section10_9_1_6">10.9.1.6 -- Compatibility with Windows/Mac/Unix paths</h3>

<p>


Folder paths differ by operating system: Windows uses backslashes (<code>\</code>), while macOS and Linux use 

forward slashes (<code>/</code>). MATLAB(TM)s <code>fullfile()</code> abstracts away this difference by 

constructing paths using the correct native delimiter.

</p>

<pre><code>

fullpath = fullfile(baseFolder, files(i).name);

</code></pre>

<p>

This makes the script portable across school labs and personal laptops with different OS environments. 

Additionally, <code>fullfile()</code> handles edge cases like duplicate slashes, trailing folder characters, 

and filenames with spaces.

</p>

<p>

Avoid hardcoded slashes (<code>'folder\\file.csv'</code>) -- they often fail on non-Windows systems and break 

when folders change dynamically. When paired with <code>dir()</code> and <code>readmatrix()</code>, this 

method ensures full cross-platform compatibility.

</p>

<p>

Next: <a href="#section10_9_1_7">10.9.1.7 -- Optional folder nesting support 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Path Separator

- `fullfile()`

- Cross-platform Script

- Directory Traversal

-->

<!-- =============================================== -->

<!-- 10.9.1.7 -- Optional folder nesting support -->

<!-- =============================================== -->

<h3 id="section10_9_1_7">10.9.1.7 -- Optional folder nesting support</h3>

<p>

For advanced import workflows, the system may optionally support <strong>recursive folder scanning</strong>. 

This allows the script to read CSV files stored in nested subfolders (e.g., <code>/ClassA/Trial1</code>, 

<code>/Trial2</code>, etc.), not just a single flat directory.

</p>

<pre><code>

files = dir(fullfile(basePath, '**', '*.csv'));

</code></pre>

<p>

This command walks through all subfolders and locates files matching the <code>.csv</code> extension. It(TM)s 

ideal for shared or classwide Drive structures where each student or group has a subdirectory.

</p>

<h4>
nn
 Optional Toggle</h4>

<ul>

  <li>Enabled via config flag: <code>USE_NESTED_SCAN = true;</code></li>

  <li>Path depth may be logged to identify folder hierarchy</li>

</ul>

<p>

Be cautious: recursive scans may pick up unintended files (e.g., archived, backups). Consider combining this 

with filters from 10.9.1.4 and 10.9.1.5.

</p>

<p>

Next: <a href="#section10_9_2_1">10.9.2.1 -- Using <code>readmatrix()</code> or <code>csvread()</code> 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Recursive Folder Scan

- Subdirectory

- `dir('**/*.csv')`

-->

<!-- =============================================== -->

<!-- 10.9.2.1 -- Using `readmatrix()` or `csvread()` -->

<!-- =============================================== -->

<h3 id="section10_9_2_1">10.9.2.1 -- Using <code>readmatrix()</code> or <code>csvread()</code></h3>

<p>

To import numerical data from CSV files, MATLAB offers two primary methods: 

<strong><code>readmatrix()</code></strong> (modern) and <strong><code>csvread()</code></strong> (legacy). 

<code>readmatrix()</code> is preferred due to its flexibility and robustness with headers and delimiters.

</p>

<pre><code>data = readmatrix(filepath);</code></pre>

<p>

This command imports the entire file as a numeric matrix, skipping any non-numeric headers by default. It 

automatically detects delimiters and handles common formatting inconsistencies.

</p>

<p>

For older versions of MATLAB, use:

<pre><code>data = csvread(filepath, 1, 0);  % Skip header row</code></pre>


This approach is less flexible and does not handle strings or metadata well.

</p>

<p>

Both methods can be wrapped in <code>try/catch</code> blocks to handle file errors (see 10.9.3.1). Choose 

<code>readmatrix()</code> whenever possible for future compatibility.

</p>

<p>

Next: <a href="#section10_9_2_2">10.9.2.2 -- Mapping column headers to variables 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- `readmatrix()`

- `csvread()`

- Numeric Matrix

- File Import Method

-->

<!-- =============================================== -->

<!-- 10.9.2.2 -- Mapping column headers to variables -->

<!-- =============================================== -->

<h3 id="section10_9_2_2">10.9.2.2 -- Mapping column headers to variables</h3>

<p>

To convert imported data into usable vectors like <code>t</code> (time), <code>y</code> (position), or 

<code>v</code> (velocity), the script must analyze the <strong>header row</strong>. This can be done using 

<code>readcell()</code> or <code>readtable()</code> to extract the first row of labels:

</p>

<pre><code>headers = readcell(filepath, 'Range', '1:1');</code></pre>

<p>

The script loops through <code>headers</code> to find key column names (e.g., "Time", "Position") and stores 

their indices. These are then used to slice the numeric matrix:

</p>

<pre><code>

t = data(:, timeCol);

y = data(:, posCol);

</code></pre>

<p>

The mapping can also be saved to a struct for reference:

<code>columnMap.time = timeCol;</code>

This approach allows logging, reuse, and debugging.

</p>

<p>

Header mapping is essential for flexible import from varied student trials where column order may differ.

</p>

<p>

Next: <a href="#section10_9_2_3">10.9.2.3 -- Auto-detecting <code>Time</code>, <code>Position</code>, 

<code>Velocity</code>, etc. 
nn
</a>

</p>

<!--

Glossary Terms Referenced:

- Header Row

- Column Mapping

- Vector Assignment

- `readcell()`

-->

<!-- ============================================ -->

<!-- 10.9.2.3 -- Auto-detecting Time, Position, Velocity, etc. -->

<!-- ============================================ -->

<h3 id="sec-10-9-2-3">10.9.2.3 -- Auto-detecting <code>Time</code>, <code>Position</code>, 

<code>Velocity</code>, etc.</h3>

<p>

Auto-detecting column roles from header names is essential when CSV files differ in structure or naming. The 

MATLAB import routine attempts to intelligently match expected data types (e.g. time, position, velocity) 

based on common header variants. For instance, columns labeled <code>Time</code>, <code>t</code>, or 

<code>T</code> are interpreted as time, while <code>Position</code>, <code>x(t)</code>, or 

<code>Displacement</code> may indicate spatial coordinates.

</p>

<p>

The system uses a predefined list of acceptable aliases and runs a fuzzy match--either by lowercasing and 

comparing strings or using regular expressions for flexible matching. If multiple matches occur, a warning is 

raised, and the user is encouraged to override manually (see <a href="#sec-10-9-2-4">10.9.2.4</a>).

</p>

<p>

Ambiguities such as fiXfl (which could mean position or an axis label) are flagged. This step is critical for 

robust data automation where consistent formatting cannot be assumed. The detection system includes glossary-

aware labels like <i>Position</i>, <i>Velocity</i>, <i>Acceleration</i>, and cross-references to headers like 

<code>x(t)</code> and <code>v(t)</code>.

</p>

<p>

If no clear matches are found, the script reverts to fallback logic (see <a 


href="#sec-10-9-2-5">10.9.2.5</a>), and logs the uncertainty in the import log. This maintains stability and 

transparency across diverse datasets.

</p>

<p class="glossary-ref">Glossary: <a href="#glossary-time">Time</a>, <a href="#glossary-

position">Position</a>, <a href="#glossary-velocity">Velocity</a>, <a href="#glossary-header-row">Header 

Row</a></p>

<!-- ============================================ -->

<!-- 10.9.2.4 -- User-overridable column map -->

<!-- ============================================ -->

<h3 id="sec-10-9-2-4">10.9.2.4 -- User-overridable column map</h3>

<p>

For users who wish to bypass the auto-detection process or fix ambiguous mappings, a manual column mapping 

system is supported. This allows users to define the role of each column explicitly using either a structured 

configuration file or an in-script dictionary. A common implementation pattern is a MATLAB <code>struct</code>

 such as <code>map.Time = 1; map.Position = 2;</code> where indices represent column positions.

</p>

<p>

Manual overrides are essential when working with unconventional headers (e.g., <code>TrialTime</code>, 

<code>Dist</code>) or datasets from legacy systems. This mapping can be hard-coded, prompted via the command 

line, or loaded from a companion config file like <code>column_map.mat</code>.

</p>

<p>

The override system ensures consistency across runs and removes ambiguity. Scripts should include a toggle or 

flag to enable/disable manual mode. If enabled, auto-detection is skipped, and manual values are used directly

 in the import.

</p>

<p>

This flexibility supports high-reliability workflows and aligns with classroom or lab protocols where column 

standards vary across experiments.

</p>

<p class="glossary-ref">Glossary: <a href="#glossary-column-map">Column Map</a>, <a href="#glossary-config-

file">Config File</a>, <a href="#glossary-matlab-struct">MATLAB Struct</a></p>

<!-- ============================================ -->

<!-- 10.9.2.5 -- Manual sheet preview fallback -->

<!-- ============================================ -->

<h3 id="sec-10-9-2-5">10.9.2.5 -- Manual sheet preview fallback</h3>

<p>

When both auto-detection and manual mapping fail or are disabled, the import system enters a fallback mode. 

This mode presents a preview of the CSV header row and a few sample rows directly in the MATLAB console. The 

intent is to provide the user with sufficient context to define the mappings manually.

</p>

<p>

The system prints each column(TM)s index and header text, along with 2OE3 values from the first data row. This is 

useful in troubleshooting scenarios or during live demonstrations when immediate mapping input is required.

</p>

<p>

Example output:

<pre>

Column 1: 'Time (ms)' 
®
 0, 10, 20

Column 2: 'X-Pos' 
®
 5.0, 5.3, 5.6

</pre>

</p>

<p>

From this, the user can assign <code>map.Time = 1</code> and <code>map.Position = 2</code> in the script. This

 fallback ensures that import workflows can proceed even when header content is unexpected. It also makes the 

system beginner-friendly, bridging automation and manual control.

</p>

<p class="glossary-ref">Glossary: <a href="#glossary-header-preview">Header Preview</a>, <a href="#glossary-

manual-override">Manual Override</a>, <a href="#glossary-console-output">Console Output</a></p>

```html

<!-- ========================================================== -->

<!-- 10.9.2.6 -- Optional interpolation or smoothing -->

<!-- ========================================================== -->

<h3 id="10.9.2.6">10.9.2.6 -- Optional interpolation or smoothing</h3>

<p>

Many experimental CSV files contain <strong>noise</strong> or <strong>missing data points</strong> due to 

sampling gaps, sensor errors, or environmental interference.

To address this, MATLAB allows optional <code>smoothing</code> and <code>interpolation</code> during 

preprocessing. Users can toggle these steps when importing data for downstream regression or visualization 

tasks.

</p>

<p>

Smoothing can be performed using <code>movmean()</code> (moving average) or <code>smoothdata()</code>, which 

support methods like <code>'gaussian'</code>, <code>'loess'</code>, or <code>'sgolay'</code>.

Interpolation (e.g., with <code>interp1()</code>) can fill gaps in time-series if timestamp vectors are 

irregular or contain NaNs.

</p>

<p>


These enhancements reduce noise, clarify signal trends, and avoid interruptions in analysis pipelines that 

expect consistent time vectors.

Implementation should log any smoothing applied and its method, with parameters like window size or kernel 

type stored for reproducibility.

</p>

<p>

<b>Glossary:</b> <i><a href="#glossary-noise">Noise</a>, <a href="#glossary-interpolation">Interpolation</a>, 

<a href="#glossary-smoothing">Smoothing</a>, <a href="#glossary-time-series">Time-series</a></i>

</p>

<hr>

<!-- ========================================================== -->

<!-- 10.9.2.7 -- Support for header offset (start at row X) -->

<!-- ========================================================== -->

<h3 id="10.9.2.7">10.9.2.7 -- Support for header offset (start at row X)</h3>

<p>

In some CSV files, the actual data may not begin on the second line. Files might contain metadata, experiment 

notes, or blank lines above the data header row.

To accommodate these formats, the import script should allow a configurable <strong>header offset</strong> -- 

the row number where the actual data header begins.

</p>

<p>

By default, MATLAB(TM)s <code>readmatrix()</code> or <code>readtable()</code> functions begin reading at row 1. 

Users can override this using the <code>'NumHeaderLines'</code> or <code>'HeaderLines'</code> argument, or by 

slicing the data post-import.

Auto-detection is also possible by scanning for known column headers like fiTime (ms)fl or fiPosition (m)fl.

</p>

<p>

This flexibility ensures that notes or prepended metadata do not disrupt parsing. Logs should reflect the 

detected or specified starting row.

</p>

<p>

<b>Glossary:</b> <i><a href="#glossary-header-row">Header row</a>, <a href="#glossary-offset">Offset</a>, <a 

href="#glossary-readmatrix">readmatrix()</a>, <a href="#glossary-csv">CSV</a></i>

</p>

```

<!-- ================================================ -->

<!-- 10.9.3.1 -- Wrap `readmatrix()` in `try/catch` -->

<!-- ================================================ -->

<div class="help-section" id="sec-10-9-3-1">

  <h3>10.9.3.1 -- Wrap <code>readmatrix()</code> in <code>try/catch</code></h3>

  <p>

    When importing multiple CSV files in MATLAB using a <code>for</code>-loop, one problematic file can crash 

the entire batch. To avoid this, each call to <code><a 

href="https://www.mathworks.com/help/matlab/ref/readmatrix.html" target="_blank">readmatrix()</a></code> 

should be wrapped in a <code>try/catch</code> block. This structure attempts the file import and captures any 

error that occurs without stopping execution.

  </p>

  <p>

    The <code>try</code> block contains the standard import command and optional preprocessing. If an error 

arises--due to missing headers, format mismatch, or unreadable content--the <code>catch</code> block activates, 

optionally logging the error (see <a href="#sec-10-9-3-2">10.9.3.2</a>) and continuing the loop safely.

  </p>

  <pre><code>

    try

        data = readmatrix(filepath);

    catch ME

        fprintf('Error importing: %s\n', filepath);

        disp(ME.message);

        continue;

    end

  </code></pre>

  <p>

    This pattern adds robustness to the import script, ensuring that issues in a single file don(TM)t cascade 

into broader failures. <span class="glossary-term">Try/catch</span> is an essential error handling mechanism 

in many languages including MATLAB [1].

  </p>

</div>

<!-- ================================================ -->

<!-- 10.9.3.2 -- Log failed filenames to `ImportLog` -->

<!-- ================================================ -->

<div class="help-section" id="sec-10-9-3-2">

  <h3>10.9.3.2 -- Log failed filenames to <code>ImportLog</code></h3>

  <p>

    When a file fails to import (e.g., inside a <code>catch</code> block), the script should append the 

filename and error reason to a structured <code>ImportLog</code>. This can be a cell array, a text file, or 

printed output, depending on user preference. An import log improves traceability, allowing users to inspect 

which files failed, when, and why.

  </p>

  <p>

    Typical fields in the log include:


    <ul>

      <li>Filename</li>

      <li>Timestamp</li>

      <li>Error message or exception type</li>

    </ul>

    For example:

  </p>

  <pre><code>

    log{end+1} = struct( ...

        'filename', filepath, ...

        'timestamp', datestr(now), ...

        'error', ME.message);

  </code></pre>

  <p>

    Logging enables batch diagnostics and can guide future corrections to file formats or headers. It also 

integrates well with subsequent summaries (see <a href="#sec-10-9-3-3">10.9.3.3</a>) and debugging workflows. 

Consider using a dedicated sheet or structured log variable. See also: <span class="glossary-term">Error 

handling</span>, <span class="glossary-term">Logging</span> [1].

  </p>

</div>

<!-- ================================================ -->

<!-- 10.9.3.3 -- Show summary of success/failure after loop -->

<!-- ================================================ -->

<div class="help-section" id="sec-10-9-3-3">

  <h3>10.9.3.3 -- Show summary of success/failure after loop</h3>

  <p>

    After processing all CSVs, the script should display a summary report. This enhances usability by 

providing users with immediate feedback on the number of successful and failed imports. The report may print 

to the command window, appear in a GUI table, or be exported as a summary log.

  </p>

  <p>

    A basic printout might look like:

    <pre><code>

      fprintf('CSV Import Summary:\n');

      fprintf('- Success: %d\n', successCount);

      fprintf('- Failed: %d\n', length(errorLog));

    </code></pre>

    A more advanced version could generate a bar chart using MATLAB's plotting functions or create a summary 

CSV for long-term recordkeeping.

  </p>

  <p>

    Including such a summary aligns with best practices in batch processing and is especially helpful in 

educational or multi-user environments where clarity of outcome is important. Related terms: <span 

class="glossary-term">Batch processing</span>, <span class="glossary-term">Reporting</span>, <span 

class="glossary-term">User feedback</span> [1].

  </p>

</div>

<!-- ============================== -->

<!-- 10.9.3.4 -- Optionally re-run failed files -->

<!-- ============================== -->

<h4 id="10-9-3-4">10.9.3.4 -- Optionally re-run failed files</h4>

<p>

This section outlines how to implement a retry mechanism for previously failed CSV imports.

Such functionality is useful when import errors are transient--caused by Drive lag, file locks, or interrupted 

sessions.

</p>

<ul>

  <li><strong>Recovery loop logic:</strong> A second pass is attempted for any files listed in 

<code>ImportLog</code> as failed.</li>

  <li><strong>Isolated logging:</strong> Retry attempts can be logged under a separate tag (e.g. 

<code>[Retry]</code>) for auditing purposes.</li>

  <li><strong>Time-saving:</strong> Reduces the need to rerun the entire script when only a few files 

encountered temporary issues.</li>

</ul>

<p>

In MATLAB, this can be implemented by storing failed file names from the first loop into a 

<code>failedFiles</code> array, then reattempting them using another <code>for</code> loop. Optionally, 

include a <code>pause()</code> between attempts to allow for system recovery.

</p>

<details>

  <summary><strong>Glossary:</strong></summary>

  <ul>

    <li><a href="#ImportLog">ImportLog</a></li>

    <li><a href="#retry">Retry</a></li>

    <li><a href="#loop">Loop</a></li>

  </ul>

</details>

<!-- ============================== -->

<!-- 10.9.3.5 -- Error types: file not found, invalid format, missing columns -->

<!-- ============================== -->

<h4 id="10-9-3-5">10.9.3.5 -- Error types: file not found, invalid format, missing columns</h4>


<p>

Robust import routines must distinguish between common error types. Categorizing failures allows developers to

 take precise corrective actions and improves user messaging.

</p>

<ul>

  <li><strong>File not found:</strong> Triggered when a path doesn(TM)t resolve or the file was 

moved/deleted.</li>

  <li><strong>Invalid format:</strong> Raised when the file content can(TM)t be parsed as numeric--common with 

malformed headers or corrupt encoding.</li>

  <li><strong>Missing columns:</strong> Happens if required headers like <code>"Time"</code> or 

<code>"Position"</code> are absent, affecting downstream assignments.</li>

</ul>

<p>

Each category should have its own <code>catch</code> block (or if/else filter) and produce a meaningful entry 

in the <code>ImportLog</code>. Optionally, severity levels (e.g. <em>warning</em> vs <em>critical</em>) can be

 assigned for sorting.

</p>

<details>

  <summary><strong>Glossary:</strong></summary>

  <ul>

    <li><a href="#catch">catch</a></li>

    <li><a href="#headers">headers</a></li>

    <li><a href="#log">log</a></li>

  </ul>

</details>

<!-- ============================== -->

<!-- 10.9.3.6 -- Optional fail-safe output for skipped files -->

<!-- ============================== -->

<h4 id="10-9-3-6">10.9.3.6 -- Optional fail-safe output for skipped files</h4>

<p>

To maintain script continuity, it(TM)s good practice to create placeholder outputs for failed imports.

This ensures that dependent processes don(TM)t break due to missing variables.

</p>

<ul>

  <li><strong>Dummy data vectors:</strong> Generate simple default vectors for <code>t</code> and 

<code>y</code>, e.g., <code>t = 0</code>, <code>y = 0</code>.</li>

  <li><strong>Console message:</strong> Notify the user that a fallback value was injected, reducing debugging

 time later.</li>

  <li><strong>Optional `.mat` output:</strong> Save the dummy values to `.mat` as placeholders for visual 

regression tests or teaching modules.</li>

</ul>

<p>

This safety net is especially helpful in automated batch processing, where individual failure shouldn(TM)t halt 

the system. Add a conditional like <code>if isempty(data)</code> before assigning default values.

</p>

<details>

  <summary><strong>Glossary:</strong></summary>

  <ul>

    <li><a href="#fallback">fallback</a></li>

    <li><a href="#dummy">dummy</a></li>

    <li><a href="#.mat">.mat file</a></li>

  </ul>

</details>

<!-- ============================== -->

<!-- 10.9.4.1 -- Saving `t` and `y` to `.mat` via `save()` -->

<!-- ============================== -->

<h4 id="10-9-4-1">10.9.4.1 -- Saving <code>t</code> and <code>y</code> to <code>.mat</code> via 

<code>save()</code></h4>

<p>

After extracting time (<code>t</code>) and data (<code>y</code>) vectors from imported CSV files, it is common

 to store them in MATLAB(TM)s binary <code>.mat</code> format for efficient reuse. This is done using the 

<code>save()</code> function:

</p>

<pre><code>save('trial_001.mat', 't', 'y');</code></pre>

<p>

The resulting file is compact, fast-loading, and maintains full numeric precision. Compared to raw CSV, 

<code>.mat</code> files preserve structure and metadata, enabling faster access and integration with future 

MATLAB scripts.

</p>

<p>

This export step is critical when:

<ul>

  <li>Data will be re-analyzed repeatedly</li>

  <li>Trial files are used across multiple labs or systems</li>

  <li>CSV headers may differ but vector names are standardized</li>

</ul>

</p>

<p>

Use of <code>save()</code> ensures compatibility with MATLAB's workspace and downstream automation steps like 

regression or plotting.


</p>

<p><strong>Glossary:</strong> <a href="#glossary-save">save()</a>, <a href="#glossary-mat-file">.mat file</a>,

 <a href="#glossary-workspace">workspace</a></p>

<!-- ============================== -->

<!-- 10.9.4.2 -- Auto-naming convention `trial1_data.mat` -->

<!-- ============================== -->

<h4 id="10-9-4-2">10.9.4.2 -- Auto-naming convention <code>trial1_data.mat</code></h4>

<p>

To prevent overwriting and maintain consistency during batch exports, each <code>.mat</code> file should 

follow a standardized naming scheme. Common options include:

</p>

<ul>

  <li><code>trial_001.mat</code>, <code>trial_002.mat</code> -- using index counters</li>

  <li><code>UID_abcd123.mat</code> -- using a unique identifier</li>

  <li><code>studentID_2025_trial3.mat</code> -- using metadata from input files</li>

</ul>

<p>

File names can be generated using <code>sprintf()</code>:

<pre><code>fname = sprintf('trial_%03d.mat', i);</code></pre>

This ensures proper lexical sorting in file browsers and Drive folders, which is useful when exporting 

multiple trials in sequence. Consider logging each generated filename to a master export log for auditing or 

grading workflows.

</p>

<p>

Standardized naming also supports dual-export modes (see 10.9.4.5) where <code>.csv</code> and 

<code>.mat</code> files must correspond.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-auto-naming">Auto-naming</a>, <a href="#glossary-

sprintf">sprintf()</a>, <a href="#glossary-trial-ID">Trial ID</a></p>

<!-- ============================== -->

<!-- 10.9.4.3 -- Including metadata as structs -->

<!-- ============================== -->

<h4 id="10-9-4-3">10.9.4.3 -- Including metadata as structs</h4>

<p>

To make <code>.mat</code> files self-describing, it is recommended to bundle associated metadata into a 

<code>struct</code>. This allows you to preserve experimental context alongside numerical vectors.

</p>

<p>

For example:

<pre><code>

info.trialName = 'Oscillation Test 1';

info.exportTime = datetime('now');

info.sourceCSV = 'Cart_0.250kg_trial3.csv';

save('trial_003.mat', 't', 'y', 'info');

</code></pre>

</p>

<p>

This adds traceability, especially in collaborative or teaching settings. When loading the file, you can 

access metadata via:

<code>load('trial_003.mat'); disp(info.trialName);</code>

</p>

<p>

Typical fields include:

<ul>

  <li><code>trialName</code>, <code>UID</code>, or student info</li>

  <li><code>exportTime</code> timestamp</li>

  <li>Original filename and detected column mappings</li>

</ul>

<p>

Embedding metadata improves the file(TM)s portability and usability in later stages like analysis, grading, or 

regression scripting.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-struct">struct</a>, <a href="#glossary-

metadata">Metadata</a>, <a href="#glossary-save">save()</a></p>

<!-- ============================== -->

<!-- 10.9.4.4 -- Use case: performance / size / reusability -->

<!-- ============================== -->

<h4 id="10-9-4-4">10.9.4.4 -- Use case: performance / size / reusability</h4>

<p>

Storing vectors like <code>t</code> and <code>y</code> in <code>.mat</code> format offers significant 

advantages over <code>.csv</code> for repeated access. MATLAB's <code>.mat</code> format loads faster, 

consumes less space (especially with compression), and preserves structure and metadata. This makes it ideal 

for educational labs, simulations, or performance-critical scripts.

</p>

<p>

For example, importing a file repeatedly during regression trials is much faster using:

<pre><code>load('trial_001.mat');</code></pre>

compared to re-parsing the CSV.


</p>

<p>

<code>.mat</code> files are platform-independent and retain variable names, enabling reproducibility across 

sessions. They are also easier to inspect in MATLAB(TM)s workspace and support structured content such as 

embedded <code>info</code> metadata.

</p>

<p>

Use cases include: regression model tuning, cross-student benchmarking, and MATLAB-based competitions where 

raw data is preloaded for analysis.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-mat-file">.mat file</a>, <a href="#glossary-

performance">Performance</a>, <a href="#glossary-reusability">Reusability</a></p>

<!-- ============================== -->

<!-- 10.9.4.5 -- Config toggle for `.csv` + `.mat` dual export -->

<!-- ============================== -->

<h4 id="10-9-4-5">10.9.4.5 -- Config toggle for <code>.csv</code> + <code>.mat</code> dual export</h4>

<p>

Some users may want to keep both <code>.csv</code> and <code>.mat</code> files for each trial, while others 

prefer only one format. To support this, a configuration toggle such as <code>EXPORT_MAT = true;</code> should

 be implemented at the top of the script.

</p>

<p>

This can be used inside an <code>if</code> block to selectively save:

<pre><code>

if EXPORT_MAT

    save('trial_001.mat', 't', 'y', 'info');

end

</code></pre>

This allows consistent behavior across all trials and reduces clutter when <code>.mat</code> files are 

unnecessary (e.g., in purely spreadsheet-based workflows).

</p>

<p>

The toggle can be linked to a GUI checkbox or config struct in classroom deployments. It also improves Drive 

compatibility by reducing file size where needed.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-export-toggle">Export Toggle</a>, <a href="#glossary-config-

variable">Config Variable</a>, <a href="#glossary-dual-export">Dual Export</a></p>

<!-- ============================== -->

<!-- 10.9.4.6 -- Cleanup logic: auto-delete `.mat` if not needed -->

<!-- ============================== -->

<h4 id="10-9-4-6">10.9.4.6 -- Cleanup logic: auto-delete <code>.mat</code> if not needed</h4>

<p>

To avoid clutter, especially in shared or cloud-synced folders, users can enable a cleanup step that deletes 

temporary <code>.mat</code> files when they are no longer needed. This should be governed by the 

<code>EXPORT_MAT</code> flag and performed after any processing is complete.

</p>

<pre><code>

if ~EXPORT_MAT

    delete('trial_001.mat');

end

</code></pre>

<p>

Optionally, this can be enhanced to delete only if files are older than a retention window (e.g., 7 days), or 

if a flag <code>AUTO_CLEANUP = true;</code> is set.

</p>

<p>

This ensures Drive space is conserved, reduces confusion in group folders, and allows users to retain only 

relevant output. In some settings, the files may be archived instead of deleted.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-cleanup">Cleanup</a>, <a href="#glossary-delete-mat">Delete 

.mat</a>, <a href="#glossary-retention-policy">Retention Policy</a></p>

<!-- ============================== -->

<!-- 10.10.1.1 -- Columns for trial number, time, value, etc. -->

<!-- ============================== -->

<h4 id="10-10-1-1">10.10.1.1 -- Columns for trial number, time, value, etc.</h4>

<p>

The foundation of a successful MATLAB export from Google Sheets starts with consistent column structure. Each 

dataset should contain the following required columns:

<ul>

  <li><strong>Trial</strong> -- e.g., <code>Trial 1</code>, <code>Trial 2</code></li>

  <li><strong>Time (ms)</strong> -- timestamps in milliseconds</li>

  <li><strong>Position (m)</strong> -- measured data (e.g., displacement)</li>

</ul>

These columns provide the minimum needed for constructing <code>t</code> and <code>y</code> vectors in MATLAB.

</p>

<p>

Headers must be on the first row of the block, and values below must be numeric and aligned by row. Any 

deviation (e.g. missing cells, mixed data types) may result in export failure. Use data validation rules to 


enforce this where possible.

</p>

<p>

Additional columns may follow, but only mapped headers will be used in the `.m` file.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-trial-column">Trial Column</a>, <a href="#glossary-header-

row">Header Row</a>, <a href="#glossary-mapping">Mapping</a></p>

<!-- ============================== -->

<!-- 10.10.1.2 -- Include notes or uncertainty columns -->

<!-- ============================== -->

<h4 id="10-10-1-2">10.10.1.2 -- Include notes or uncertainty columns</h4>

<p>

While not used directly in the exported MATLAB script, optional columns can store useful metadata:

<ul>

  <li><strong>Uncertainty</strong> -- e.g., <code>±0.02</code> m</li>

  <li><strong>Notes</strong> -- comments, trial conditions, or flags</li>

  <li><strong>Skip?</strong> -- column that marks if row should be excluded</li>

</ul>

These are ignored during code generation but preserved in the data block or used in logs.

</p>

<p>

Including these annotations helps improve transparency and reproducibility. For example, if two students 

collect slightly different data under the same conditions, notes help distinguish each trial's context.

</p>

<p>

Advanced templates may even log these fields in a metadata struct or export summary. It's good practice to 

color-code these columns (e.g., gray fill) to separate them visually from numeric inputs.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-uncertainty">Uncertainty</a>, <a href="#glossary-comment-

column">Comment Column</a>, <a href="#glossary-data-integrity">Data Integrity</a></p>

<!-- ============================== -->

<!-- 10.10.1.3 -- Named range for block export -->

<!-- ============================== -->

<h4 id="10-10-1-3">10.10.1.3 -- Named range for block export</h4>

<p>

To define exactly which rows and columns to export, the script uses <strong>named ranges</strong> such as 

<code>TrialBlock1</code>. A named range is a custom label assigned to a rectangular group of cells -- ideal for

 selecting data blocks that change often.

</p>

<p>

In Apps Script, you can access this via:

<pre><code>range = sheet.getRangeByName('TrialBlock1');</code></pre>

This allows flexible referencing even if rows are added or deleted. Named ranges also simplify the sidebar 

interface, where users can select a range from a dropdown or auto-detect it based on selection.

</p>

<p>

This feature helps segment experiments into clear, controlled exports and allows students to export multiple 

blocks from the same sheet without rewriting code.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-named-range">Named Range</a>, <a href="#glossary-range-

object">Range Object</a>, <a href="#glossary-sheet-parsing">Sheet Parsing</a></p>

<!-- ============================== -->

<!-- 10.10.1.4 -- Highlight row/column headers -->

<!-- ============================== -->

<h4 id="10-10-1-4">10.10.1.4 -- Highlight row/column headers</h4>

<p>

To guide student input and prevent formatting errors, spreadsheets should use conditional formatting to 

visually distinguish header cells. This includes:

<ul>

  <li>Row headers like <code>Trial</code>, <code>Time (ms)</code>, <code>Position (m)</code></li>

  <li>Column headers aligned with expected variable names</li>

</ul>

</p>

<p>

Conditional formatting can use color cues:

<pre><code>

If cell = "Time (ms)" 
®
 Fill: Light Blue

If column is within export range 
®
 Border: Solid Green

</code></pre>

</p>

<p>

This visual cue helps validate structure before export, ensuring users are less likely to mislabel or shift 

headers. It also assists Apps Script logic that checks for column alignment (see <a 

href="#10-10-1-6">10.10.1.6</a>).

</p>

<p><strong>Glossary:</strong> <a href="#glossary-header-row">Header Row</a>, <a href="#glossary-conditional-

formatting">Conditional Formatting</a>, <a href="#glossary-data-validation">Data Validation</a></p>

<!-- ============================== -->


<!-- 10.10.1.5 -- Metadata block for title, author, date -->

<!-- ============================== -->

<h4 id="10-10-1-5">10.10.1.5 -- Metadata block for title, author, date</h4>

<p>

A dedicated metadata block allows users to define contextual information for each trial or dataset. This block

 typically includes:

<ul>

  <li><code>Experiment Name</code></li>

  <li><code>Author</code> or <code>Class</code></li>

  <li><code>Date</code> or <code>Trial ID</code></li>

</ul>

</p>

<p>

This information can be extracted using a named range (e.g. <code>MetaBlock1</code>) and inserted into the 

`.m` file:

<pre><code>

% Experiment: Damped Oscillation

% Author: A. Student

% Date: 2025-06-13

</code></pre>

</p>

<p>

Sidebar input fields may mirror this block, allowing updates to sync both ways. Export previews and logs can 

include metadata summaries.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-metadata">Metadata</a>, <a href="#glossary-named-range">Named

 Range</a>, <a href="#glossary-export-header">Export Header</a></p>

<!-- ============================== -->

<!-- 10.10.1.6 -- Pre-validation of data structure -->

<!-- ============================== -->

<h4 id="10-10-1-6">10.10.1.6 -- Pre-validation of data structure</h4>

<p>

Before exporting, the script performs a full validation of the selected data block. This prevents runtime 

errors and alerts the user to formatting issues.

</p>

<p>

Validation checks include:

<ul>

  <li>Header presence: <code>Time (ms)</code>, <code>Position (m)</code>, etc.</li>

  <li>No empty rows inside the block</li>

  <li>Proper numeric formatting of values</li>

  <li>Timestamp order increasing</li>

</ul>

</p>

<p>

The script may also offer a dry-run preview that lists warnings:

<pre><code>

n
 Missing "Time (ms)" column in TrialBlock1

n
 Empty value in row 7, column 2

</code></pre>

</p>

<p>

This proactive approach improves user confidence and aligns with automated scripting practices seen in export 

pipelines.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-validation">Validation</a>, <a href="#glossary-header-

check">Header Check</a>, <a href="#glossary-preview-mode">Preview Mode</a></p>

<!-- ============================== -->

<!-- 10.10.2.1 -- Export selected trial data to `.csv` -->

<!-- ============================== -->

<h4 id="10-10-2-1">10.10.2.1 -- Export selected trial data to <code>.csv</code></h4>

<p>

This feature extracts the trial data from a selected range and saves it as a `.csv` file for external 

analysis. The export logic supports:

<ul>

  <li>Using the trial ID or named block for filename</li>

  <li>Comma-separated UTF-8 encoding with standard line breaks</li>

  <li>Excludes non-numeric columns unless configured to include metadata</li>

</ul>

</p>

<p>

Sample export code:

<pre><code>

Trial_001.csv

Time (ms),Position (m)

0,0.00

100,1.23

200,0.97

</code></pre>


</p>

<p>

Files can be saved directly to Google Drive or offered as downloads via the sidebar interface. This is 

particularly useful for students submitting raw data or for external regression in MATLAB.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-csv-export">CSV Export</a>, <a href="#glossary-trial-

id">Trial ID</a>, <a href="#glossary-drive-export">Drive Export</a></p>

<!-- ============================================================ -->

<!-- 10.10.2.2 -- Fit regression model to that data -->

<!-- ============================================================ -->

<p><b>Description:</b> Once a CSV file is generated from a data block, the script can apply a chosen 

regression algorithm to fit the data. This step is key for modeling damped harmonic motion or alternative 

physical systems.</p>

<p><b>Supported Algorithms:</b> The system supports multiple regression types including:</p>

<ul>

  <li>Damped cosine fit: <code>f(t) = A * cos(w * t + 
f
) * exp(-b * t) + C</code></li>

  <li>Exponential decay: <code>y = A * exp(-b * t) + C</code></li>

  <li>Custom user formulas defined in the sidebar formula entry</li>

</ul>

<p><b>Workflow:</b></p>

<ol>

  <li>User selects a trial and enables regression fit in the export menu or sidebar.</li>

  <li>The export engine runs a selected algorithm on the CSV contents (columns: Time (ms), Position (m)).</li>

  <li>The result includes parameter values and a fit quality score (e.g., R²).</li>

</ol>

<p><b>Example:</b></p>

<pre><code>

Trial: "Cart + 0.5kg"

Model: A * cos(w * t + 
f
) * exp(-b * t) + C

Fit Result:

  A = 1.13

  w = 6.28

  
f
 = 0.04

  b = 0.27

  C = 0.01

  R² = 0.984

</code></pre>

<p><b>Implementation:</b></p>

<ul>

  <li>Calls internal regression module (`runRegressionFromCSV(csvData, model)`).</li>

  <li>Supports reduction flags and smoothing before fitting.</li>

  <li>Stores result in memory for downstream export or charting.</li>

</ul>

<!-- ============================================================ -->

<!-- 10.10.2.3 -- Save fit results into fiRegression Resultsfl sheet -->

<!-- ============================================================ -->

<p><b>Description:</b> After running the regression on selected trial data, the resulting fit parameters are 

written into a shared "Regression Results" sheet for record keeping, comparison, and export consistency.</p>

<p><b>Structure of the Results Sheet:</b></p>

<table>

  <tr><th>Trial ID</th><th>A</th><th>b</th><th>w</th><th>
f
</th><th>C</th><th>R²</th></tr>

  <tr><td>Trial_01</td><td>1.13</td><td>0.27</td><td>6.28</td><td>0.04</td><td>0.01</td><td>0.984</td></tr>

</table>

<p><b>Data Sources:</b></p>

<ul>

  <li>Regression output object generated from fitting engine.</li>

  <li>Each row corresponds to one trial or UID.</li>

  <li>Trial ID extracted from sheet name, file name, or user-supplied block.</li>

</ul>

<p><b>Example Implementation Snippet (Apps Script):</b></p>

<pre><code>

function writeToRegressionResults(trialId, params) {

  const sheet = getOrCreateSheet("Regression Results");

  const headers = ["Trial ID", "A", "b", "w", "
f
", "C", "R²"];

  if (sheet.getLastRow() === 0) sheet.appendRow(headers);

  const row = [trialId, params.A, params.b, params.w, params.phi, params.C, params.r2];

  sheet.appendRow(row);

}

</code></pre>

<p><b>Automation Details:</b></p>

<ul>

  <li>Auto-creates "Regression Results" if not found.</li>

  <li>Can be grouped by folder or experiment ID if needed.</li>

  <li>Used by export modules, chart preview, and `.m` generation.</li>

</ul>

# ============================================================

# 10.10.2.4 -- Optional preview in chart

# ============================================================

<!-- HTML-formatted description block for modal or sidebar help -->


<p><strong>Purpose:</strong> This subfeature enables a quick visual comparison of the original trial data and 

the fitted regression curve before final export. Useful for ensuring the selected model visually represents 

the data accurately.</p>

<ul>

  <li><strong>Preview Chart Options:</strong> Charts can be rendered directly in the spreadsheet using Google 

Charts, or within the sidebar as an HTML `<canvas>` plot. These views are temporary and not stored in the 

export.</li>

  <li><strong>Overlay Capabilities:</strong> Both original data points (e.g., from <code>TrialBlock1</code>) 

and fitted values (e.g., calculated via <code>f = A*cos(w*t + 
f
)*exp(-b*t) + C</code>) are plotted together. 

Allows for immediate detection of poor fits.</li>

  <li><strong>Script Hook:</strong> Option appears as a preview step in the export dialog or regression menu. 

Triggers logic that checks the latest regression fit in memory or fetches it from the <code>Regression 

Results</code> sheet.</li>

</ul>

<pre><code>// Example preview hook

showPreviewChart("Trial 4", rawData, fittedData);

</code></pre>

<p><strong>Use Case Example:</strong> If the student accidentally selects a linear regression instead of a 

damped cosine model, the preview will clearly show a mismatch between the curved data points and the fitted 

line--prompting a correction before saving to MATLAB.</p>

<p style="color: #888;">[0] Note: The Google Charts preview is illustrative; does not reflect MATLAB-style 

syntax.</p>

# ============================================================

# 10.10.2.5 -- Add export flags: include regression? include metadata?

# ============================================================

<!-- HTML-formatted toggle explanation for export customisation -->

<p><strong>Purpose:</strong> This option lets users control which components are included in the final `.m` or

 `.csv` export. For example, they can choose to include or exclude:</p>

<ul>

  <li>The regression model and its parameters</li>

  <li>Metadata blocks such as experiment title, date, and author</li>

  <li>Raw trial data vs. only the fitted model</li>

</ul>

<p><strong>Implementation:</strong></p>

<ul>

  <li><strong>Checkboxes:</strong> Sidebar UI includes toggles labeled "Include Regression Block?" and 

"Include Metadata Header?"</li>

  <li><strong>Config Mapping:</strong> Export logic reads the current UI settings or internal config object, 

e.g., <code>{ includeRegression: true, includeMetadata: false }</code>.</li>

  <li><strong>Fallback Defaults:</strong> If the UI values are not set, the script defaults to including both 

blocks for completeness.</li>

</ul>

<pre><code>// Export control logic

if (exportFlags.includeRegression) {

  insertRegressionBlock(fitParams);

}

if (exportFlags.includeMetadata) {

  insertMetadataBlock(metaFields);

}

</code></pre>

<p><strong>Example:</strong> For classroom use, a teacher might deselect metadata export to anonymize 

submissions, while retaining the regression block for marking fit accuracy.</p>

<p style="color: #888;">[0] Source logic from user-defined config not yet backed by citation; UI logic assumed

 per export pattern in earlier modules.</p>

<!-- ============================== -->

<!-- 10.10.3.1 -- Insert header block with description -->

<!-- ============================== -->

<h4 id="10-10-3-1">10.10.3.1 -- Insert header block with description</h4>

<p>

The exported <code>.m</code> file begins with a comment header containing structured metadata from the 

spreadsheet. This helps document the experiment and ensures reproducibility. The header block includes fields 

such as:

<ul>

  <li><strong>Experiment Name</strong></li>

  <li><strong>Author or Class</strong></li>

  <li><strong>Date and Time</strong></li>

  <li><strong>Trial ID or Block Name</strong></li>

</ul>

</p>

<p>

These fields are either:

<ul>

  <li>Pulled from a named range (e.g., <code>MetaBlock1</code>)</li>

  <li>Entered via sidebar form inputs</li>

  <li>Fallback values from the current user and timestamp</li>

</ul>

</p>

<p><strong>Example output:</strong></p>

<pre><code>


% Experiment: Oscillation with Damping

% Author: A. Student

% Date: 2025-06-13 15:04

% Trial: Cart + 0.250kg

</code></pre>

<p>

If a required field is missing, the script will insert a placeholder comment such as:

<code>%!! MISSING EXPERIMENT TITLE</code>

and proceed with export. This ensures no export is blocked, but issues can still be flagged visually.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-export-header">Export Header</a>, <a href="#glossary-named-

range">Named Range</a>, <a href="#glossary-sidebar-form">Sidebar Form</a></p>

<!-- ============================== -->

<!-- 10.10.3.2 -- Insert parameter definitions (from regression or cells) -->

<!-- ============================== -->

<h4 id="10-10-3-2">10.10.3.2 -- Insert parameter definitions (from regression or cells)</h4>

<p>

After the metadata header, the export script writes parameter values for the model formula. These include 

values like <code>A</code>, <code>b</code>, <code>w</code>, <code>phi</code>, and <code>C</code>, drawn from:

<ul>

  <li>Regression results (default)</li>

  <li>Manual spreadsheet inputs (e.g., <code>PhaseOffset</code>)</li>

  <li>Sidebar overrides if present</li>

</ul>

</p>

<p>

Each parameter is defined in the MATLAB script with a comment showing the source:

<pre><code>

A = 1.13;   % from Regression Results

b = 0.27;   % from cell B12 (named: Damping)

w = 6.28;   % sidebar override

phi = 0.04; % from Regression Results

C = 0.01;   % default (no override)

</code></pre>

</p>

<p>

This clarity helps with debugging and ensures consistent syncing across formats like LaTeX and `.csv`. The 

script also highlights missing parameters with comments (e.g., <code>%!! MISSING</code>) and falls back to 

zero if needed.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-parameter-mapping">Parameter Mapping</a>, <a href="#glossary-

override">Override</a>, <a href="#glossary-variable-source">Variable Source</a></p>

<!-- ============================== -->

<!-- 10.10.3.3 -- Define f = A*cos(w*t + phi)*exp(-b*t) + C -->

<!-- ============================== -->

<h4 id="10-10-3-3">10.10.3.3 -- Define <code>f = A*cos(w*t + phi)*exp(-b*t) + C</code></h4>

<p>

This section inserts the fitted model equation into the <code>.m</code> MATLAB script. It typically uses the 

damped cosine function derived from regression or user input:

</p>

<pre><code>

f = A*cos(w*t + phi).*exp(-b*t) + C;

</code></pre>

<p>

The dot-notation (e.g., <code>.*</code>) ensures compatibility with vector operations when <code>t</code> is 

an array. This function represents a classical damped oscillator, with:

<ul>

  <li><code>A</code> -- amplitude</li>

  <li><code>w</code> -- angular frequency</li>

  <li><code>b</code> -- damping coefficient</li>

  <li><code>phi</code> -- phase offset</li>

  <li><code>C</code> -- vertical offset</li>

</ul>

</p>

<p>

If users opt for a different model (e.g. exponential decay), the export logic adapts accordingly using 

conditional template replacement.

</p>

<p><strong>Example:</strong></p>

<pre><code>

A = 1.2; w = 6.3; phi = 0.5; b = 0.14; C = 0.02;

f = A*cos(w*t + phi).*exp(-b*t) + C;

</code></pre>

<p><strong>Glossary:</strong> <a href="#glossary-damped-cosine">Damped Cosine</a>, <a href="#glossary-fit-

equation">Fit Equation</a>, <a href="#glossary-matlab-vector">Vector Math</a></p>

<!-- ============================== -->

<!-- 10.10.3.4 -- Include plot(t, f) or scatter(t, y) -->

<!-- ============================== -->

<h4 id="10-10-3-4">10.10.3.4 -- Include <code>plot(t, f)</code> or <code>scatter(t, y)</code></h4>


<p>

To visualize both the measured data and the fitted model, the script includes MATLAB plot commands after the 

model definition. A typical export includes:

</p>

<pre><code>

scatter(t, y, 'filled'); hold on;

plot(t, f, 'LineWidth', 2);

xlabel('Time (s)');

ylabel('Displacement (m)');

title('Trial Fit: Damped Oscillation');

legend('Data', 'Fit');

grid on;

</code></pre>

<p>

This provides clear visual feedback to users verifying the accuracy of the model. It also assists in 

identifying any major mismatches between data and regression curve.

</p>

<p>

An optional command to save the plot as a PNG or PDF can be added:

</p>

<pre><code>

saveas(gcf, 'trial_fit.png');

</code></pre>

<p>

All plots follow MATLAB's native syntax. The plot is auto-included unless suppressed by user export flags.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-scatter">Scatter Plot</a>, <a href="#glossary-plot">MATLAB 

Plot</a>, <a href="#glossary-export-image">Export Image</a></p>

# ============================================

# 10.10.3.5 -- Optional time loop or animation

# ============================================

<!--

Adds animated visualization to `.m` script for educational clarity.

 -->

<section id="10.10.3.5">

  <h3>10.10.3.5 -- Optional Time Loop or Animation</h3>

  <p>This section optionally inserts a <code>for</code>-loop animation block into the exported MATLAB 

<code>.m</code> file. The feature simulates time-based damping by plotting the motion frame-by-frame with 

pauses, aiding students in visualizing how oscillations decay over time.</p>

  <p><b>Implementation:</b> The code block looks like:</p>

  <pre><code class="language-matlab">% Animated damping plot

figure;

for i = 1:length(t)

    plot(t(1:i), f(1:i), 'b');

    xlabel('Time (s)');

    ylabel('Displacement (m)');

    title('Damped Oscillation Animation');

    xlim([0 max(t)]);

    ylim([min(f)-0.1, max(f)+0.1]);

    pause(0.01);  % controls speed

end</code></pre>

  <p><b>Usage Notes:</b></p>

  <ul>

    <li>This block is <i>disabled by default</i> unless the export settings enable it explicitly via checkbox 

or toggle in the UI.</li>

    <li>Rendering long animations for large datasets may slow MATLAB considerably -- performance tradeoff 

should be considered.</li>

    <li>Some educational versions may highlight each frame or use annotations to demonstrate critical damping 

thresholds.</li>

  </ul>

  <p><b>Example Context:</b> This is particularly effective when comparing multiple trials (e.g., varying mass

 or spring constant) to show how b or w affects damping visually.</p>

  <p><b>Reference Caution:</b> While similar constructs appear in MATLAB documentation on animated plots, 

specific usage in physics modeling may vary depending on course or curriculum; educators are encouraged to 

validate with local pedagogical standards <span style="color:#3b82f6;">[0]</span>.</p>

</section>

# ============================================

# 10.10.4.1 -- File open + run instructions

# ============================================

<!--

Guides the user through running the script in MATLAB or online.

 -->

<section id="10.10.4.1">

  <h3>10.10.4.1 -- File Open + Run Instructions</h3>

  <p>This block includes documentation comments embedded at the top of the generated <code>.m</code> file. It 

serves as an onboarding guide for students and first-time MATLAB users on how to open, run, and troubleshoot 

the script.</p>

  <p><b>Comment Block Example:</b></p>


  <pre><code class="language-matlab">% ==========================================

% Oscillation Model -- Trial 3

% Author: Alex Student

% Date: 2025-06-13

%

% How to Use:

% 1. Open MATLAB or MATLAB Online.

% 2. Navigate to this folder.

% 3. Type `run('Trial3_Oscillation.m')` in the Command Window.

%

% Tip: If variables are missing, check that 't' and 'f' are defined.

% ==========================================</code></pre>

  <p><b>Purpose:</b> These instructions ensure that exported scripts are usable without separate guides, 

especially when submitted as assignments or archived for later use.</p>

  <p><b>Optional Enhancements:</b></p>

  <ul>

    <li>Add a README-style preamble to the first lines for context.</li>

    <li>Include auto-generated guidance tailored to the dataset (e.g., "You exported a damped cosine 

regression using TrialBlock2").</li>

    <li>Provide a fallback usage mode if no GUI is available (headless server note).</li>

  </ul>

  <p><b>Pedagogical Alignment:</b> This follows best practices seen in lab-based MATLAB environments, 

providing clarity and minimizing user error. May align with documentation recommendations by MathWorks 

educators <span style="color:#3b82f6;">[0]</span>.</p>

</section>

<!-- ========================================================= -->

<!-- 10.10.4.2 -- Generated `.m` is standalone executable -->

<!-- ========================================================= -->

<p><strong>10.10.4.2 -- Generated <code>.m</code> is standalone executable</strong></p>

<p>This subsection ensures that exported MATLAB scripts are self-contained and executable on any standard 

MATLAB installation, even without access to Google Sheets or auxiliary files. This guarantees reproducibility 

and portability, especially for student submission or offline analysis.</p>

<ul>

  <li><strong>Embedded Variables:</strong> All necessary constants such as amplitude (<code>A</code>), damping

 (<code>b</code>), angular frequency (<code>w</code>), phase offset (<code>phi</code>), and offset constant 

(<code>C</code>) are defined directly in the script. These are either:

    <ul>

      <li>Auto-generated from regression fitting</li>

      <li>Imported from named cells in Google Sheets</li>

      <li>Defined manually by the user in export settings</li>

    </ul>

  </li>

  <li><strong>Bundled Data:</strong> The time (<code>t</code>) and value (<code>y</code>) vectors are included

 in the script or linked from the same folder if chosen. Inline bundling allows the file to run independently 

of external CSV files.</li>

  <li><strong>Function or Script Style:</strong> The system supports both:

    <ul>

      <li><em>Function-based:</em> Allows parameter reuse and encapsulation</li>

      <li><em>Script-based:</em> Suitable for simple analysis or student learning</li>

    </ul>

  </li>

</ul>

<p><strong>Example Output Snippet:</strong></p>

<pre><code>% Trial 7 - Oscillation Fit

t = [0:0.01:10];

A = 1.23; b = 0.45; w = 3.14; phi = 0.67; C = 0.12;

f = A * cos(w * t + phi) .* exp(-b * t) + C;

plot(t, f);

title('Damped Cosine Fit -- Trial 7');</code></pre>

<p>All files generated with this structure can be executed in MATLAB desktop or online platforms without 

modification.</p>

<!-- ========================================================= -->

<!-- 10.10.4.3 -- Troubleshooting tips if run fails -->

<!-- ========================================================= -->

<p><strong>10.10.4.3 -- Troubleshooting tips if run fails</strong></p>

<p>This section of the export embeds documentation to guide students through basic debugging if the generated 

MATLAB script fails to run. These comments are prepended to the <code>.m</code> file and may be shown in the 

sidebar preview as well.</p>

<ul>

  <li><strong>Common Errors Documented:</strong> Issues include:

    <ul>

      <li><code>Undefined variable t</code> -- likely due to data not being embedded correctly</li>

      <li><code>Unexpected MATLAB expression</code> -- usually syntax errors from malformed formulas</li>

      <li>Empty plots or blank figures -- typically caused by zero-length vectors</li>

    </ul>

  </li>

  <li><strong>Remediation Suggestions:</strong> Each error block includes suggestions such as:

    <ul>

      <li>Check that variables like <code>t</code> and <code>y</code> are defined and non-empty</li>


      <li>Ensure MATLAB supports element-wise operators (use <code>.*</code>, <code>./</code> etc.)</li>

      <li>Use MATLAB command window to isolate lines causing issues</li>

    </ul>

  </li>

  <li><strong>Inline Comments:</strong> Comments are embedded at the point of possible failure:

    <pre><code>f = A * cos(w * t + phi) .* exp(-b * t) + C;  % Ensure t is defined above</code></pre>

  </li>

</ul>

<p><strong>Additional Tools:</strong> Users are advised to:

<ul>

  <li>Open the <code>Error Log</code> sheet if generated</li>

  <li>Use MATLAB(TM)s <code>dbstop if error</code> for real-time debugging</li>

</ul>

</p>

<p>If severe mismatch between sheet and script is detected, a sidebar warning is triggered before export, and 

a recovery link is added to the error message log.</p>

<!-- ========================================== -->

<!-- 10.10.4.4 -- Suggested edits: axis labels, titles, export figure -->

<!-- ========================================== -->

<section id="10.10.4.4">

  <h3>10.10.4.4 -- Suggested edits: axis labels, titles, export figure</h3>

  <p>This section allows users to customize the plotting segment of the exported <code>.m</code> file. 

Students often need to personalize the graph appearance in MATLAB, so optional insertions include labeled 

axes, trial titles, and figure export instructions.</p>

  <ul>

    <li><strong>Axis and title customization:</strong> Insert commands such as <code>xlabel('Time 

(s)')</code>, <code>ylabel('Position (m)')</code>, and <code>title('Trial 3 Fit OE Damped Oscillation')</code> 

to improve readability and labeling consistency.</li>

    <li><strong>Legend and grid additions:</strong> Add <code>legend('Original Data', 'Fit Model')</code> and 

<code>grid on</code> for clearer interpretation. Students may customize line styles and labels to distinguish 

series.</li>

    <li><strong>Figure export:</strong> Include a line like <code>saveas(gcf, 'trial3_fit.png')</code> to save

 the figure as an image. Optional formats include <code>.png</code>, <code>.jpg</code>, and <code>.pdf</code>.

 MATLAB Online supports most standard export commands.</li>

  </ul>

  <p>These options are toggleable in the export dialog. Export scripts may append a <code>% Customize 

below</code> block to invite manual adjustments by students. Default values may be derived from sheet metadata

 or user preferences (e.g., experiment title).</p>

  <div class="example">

    <strong>Example insertion in .m file:</strong><br>

    <code>

      xlabel('Time (s)');<br>

      ylabel('Displacement (m)');<br>

      title('Oscillation Trial 2');<br>

      legend('Data','Fitted Curve');<br>

      grid on;<br>

      saveas(gcf, 'trial2_fit.png');

    </code>

  </div>

  <footer>

    <small>Ref: [1] MATLAB Plotting Basics -- https://www.mathworks.com/help/matlab/ref/plot.html</small>

  </footer>

</section>

<!-- ========================================== -->

<!-- 10.10.5.1 -- Ensure `.m` uses same values as LaTeX -->

<!-- ========================================== -->

<section id="10.10.5.1">

  <h3>10.10.5.1 -- Ensure <code>.m</code> uses same values as LaTeX</h3>

  <p>This critical validation step ensures consistency between what the student sees in LaTeX previews and 

what is actually exported to the MATLAB script. The export process pulls parameters from either the regression

 results sheet or named cell ranges and cross-checks them against the LaTeX formula definitions used 

elsewhere.</p>

  <ul>

    <li><strong>Parameter syncing:</strong> Parameters like <code>A</code>, <code>b</code>, <code>w</code>, 

<code>phi</code>, and <code>C</code> are compared across their origin points. If one value appears in LaTeX 

from a cell and another in the exported <code>.m</code>, the discrepancy is flagged.</li>

    <li><strong>Preview integrity:</strong> The user-facing LaTeX preview is often assumed to be the 

authoritative expression. A mismatch could confuse teachers or lead to grading issues, especially if the 

written formula doesn(TM)t match the model used for plotting or analysis.</li>

    <li><strong>Sync warnings:</strong> Discrepancies trigger either a popup warning or sidebar flag. Critical

 mismatches (e.g., completely different values or signs) can cancel the export unless resolved.</li>

  </ul>

  <p>Developers are encouraged to include a dry-run preview option that visually compares the two sets of 

values before final export. The logic can be enhanced using JSON maps of <code>{parameter: [LaTeX, .m]}</code>

 to automatically diff the content.</p>

  <div class="example">

    <strong>Example mismatch detection:</strong><br>

    <code>

      A (LaTeX) = 1.23<br>


      A (.m)     = 1.25<br>

      
®
 Warning: LaTeX and MATLAB script disagree on A (
D
 = 0.02)

    </code>

  </div>

  <footer>

    <small>Ref: [2] IB Physics IA Guidelines OE Consistency Across Representations</small>

  </footer>

</section>

<!-- ============================== -->

<!-- 10.10.5.2 -- Warnings if mismatch detected -->

<!-- ============================== -->

<h4 id="10-10-5-2">10.10.5.2 -- Warnings if mismatch detected</h4>

<p>

To ensure transparency between spreadsheet inputs, LaTeX previews, and MATLAB exports, this section adds 

automated warnings when mismatches are found between any representations of parameter values.

</p>

<p><strong>Mismatch Types Detected:</strong></p>

<ul>

  <li>Different numerical values (e.g., rounding or formatting errors)</li>

  <li>Formulas rendered differently between LaTeX and MATLAB</li>

  <li>Omission of required parameters from either system</li>

</ul>

<p>

These warnings are color-coded based on severity:

<ul>

  <li><span style="color:orange;">Yellow</span> OE small discrepancies (e.g. <code>A = 1.234</code> vs. 

<code>1.23</code>)</li>

  <li><span style="color:red;">Red</span> OE major structural differences (e.g. cosine present in one but not 

the other)</li>

</ul>

</p>

<p><strong>Example:</strong></p>

<pre><code>

n
 Warning: LaTeX shows A = 1.22, but .m file uses A = 1.27 (
D
 = 0.05)

</code></pre>

<p>

Warnings appear in the sidebar before export and are inserted as comments in the `.m` file itself if 

unresolved. This helps teachers catch inconsistencies in submitted work.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-value-mismatch">Value Mismatch</a>, <a href="#glossary-

consistency-check">Consistency Check</a>, <a href="#glossary-latex-vs-script">LaTeX vs Script</a></p>

<!-- ============================== -->

<!-- 10.10.5.3 -- Cell origin comments in `.m` output -->

<!-- ============================== -->

<h4 id="10-10-5-3">10.10.5.3 -- Cell origin comments in <code>.m</code> output</h4>

<p>

To promote traceability, each parameter in the MATLAB export includes a comment indicating where the value 

came from. This practice helps reviewers and students verify how the output script reflects spreadsheet input.

</p>

<p><strong>Sources Include:</strong></p>

<ul>

  <li><strong>Regression fit:</strong> <code>% from Regression Results</code></li>

  <li><strong>Named cell ranges:</strong> <code>% from cell C12 (named: PhaseOffset)</code></li>

  <li><strong>User override or config:</strong> <code>% manually set from export config</code></li>

</ul>

<p><strong>Example Export Snippet:</strong></p>

<pre><code>

w = 6.28;   % from Regression Results

phi = 0.45; % from cell C12 (named range: PhaseOffset)

C = 0.01;   % manually entered override

</code></pre>

<p>

This metadata allows educational annotation (see 10.10.6.3) and assists in debugging cases where output 

doesn't match input expectations. The inline comments are optional but recommended for student-facing scripts.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-cell-trace">Cell Trace</a>, <a href="#glossary-inline-

source">Inline Source</a>, <a href="#glossary-parameter-documentation">Parameter Documentation</a></p>

<!-- ========================================================= -->

<!-- 10.10.5.4 -- Preview `.m` side-by-side with cell input summary -->

<!-- ========================================================= -->

<section id="10.10.5.4">

  <h3>10.10.5.4 -- Preview <code>.m</code> side-by-side with cell input summary</h3>

  <p>This feature adds a side-by-side interface showing the generated <code>.m</code> script and the input 

cell values that contributed to it.</p>

  <ul>

    <li><strong>Layout and toggle:</strong> The sidebar interface allows toggling between the LaTeX summary, 

original cell input (e.g., ranges like <code>A2:B10</code>), and the final <code>.m</code> output. Displayed 

using split-view UI elements.</li>


    <li><strong>Purpose:</strong> Helps verify that each MATLAB variable directly matches the source cell 

value. This is particularly useful for educators, reviewers, and debugging inconsistent regressions.</li>

    <li><strong>Features:</strong> Highlighting is used to show mismatched entries, cell-origin tooltips 

(e.g., "C12: Phase Offset"), and sync indicators if values diverge.</li>

  </ul>

  <div class="code-block">

    <pre><code>% MATLAB Output

phi = 0.89; % from cell C12

% ...

</code></pre>

  </div>

  <p>Ensures that regression values, LaTeX previews, and final code exports all remain in sync. Especially 

important when formulas are derived partially from sidebar input and partially from sheet cells.</p>

</section>

<!-- ========================================================= -->

<!-- 10.10.6.1 -- Screenshot guide: Sheet 
®
 Fit 
®
 `.m` -->

<!-- ========================================================= -->

<section id="10.10.6.1">

  <h3>10.10.6.1 -- Screenshot guide: Sheet 
®
 Fit 
®
 <code>.m</code></h3>

  <p>This sub-section provides a step-by-step annotated screenshot sequence documenting the full workflow from

 spreadsheet input to MATLAB script export.</p>

  <ol>

    <li><strong>Start:</strong> Highlight Trial + Time + Position columns in the source sheet. Screenshot 

should show conditional formatting and named ranges if applicable.</li>

    <li><strong>Fit step:</strong> Screenshot shows the fiRun Regressionfl menu action and resulting Regression 

Results sheet output, including parameters like A, b, 
w
.</li>

    <li><strong>Export:</strong> Capture sidebar panel and resulting <code>.m</code> preview window. Emphasize

 options like toggling export metadata, verifying variable sync, and LaTeX comparison.</li>

  </ol>

  <p>This section is particularly helpful for documentation, onboarding new users, and classroom tutorials. 

Use arrows, callouts, and labels in all visuals. Include example annotations like fiClick to Run Fitfl or fiNamed

 Range: TrialBlock1fl.</p>

</section>

<!-- ============================== -->

<!-- 10.10.6.2 -- Export report as `.pdf`, `.docx`, or HTML -->

<!-- ============================== -->

<h4 id="10-10-6-2">10.10.6.2 -- Export report as <code>.pdf</code>, <code>.docx</code>, or HTML</h4>

<p>

This function allows users to generate a complete export report of their modeling and fitting process. The 

report may be used for submissions, archiving, or comparison.

</p>

<p><strong>Supported formats:</strong></p>

<ul>

  <li><code>.pdf</code> -- for submission or printing</li>

  <li><code>.docx</code> -- for editable reports or collaborative feedback</li>

  <li><code>.html</code> -- for embedding or preview inside the sidebar</li>

</ul>

<p><strong>Included sections:</strong></p>

<ul>

  <li>Input data table (from TrialBlock named range)</li>

  <li>Regression summary (fit model, R², parameters)</li>

  <li><code>.m</code> script preview (full script with annotations)</li>

</ul>

<p>

Users can toggle sections using checkboxes (e.g., include regression, include chart). Generated using Google 

Docs API (for .docx and .pdf) or <code>HtmlService</code> (for HTML preview). Export metadata (timestamp, user

 ID, trial) is logged for traceability.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-export-report">Export Report</a>, <a href="#glossary-google-

docs-api">Google Docs API</a>, <a href="#glossary-html-preview">HTML Preview</a></p>

<!-- ============================== -->

<!-- 10.10.6.3 -- Annotated `.m` with color coding (educational version) -->

<!-- ============================== -->

<h4 id="10-10-6-3">10.10.6.3 -- Annotated <code>.m</code> with color coding (educational version)</h4>

<p>

This export mode adds color-coded sections and inline educational comments to the generated MATLAB file. It's 

designed to help students understand the function of each block.

</p>

<p><strong>Color-coding (viewed in HTML preview):</strong></p>

<ul>

  <li><span style="color:green;"><code>% Parameter Declarations</code></span> -- all constants like A, b, 

w</li>

  <li><span style="color:blue;"><code>% Model Function</code></span> -- damped cosine definition</li>

  <li><span style="color:orange;"><code>% Plot Section</code></span> -- graphing commands</li>

</ul>

<p><strong>Example:</strong></p>

<pre><code>

% Parameter Declarations

A = 1.23;   % Amplitude (from Regression)


b = 0.15;   % Damping coefficient

w = 6.28;   % Angular frequency

% Model Function

f = A*cos(w*t + phi).*exp(-b*t) + C;

% Plot Section

plot(t, f);

title('Fitted Oscillation Model');

</code></pre>

<p>

Students can use these annotations to understand how the data was translated into code. Teachers can enable or

 disable this feature using a sidebar toggle: fiEducational Mode ON/OFFfl.

</p>

<p><strong>Glossary:</strong> <a href="#glossary-educational-mode">Educational Mode</a>, <a href="#glossary-

color-annotation">Color Annotation</a>, <a href="#glossary-matlab-script-block">Script Block</a></p>

<!-- ============================================ -->

<!-- 10.10.6.4 -- Option to zip `.m`, `.csv`, and preview chart -->

<!-- ============================================ -->

<section id="10.10.6.4">

  <h3>10.10.6.4 -- Option to zip <code>.m</code>, <code>.csv</code>, and preview chart</h3>

  <p>

    This final export utility allows bundling all relevant output artifacts into a single compressed ZIP 

archive. When enabled, it creates a package that may include:

  </p>

  <ul>

    <li>The generated MATLAB <code>.m</code> script</li>

    <li>The corresponding exported <code>.csv</code> trial data</li>

    <li>Any chart previews generated during the regression preview step (as <code>.png</code> or 

<code>.pdf</code>)</li>

  </ul>

  <p>

    This option is especially useful for students submitting assignments, researchers archiving export logs, 

or collaborative teams sharing datasets and code with consistent context.

  </p>

  <p>

    If enabled, the script auto-generates a folder (or uses a default export path) and names the archive based

 on either trial ID, timestamp, or user-specified suffix (e.g. <code>trial_001_bundle.zip</code>).

  </p>

  <p>

    Internally, it uses the Google Apps Script ZIP file API (via <code>Utilities.zip()</code>) to assemble the

 archive. A flag in the export configuration (e.g., <code>includeZipExport = true</code>) governs whether this

 option is triggered.

  </p>

  <p>

    Advanced options (sidebar or settings menu):

    <ul>

      <li>Toggle: include LaTeX preview as a PDF or image in archive</li>

      <li>Filename suffixes like <code>_report.zip</code>, <code>_debug.zip</code> based on context</li>

      <li>Upload ZIP directly to Drive or offer download link in UI</li>

    </ul>

  </p>

  <p>

    This ZIP export ensures reproducibility, audit trails, and transportability. It also supports Drive 

versioning for backup-aware environments.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.11.1.1 -- Write template with placeholders           -->

<!-- ====================================================== -->

<section id="10.11.1.1">

  <h4>10.11.1.1 -- Write template with placeholders (<code>%%ANCHOR_PARAM%%</code>)</h4>

  <p>

    Exportable MATLAB templates for regression are designed using a tag-based placeholder system. These 

placeholders mark key

    insertion points in the template and are written using double percent signs (e.g., 

<code>%%ANCHOR_PARAM%%</code>,

    <code>%%ANCHOR_BODY%%</code>, <code>%%ANCHOR_META%%</code>). Each placeholder is substituted at runtime 

with dynamic content

    sourced from user parameters, model formulas, or configuration settings.

  </p>

  <p>

    Templates use standard MATLAB comment conventions (<code>%</code>) and are structured for readability and 

preservation of logic.

    Placeholder markers are inserted on individual lines or in-line, depending on the complexity of the 

substitution logic.

  </p>

  <details>

    <summary>
n
 Example: Default Damped Oscillation Template with Anchors</summary>

    <pre><code class="language-matlab">% Regression Model Template -- Inserted Anchors Below

function y = fitted_model(t, params)

  %%% PARAMETER DECLARATION BLOCK


  %%ANCHOR_PARAM%%

  %%% FUNCTION BODY BLOCK

  y = %%ANCHOR_BODY%%;

end</code></pre>

  </details>

  <p>

    Templates can be manually authored or created using an assisted editor interface. The use of clearly 

defined anchors ensures

    compatibility across multiple regression modes and supports automatic verification of required elements 

before export.

  </p>

  <ul>

    <li>
n
 All templates <strong>must include</strong> <code>%%ANCHOR_PARAM%%</code> and 

<code>%%ANCHOR_BODY%%</code> to be valid.</li>

    <li>
nn
 Anchors are parsed during preprocessing and stored for substitution traceability.</li>

    <li>
n
 Comment blocks outside anchors are preserved for human readability.</li>

  </ul>

  <p><em>See also:</em> <a href="#10.11.2.1">10.11.2.1 OE Detect anchors in template</a>, <a 

href="#11.10.3.3">11.10.3.3 OE Mapping spreadsheet strings into LaTeX</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.1.2 -- Insert into hidden sheet or user-editable table -->

<!-- ====================================================== -->

<section id="10.11.1.2">

  <h4>10.11.1.2 -- Insert into hidden sheet or user-editable table</h4>

  <p>

    MATLAB export templates can be stored either in a dedicated <strong>hidden config sheet</strong> or as 

part of an interactive,

    user-editable sidebar. The hidden sheet option allows advanced users and administrators to manage reusable

 templates programmatically,

    while the sidebar table provides an accessible interface for modification.

  </p>

  <p>

    A typical template storage sheet includes:

  </p>

  <ul>

    <li><strong>Column A</strong>: Template name (e.g., "Default Damped Cosine")</li>

    <li><strong>Column B</strong>: Anchor list summary (auto-generated or manually inserted)</li>

    <li><strong>Column C</strong>: Full template text (multi-line enabled)</li>

    <li><strong>Column D</strong>: Optional notes or version history</li>

  </ul>

  <details>

    <summary>
n
 Example Structure of Hidden Sheet "TemplateConfig"</summary>

    <pre><code class="language-spreadsheet">| Template Name        | Anchors                  | Template Code

                   | Notes         |

|----------------------|--------------------------|----------------------------------|---------------|

| Damped Oscillator    | %%ANCHOR_PARAM%%,...     | function y = model(t,params)... | V1.1, default |

| Exponential Decay    | %%ANCHOR_BODY%%,...      | function y = decay(t,params)... | Requires 
f
    

|</code></pre>

  </details>

  <p>

    If the template is shown in the sidebar, users may select it from a dropdown, view its structure in a live

 preview, and edit

    its parameters or content inline. This enhances transparency and enables safe collaborative editing.

  </p>

  <p>

    Internally, templates from either location are loaded as strings, validated, and cached in memory. For 

example:

  </p>

  <pre><code class="language-javascript">const sheet = 

SpreadsheetApp.getActive().getSheetByName('TemplateConfig');

const templateText = sheet.getRange(row, 3).getValue();</code></pre>

  <p>

    This design allows:

  </p>

  <ul>

    <li>
nn
 Multiple named templates, each with metadata and version tags.</li>

    <li>
n
 Live switching between versions for A/B testing or debug runs.</li>

    <li>
n
 Read-only mode for locked templates in shared environments.</li>

  </ul>

  <p><em>See also:</em> <a href="#10.11.5.5">10.11.5.5 OE Template name, description, and author</a>, <a 

href="#11.7.1.2">11.7.1.2 OE Header structure in logs</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.1.3 -- Support external `.txt` template files     -->

<!-- ====================================================== -->

<section id="10.11.1.3">

  <h4>10.11.1.3 -- Support external <code>.txt</code> template files</h4>

  <p>


    To improve flexibility and portability, users may upload external <code>.txt</code> or <code>.m</code> 

files to be used as

    export templates. These files can be stored temporarily (for one export) or saved into a managed internal 

repository for

    repeated use.

  </p>

  <p>Accepted file types include:</p>

  <ul>

    <li><strong>.txt</strong> -- Plain-text templates with anchor tags</li>

    <li><strong>.m</strong> -- Native MATLAB files, with or without placeholders</li>

  </ul>

  <p>

    Templates uploaded via the sidebar are parsed immediately to check structure and anchor compatibility.

    A preview is displayed alongside validation results. Internally, the file contents are read using the 

Drive API:

  </p>

  <pre><code class="language-javascript">const file = DriveApp.getFileById(fileId);

const content = file.getBlob().getDataAsString();

parseAnchors(content);</code></pre>

  <p>

    Uploaded templates may be tagged with metadata for version tracking and user attribution. This enables

    collaborative sharing and the development of a library of reusable `.m` templates for different modeling 

cases

    (e.g. single decay, dual harmonic, constrained models).

  </p>

  <p>

    Files can be permanently saved to a designated folder (e.g., <code>TemplateLibrary/</code>) and indexed in

 the internal

    sheet <code>TemplateConfig</code>. Each record stores:

  </p>

  <ul>

    <li>
n
 File name and Drive ID</li>

    <li>
n
 Uploaded by (email or user ID)</li>

    <li>
n
 Last modified timestamp</li>

    <li>
n
 Associated anchors and model category</li>

  </ul>

  <p><em>See also:</em> <a href="#10.11.5.1">10.11.5.1 OE Upload `.m` base template</a>, <a 

href="#12.4.2.3">12.4.2.3 OE Authorship path</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.1.4 -- Validate syntax of template before use     -->

<!-- ====================================================== -->

<section id="10.11.1.4">

  <h4>10.11.1.4 -- Validate syntax of template before use</h4>

  <p>

    Before any template is accepted for injection into an exportable `.m` file, it undergoes a rigorous 

validation check.

    This process ensures that:

  </p>

  <ul>

    <li>
4
n
 All required anchors are present (e.g., <code>%%ANCHOR_PARAM%%</code>)</li>

    <li>
n
 There are no illegal characters, line breaks, or malformed structures</li>

    <li>
n
 Comments and MATLAB-specific syntax (e.g., <code>function</code>, <code>end</code>) are preserved 

correctly</li>

  </ul>

  <p>Templates with missing or malformed anchors trigger an immediate warning:</p>

  <pre><code class="language-javascript">if (!content.includes("%%ANCHOR_BODY%%")) {

  ui.alert("Error: Template is missing required anchor %%ANCHOR_BODY%%.");

  return;

}</code></pre>

  <p>

    For safety, preview and debug tools highlight unresolved or incorrectly placed anchors. Optional

    advanced diagnostics include:

  </p>

  <ul>

    <li>
n
 Unmatched start/end of function definitions</li>

    <li>
n
 Comments not starting with `%`</li>

    <li>
n
 Floating operators (e.g., <code>A = 5 +</code>)</li>

  </ul>

  <p>

    Errors are color-coded and displayed in a modal or sidebar depending on the user's context.

    These diagnostics support debugging of user-uploaded templates and reduce formatting breakage during 

export.

  </p>

  <details>

    <summary>
nn
 Example Warning Output (Preview Modal)</summary>






  </details>

  <p><em>See also:</em> <a href="#10.11.4.1">10.11.4.1 OE Check that all anchors are filled</a>, <a 

href="#10.14.1.2">10.14.1.2 OE Invisible whitespace</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.2.1 -- Detect anchors in template                 -->

<!-- ====================================================== -->

<section id="10.11.2.1">

  <h4>10.11.2.1 -- Detect anchors in template</h4>

  <p>

    After loading a template, the script automatically scans for all predefined anchor tags. These 

anchors--marked by double

    percent signs like <code>%%ANCHOR_PARAM%%</code>--represent points in the template where dynamic content 

will be inserted.

    A detection pass ensures no critical anchors are missing or malformed.

  </p>

  <p>

    The detection uses regular expressions to match the pattern <code>%%[A-Z_]+%%</code> and builds a list of 

all discovered tags:

  </p>

  <pre><code class="language-javascript">const anchorRegex = /%%[A-Z_]+%%/g;

const foundAnchors = templateContent.match(anchorRegex) || [];</code></pre>

  <p>

    A minimum set of anchors is required for successful export. If any required tag is absent, an error is 

thrown

    and shown in the sidebar or error log:

  </p>

  <ul>

    <li>
n
 Detected anchors are displayed in a checklist UI for user confirmation</li>

    <li>
n
 Missing required anchors trigger validation errors before export</li>

    <li>
n
 Duplicate anchors are flagged but not blocked (marked for review)</li>

  </ul>

  <details>

    <summary>
n
 Common Anchor Types</summary>

    <ul>

      <li><code>%%ANCHOR_PARAM%%</code> -- Variable declarations</li>

      <li><code>%%ANCHOR_BODY%%</code> -- Main regression or formula body</li>

      <li><code>%%ANCHOR_META%%</code> -- Export settings metadata</li>

      <li><code>%%ANCHOR_COMMENTS%%</code> -- Optional documentation block</li>

    </ul>

  </details>

  <p>

    Anchor scanning also enables compatibility with advanced features like conditional block replacements and

    template introspection. These mappings are reused throughout the injection and preview pipeline.

  </p>

  <p><em>See also:</em> <a href="#10.11.3.1">10.11.3.1 OE <code>template.replace()</code> logic</a>, <a 

href="#11.3.2.3">11.3.2.3 OE Parameter interpretation</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.2.2 -- Replace with content from parameter cell block -->

<!-- ====================================================== -->

<section id="10.11.2.2">

  <h4>10.11.2.2 -- Replace with content from parameter cell block</h4>

  <p>

    Once the anchors are detected and validated, the script replaces them with actual content pulled from 

spreadsheet cells.

    For <code>%%ANCHOR_PARAM%%</code>, this involves reading the parameter values (such as <code>A</code>, 

<code>b</code>,

    <code>\phi</code>) from the processing sheet and constructing the MATLAB-compatible declarations.

  </p>

  <p>

    These declarations are formatted based on export preferences, typically using the format:

    <code class="language-matlab">A = 2.3;</code> or with comments:

    <code class="language-matlab">A = 2.3;  % Amplitude</code>

  </p>

  <p>

    The core logic for generation is:

  </p>

  <pre><code class="language-javascript">let paramBlock = "";

params.forEach(param => {

  const comment = param.description ? `  % ${param.description}` : "";

  paramBlock += `${param.name} = ${param.value};${comment}\n`;

});

template = template.replace("%%ANCHOR_PARAM%%", paramBlock.trim());</code></pre>

  <p>

    Parameter values may be sourced from a dedicated cell range (e.g., <code>Processing!C2:D10</code>), or 

automatically

    parsed from a regression summary block. Additional options allow:


  </p>

  <ul>

    <li>
n
 Comment tagging: show parameter meaning beside value</li>

    <li>
n
 Units: optionally include (e.g., <code>% [Hz]</code>) from config metadata</li>

    <li>
n
 Formatting style: decimal precision controlled by export setting</li>

  </ul>

  <details>

    <summary>
n
 Sample Output</summary>

    <pre><code class="language-matlab">% Parameters from sheet

A = 3.8;        % Amplitude

b = 0.27;       % Damping coefficient

omega = 6.28;   % Angular frequency

phi = 0.1;      % Phase shift</code></pre>

  </details>

  <p>

    These values are later used in the substituted <code>%%ANCHOR_BODY%%</code> to form the final equation, 

ensuring

    clear traceability between spreadsheet input and MATLAB output.

  </p>

  <p><em>See also:</em> <a href="#10.11.2.3">10.11.2.3 OE Replace function body</a>, <a 

href="#11.3.1.1">11.3.1.1 OE A: Amplitude</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.2.3 -- Replace function body with model block     -->

<!-- ====================================================== -->

<section id="10.11.2.3">

  <h4>10.11.2.3 -- Replace function body with model block</h4>

  <p>

    The <code>%%ANCHOR_BODY%%</code> placeholder is dynamically replaced with the regression formula or model 

equation

    constructed from the selected parameters and formula string. This defines the actual computation for 

<code>y(t)</code>

    in the exported MATLAB file.

  </p>

  <p>

    The model is often a damped oscillation function like:

    <code class="language-matlab">y = A * cos(omega * t + phi) .* exp(-b * t);</code>

    but may vary based on the selected regression type or custom formula input.

  </p>

  <p>

    Replacement logic preserves formatting and allows comment tagging if configured. The formula is validated 

for syntax and

    optionally wrapped for multiline clarity if exceeding length thresholds.

  </p>

  <pre><code class="language-javascript">const modelBody = formulaString.replaceAll("^", ".^").replaceAll("*",

 ".*");

template = template.replace("%%ANCHOR_BODY%%", modelBody);</code></pre>

  <details>

    <summary>
n
 Example Model Insertion</summary>

    <pre><code class="language-matlab">y = A * cos(omega * t + phi) .* exp(-b * t);  % Damped oscillation 

fit</code></pre>

  </details>

  <p>

    Optionally, helper functions can be added directly into the body block using additional anchors (e.g., 

<code>%%ANCHOR_HELPER%%</code>).

    These support user-defined models or multi-line expressions.

  </p>

  <ul>

    <li>
n
 Formula line split: long expressions auto-wrapped using continuation</li>

    <li>
n
 Element-wise operators (<code>.*</code>, <code>.^</code>) enforced for vector compatibility</li>

    <li>
n
 Inline comment block appended if enabled in config</li>

  </ul>

  <p>

    This section forms the mathematical core of the `.m` file, making its accuracy and formatting critical for

 successful execution.

  </p>

  <p><em>See also:</em> <a href="#10.11.2.4">10.11.2.4 OE Preserve spacing and comments</a>, <a 

href="#11.3.2.1">11.3.2.1 OE Equation structure</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.2.4 -- Preserve template spacing and comments     -->

<!-- ====================================================== -->

<section id="10.11.2.4">

  <h4>10.11.2.4 -- Preserve template spacing and comments</h4>

  <p>

    One of the core features of the injection engine is to preserve the visual and structural formatting of 

the user-supplied template.

    This ensures that line spacing, indentation, and comment alignment remain unchanged during anchor 

replacement.


  </p>

  <p>

    The script uses a token-aware replacement engine that avoids unintended line breaks or shifts. If an 

anchor is located

    mid-line, the engine ensures inserted content aligns with the leading space or tab characters of the 

original line.

  </p>

  <pre><code class="language-javascript">const anchorLine = template.match(/^(\s*)%%ANCHOR_BODY%%/m);

const indent = anchorLine ? anchorLine[1] : "";

const injected = modelBody.split("\n").map(line => indent + line).join("\n");

template = template.replace("%%ANCHOR_BODY%%", injected);</code></pre>

  <p>

    This allows the use of indented anchor sections in MATLAB functions, where maintaining consistent 

structure is critical.

  </p>

  <ul>

    <li>
n
 Comment lines (<code>%</code>) before and after each block are retained</li>

    <li>
n
 Blank lines and extra spacing respected unless <code>collapseWhitespace</code> is enabled</li>

    <li>
n
 Inline comments survive anchor insertion as long as line anchors are not overwritten</li>

  </ul>

  <details>

    <summary>
n
 Before and After: Preserved Formatting</summary>

    <pre><code class="language-matlab">% Body block begins here

  y = A * cos(omega * t + phi) .* exp(-b * t);  % Fit function

% End of model</code></pre>

  </details>

  <p>

    The export preview shows injected sections with original indentation restored. Any layout breakages due to

 variable length

    or wrapped lines are flagged visually for user correction.

  </p>

  <p><em>See also:</em> <a href="#10.11.4.3">10.11.4.3 OE Full output preview</a>, <a 

href="#10.13.3.3">10.13.3.3 OE Allow multi-line comments</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.3.1 -- `template.replace("%%VAR%%", value)`       -->

<!-- ====================================================== -->

<section id="10.11.3.1">

  <h4>10.11.3.1 -- <code>template.replace("%%VAR%%", value)</code></h4>

  <p>

    The core substitution mechanism for injecting content into a MATLAB export template uses JavaScript(TM)s

    <code>String.prototype.replace()</code> method. Each placeholder key is mapped to a corresponding 

replacement value

    using a dictionary of tagOEvalue pairs.

  </p>

  <p>

    For example, to insert parameters or model lines into the template:

  </p>

  <pre><code class="language-javascript">const tagMap = {

  "%%ANCHOR_PARAM%%": paramBlock,

  "%%ANCHOR_BODY%%": modelFormula,

  "%%ANCHOR_META%%": exportSettingsBlock

};

Object.entries(tagMap).forEach(([key, value]) => {

  template = template.replace(key, value);

});</code></pre>

  <p>

    This system ensures deterministic, one-pass replacement of anchor tags. Recursive replacements are 

explicitly avoided

    by validating that values themselves do not contain unprocessed tags.

  </p>

  <ul>

    <li>
n
 All keys are replaced once per export cycle</li>

    <li>
n
 No re-evaluation of already-replaced blocks</li>

    <li>
n
 Logging of each substitution for debug preview</li>

  </ul>

  <p>

    Advanced versions support mapping from user-defined keys, e.g. <code>%%USER_NOTE%%</code>, by extending 

the tagMap

    with dynamically detected user fields.

  </p>

  <details>

    <summary>
n
 Example: KeyOEValue Injection Map</summary>

    <pre><code class="language-json">{

  "%%ANCHOR_PARAM%%": "A = 2.5;\nb = 0.3;",

  "%%ANCHOR_BODY%%": "y = A * cos(w * t + phi) .* exp(-b * t);",

  "%%ANCHOR_META%%": "% Exported by Script v5.1"

}</code></pre>

  </details>


  <p><em>See also:</em> <a href="#10.11.3.3">10.11.3.3 OE Map of injected tags</a>, <a 

href="#10.11.4.3">10.11.4.3 OE Output preview</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.3.2 -- Sanitize inputs before replacement         -->

<!-- ====================================================== -->

<section id="10.11.3.2">

  <h4>10.11.3.2 -- Sanitize inputs before replacement</h4>

  <p>

    Before any string is injected into the MATLAB template, it must be sanitized to ensure compatibility with 

MATLAB syntax

    and prevent injection of illegal or malformed characters. This includes escaping reserved characters and 

trimming

    invisible whitespace or control codes.

  </p>

  <p>

    Typical sanitation steps include:

  </p>

  <ul>

    <li>
nn
 Remove or replace illegal characters like <code>\</code>, <code>"</code>, <code>%</code> (inside 

strings)</li>

    <li>
n
 Strip zero-width spaces, line breaks, and UTF-8 BOM markers</li>

    <li>
n
 Escape characters in comments or quotes as needed</li>

  </ul>

  <pre><code class="language-javascript">function sanitize(value) {

  return value

    .replace(/[\u200B-\u200D\uFEFF]/g, '') // remove invisible

    .replace(/\\/g, '\\\\')               // escape backslashes

    .replace(/"/g, '\\"')                 // escape quotes

    .trim();

}</code></pre>

  <p>

    If values include expressions (e.g., <code>A * cos(w * t)</code>), the system preserves formatting but 

ensures

    whitespace is normalized, and line breaks are inserted at safe boundaries.

  </p>

  <details>

    <summary>
n
 Example: Sanitized vs Raw Input</summary>

    <pre><code class="language-matlab">% Raw (invalid)

A = fi2.5fl\ %
n

% Sanitized

A = 2.5;  % Amplitude</code></pre>

  </details>

  <p>

    These precautions reduce export errors and ensure MATLAB compatibility during runtime. Additional rules 

may be enforced

    by export settings (e.g., strip non-ASCII).

  </p>

  <p><em>See also:</em> <a href="#10.14.1.1">10.14.1.1 OE Strip or convert Unicode</a>, <a 

href="#11.10.3.4">11.10.3.4 OE Escaping characters</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.3.3 -- Map of all injected tags (object key
®
value) -->

<!-- ====================================================== -->

<section id="10.11.3.3">

  <h4>10.11.3.3 -- Map of all injected tags (object key
®
value)</h4>

  <p>

    During the export process, a full dictionary of template tags and their corresponding injected values is 

created and optionally displayed for debugging or inspection. This tag-value map serves as the internal state 

of the injection engine and ensures transparency in what is being substituted where.

  </p>

  <p>

    The mapping is stored as a JavaScript object and may look like this:

  </p>

  <pre><code class="language-json">{

  "%%ANCHOR_PARAM%%": "A = 2.5;\nb = 0.3;",

  "%%ANCHOR_BODY%%": "y = A * cos(w * t + phi) .* exp(-b * t);",

  "%%ANCHOR_META%%": "% Exported by script"

}</code></pre>

  <p>

    This structure is useful in the following contexts:

  </p>

  <ul>

    <li>
n
 Previewing substitutions before file generation</li>

    <li>
n
 Debugging failed exports due to missing or malformed tags</li>

    <li>
n
 Comparing different export runs (e.g., student vs teacher version)</li>

  </ul>

  <p>

    If fiAdvanced Modefl is enabled, this tag map is shown in a sidebar window with collapsible sections for 


each tag.

    Long content (e.g., full formulas) is collapsed with a toggle.

  </p>

  <details>

    <summary>
n
 Sidebar Features</summary>

    <ul>

      <li>Clickable jump-to-template preview anchor</li>

      <li>Copy-to-clipboard buttons for each tag</li>

      <li>Warnings if value is empty or missing required fields</li>

    </ul>

  </details>

  <p>

    This mapping is also logged internally when using the <code>dry-run</code> feature and may be stored 

temporarily for export history auditing.

  </p>

  <p><em>See also:</em> <a href="#10.11.4.5">10.11.4.5 OE Dry-run simulation</a>, <a href="#12.3.2.3">12.3.2.3 

OE Column mismatch bug</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.3.4 -- Inline comment tagging                     -->

<!-- ====================================================== -->

<section id="10.11.3.4">

  <h4>10.11.3.4 -- Inline comment tagging (e.g., <code>%%param: a = ...</code>)</h4>

  <p>

    To make exported code more readable and informative, the system supports optional inline comment tagging 

beside each injected line. These comments document the variable(TM)s origin, interpretation, or source.

  </p>

  <p>

    For example, a parameter declaration like:

  </p>

  <pre><code class="language-matlab">b = 0.32;  % Damping coefficient from trial #4</code></pre>

  <p>

    can be auto-generated by appending metadata from the regression summary or template config:

  </p>

  <pre><code class="language-javascript">if (commentMode) {

  comment = `  % ${description || "auto-generated"}`;

}

line = `${key} = ${value};${comment}`;</code></pre>

  <ul>

    <li>
n
 Comments may include units, e.g., <code>% [Hz]</code></li>

    <li>
n
 Fit origin: fifrom CSV importfl or fimanual overridefl</li>

    <li>
nn
 Optional source UID or filename reference</li>

  </ul>

  <p>

    These comments are user-toggleable in the export config:

    <code>SHOW_INLINE_COMMENTS = true</code>. Disabling it creates a cleaner export version, ideal for 

presentations or assignment submission.

  </p>

  <details>

    <summary>
n
 Example: With and Without Comments</summary>

    <pre><code class="language-matlab">% With comments

phi = 1.57;   % Phase shift (rad)

% Without

phi = 1.57;</code></pre>

  </details>

  <p>

    Comment tagging is also logged in the debug preview and appears in the metadata block if audit mode is 

active.

  </p>

  <p><em>See also:</em> <a href="#10.13.3.1">10.13.3.1 OE Metadata block formatting</a>, <a 

href="#11.3.2.3">11.3.2.3 OE Parameter interpretation</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.4.1 -- Check that all anchors are filled           -->

<!-- ====================================================== -->

<section id="10.11.4.1">

  <h4>10.11.4.1 -- Check that all anchors are filled</h4>

  <p>

    Before finalizing the export of the MATLAB `.m` file, the script performs a validation pass to ensure that

 all template anchors have been successfully replaced. This protects against broken exports caused by unfilled

 or forgotten placeholders like <code>%%ANCHOR_PARAM%%</code> or <code>%%ANCHOR_BODY%%</code>.

  </p>

  <p>

    The script uses a regular expression check across the full template to identify unresolved anchor 

patterns:

  </p>

  <pre><code class="language-javascript">const unfilled = template.match(/%%[A-Z_]+%%/g);

if (unfilled) {

  Logger.log("Unfilled anchors: " + unfilled.join(", "));


  throw new Error("Export failed: Missing anchors.");

}</code></pre>

  <p>

    If any anchor remains unfilled, the export halts and an error is shown to the user with a list of 

unresolved tags. This prevents incomplete or syntactically broken `.m` files from being saved or uploaded.

  </p>

  <ul>

    <li>
n
 Stops export on unresolved anchor</li>

    <li>
n
 Full list of missing tags logged in ErrorLog</li>

    <li>
n
 Anchor map comparison used to validate template completeness</li>

  </ul>

  <details>

    <summary>
n
 Common Anchor Errors</summary>

    <ul>

      <li>Typo in anchor name (e.g., <code>%%ANCHOR_PARMS%%</code>)</li>

      <li>Missing function body or parameter block</li>

      <li>Template loaded before formula generation completed</li>

    </ul>

  </details>

  <p>

    Visual alerts are also shown in the preview sidebar, highlighting which sections were left empty. A red 

warning bar appears if critical blocks are blank.

  </p>

  <p><em>See also:</em> <a href="#10.11.4.2">10.11.4.2 OE Error log for unresolved tags</a>, <a 

href="#12.3.2.3">12.3.2.3 OE Column mismatch bug</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.4.2 -- Log unresolved tags to Error Log            -->

<!-- ====================================================== -->

<section id="10.11.4.2">

  <h4>10.11.4.2 -- Log unresolved tags to Error Log</h4>

  <p>

    If the export engine detects unresolved template anchors, it not only halts the export process but also 

logs detailed information about the failure in the <strong>ErrorLog</strong> sheet. This supports long-term 

debugging and accountability.

  </p>

  <p>

    Each log entry includes the following fields:

  </p>

  <ul>

    <li>
n
 <strong>Template Name</strong> (from filename or header)</li>

    <li>
n
 <strong>Unfilled Tags</strong> (e.g., <code>%%ANCHOR_BODY%%</code>)</li>

    <li>
n
 <strong>Timestamp</strong> of the export attempt</li>

    <li>
n
 <strong>User Email</strong> if session permits</li>

  </ul>

  <pre><code class="language-javascript">ErrorLog.appendRow([

  new Date(),

  "EXPORT",

  "Missing anchor(s): " + missing.join(", "),

  templateName,

  Session.getActiveUser().getEmail()

]);</code></pre>

  <p>

    Logging unresolved anchors ensures that even failed exports are traceable, which is crucial in classroom 

or multi-user environments.

  </p>

  <details>

    <summary>
n
 Example Error Log Entry</summary>

    <pre><code class="language-plain">[10:21 AM] EXPORT -- Missing anchor(s): %%ANCHOR_BODY%%, %%ANCHOR_META%% 

-- Template: regression_template.m -- User: student@school.edu</code></pre>

  </details>

  <p>

    If unresolved anchors are a recurring issue, the log can be used to generate summary stats or trace faulty

 templates.

  </p>

  <p><em>See also:</em> <a href="#11.7.1.2">11.7.1.2 OE ErrorLog headers</a>, <a href="#11.7.3.3">11.7.3.3 OE 

Auto-flag broken exports</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.4.3 -- Display full output preview for user check -->

<!-- ====================================================== -->

<section id="10.11.4.3">

  <h4>10.11.4.3 -- Display full output preview for user check</h4>

  <p>

    Before saving or exporting a finalized <code>.m</code> script, the system offers a complete output preview

 within a

    modal or sidebar. This step allows users to visually inspect the result of the template injection process 

and confirm

    that all content has been substituted correctly.


  </p>

  <p>

    The preview highlights each injected section and shows both the original template markers and their 

replacements. For

    example, replaced blocks like <code>%%ANCHOR_BODY%%</code> are shown in green, while unresolved tags are 

shown in red.

  </p>

  <pre><code class="language-html">&lt;div class="preview-block"&gt;

  &lt;h5&gt;Final Script Preview&lt;/h5&gt;

  &lt;pre&gt;A = 1.2;

b = 0.4;

y = A * cos(w * t + phi) .* exp(-b * t);

% Exported by system at 10:35 AM

&lt;/pre&gt;

&lt;/div&gt;</code></pre>

  <p>

    The preview interface includes options to:

  </p>

  <ul>

    <li>
nn
 Toggle original vs replaced view</li>

    <li>
n
 Copy to clipboard for manual use</li>

    <li>
n
 Expand or collapse long blocks</li>

  </ul>

  <details>

    <summary>
n
 User Confirmation Options</summary>

    <ul>

      <li>
n
 Proceed with export</li>

      <li>
n
 Cancel and edit inputs</li>

      <li>
n
 Save to Drive without finalizing</li>

    </ul>

  </details>

  <p>

    This preview step reduces export mistakes and gives users a chance to spot syntax or logic errors 

introduced during

    variable mapping or anchor replacement.

  </p>

  <p><em>See also:</em> <a href="#10.11.4.4">10.11.4.4 OE Color warnings</a>, <a href="#10.14.1.4">10.14.1.4 OE 

Replacement result</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.4.4 -- Color warnings in preview sidebar          -->

<!-- ====================================================== -->

<section id="10.11.4.4">

  <h4>10.11.4.4 -- Color warnings in preview sidebar</h4>

  <p>

    The output preview sidebar incorporates visual indicators for common export problems using color-coded 

styles and

    warning annotations. This aids in readability and helps the user quickly detect problematic or missing 

content.

  </p>

  <p>

    Warnings are shown in the following styles:

  </p>

  <ul>

    <li><strong style="color: red;">Red:</strong> Unresolved anchor or syntax error</li>

    <li><strong style="color: orange;">Orange:</strong> Empty variable or placeholder with default 

fallback</li>

    <li><strong style="color: green;">Green:</strong> Successful injection or validated block</li>

  </ul>

  <pre><code class="language-matlab">% WARNING: Unresolved anchor: %%ANCHOR_META%%

% NOTE: Default A = 1.0 used

y = A * cos(w * t + phi) .* exp(-b * t);</code></pre>

  <p>

    In the HTML interface, color is applied with inline CSS or Tailwind-style class mappings like:

    <code>text-red-600</code>, <code>text-orange-500</code>, and <code>bg-gray-200</code>.

  </p>

  <details>

    <summary>
n
 Visual Legend</summary>

    <ul>

      <li><code class="text-green-500">
3
 Injected</code> -- Variable replaced successfully</li>

      <li><code class="text-red-500">
n
 Missing</code> -- Required tag not found or filled</li>

      <li><code class="text-orange-500">~ Empty</code> -- Placeholder filled with blank/default</li>

    </ul>

  </details>

  <p>

    Users can override warnings if confident, but the export script logs all such overrides to the ErrorLog or

    ExportLog for traceability.

  </p>

  <p><em>See also:</em> <a href="#11.7.1.3">11.7.1.3 OE Log levels and color codes</a>, <a 


href="#10.14.2.4">10.14.2.4 OE Insert warning comment</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.4.5 -- Optional dry-run simulation                -->

<!-- ====================================================== -->

<section id="10.11.4.5">

  <h4>10.11.4.5 -- Optional dry-run simulation</h4>

  <p>

    To help users understand the output before committing to a final export, the system supports a 

<strong>dry-run simulation</strong> mode. This mode processes the template and applies all substitutions but 

does <em>not</em> save or export the resulting `.m` file. Instead, it shows the output in a <code>read-

only</code> preview panel.

  </p>

  <p>

    The dry-run is useful in multiple scenarios:

  </p>

  <ul>

    <li>
n
 Debugging incomplete anchor mappings</li>

    <li>
n
 Reviewing regression output formatting</li>

    <li>
n
 Testing the result before enabling Drive or GitHub uploads</li>

  </ul>

  <p>

    To activate dry-run mode, users can toggle a config setting or call a menu item:

  </p>

  <pre><code class="language-javascript">if (DRY_RUN_MODE) {

  showSidebarPreview(finalOutput);

  return; // Skip save/export

}</code></pre>

  <p>

    The preview pane includes:

  </p>

  <ul>

    <li>
n
 Scrollable code block with syntax highlighting</li>

    <li>
n
 Colored tags for replaced anchors vs unresolved ones</li>

    <li>
n
 Summary stats: number of tags replaced, warnings, size</li>

  </ul>

  <details>

    <summary>
n
 Dry-run Preview Block Example</summary>

    <pre><code class="language-matlab">%% PARAMETERS

A = 1.3;  % from dataset "trial_6"

b = 0.21;

%% MODEL

y = A * cos(w * t + phi) .* exp(-b * t);</code></pre>

  </details>

  <p>

    If unresolved anchors are detected during a dry-run, a warning is shown, but the export does not fail 

outright. This allows teachers or developers to inspect intermediate progress.

  </p>

  <p><em>See also:</em> <a href="#10.11.4.3">10.11.4.3 OE Output preview</a>, <a href="#10.13.4.1">10.13.4.1 OE 

UI preview of header</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.5.1 -- Allow user to upload `.m` base template    -->

<!-- ====================================================== -->

<section id="10.11.5.1">

  <h4>10.11.5.1 -- Allow user to upload <code>.m</code> base template</h4>

  <p>

    To support greater flexibility and personalization, the export system allows users to upload their own 

MATLAB template files via the sidebar interface. Supported formats include:

  </p>

  <ul>

    <li><strong>.m</strong> -- MATLAB script file (text format)</li>

    <li><strong>.txt</strong> -- Plain text file with placeholder anchors</li>

  </ul>

  <p>

    Upload methods include:

  </p>

  <ul>

    <li>
n
 Drag-and-drop box inside the sidebar</li>

    <li>
n
 Link from Google Drive (Drive Picker)</li>

    <li>
n
 Create new from scratch in the sidebar UI</li>

  </ul>

  <p>

    Once uploaded, the file contents are parsed and validated for expected anchors such as 

<code>%%ANCHOR_PARAM%%</code>, <code>%%ANCHOR_BODY%%</code>, or <code>%%ANCHOR_META%%</code>.

  </p>

  <pre><code class="language-javascript">function handleUpload(fileBlob) {

  const content = fileBlob.getDataAsString();

  validateTemplateAnchors(content);


  storeInTemplateLibrary(content);

}</code></pre>

  <p>

    If errors are detected (e.g., missing anchors, invalid characters), the user is prompted with a detailed 

modal error, and the file is not saved.

  </p>

  <p>

    Successfully validated templates are stored in a hidden sheet or a template list for future reuse.

  </p>

  <p><em>See also:</em> <a href="#10.11.1.3">10.11.1.3 OE Support for external template files</a>, <a 

href="#10.11.5.5">10.11.5.5 OE Template metadata</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.5.2 -- Preview structure in sidebar before use    -->

<!-- ====================================================== -->

<section id="10.11.5.2">

  <h4>10.11.5.2 -- Preview structure in sidebar before use</h4>

  <p>

    After uploading or selecting a MATLAB template, the system provides a visual preview in the sidebar. This 

preview outlines the structure of the template, making it easy to confirm anchor locations and understand how 

the script will be populated.

  </p>

  <p>

    The preview panel includes:

  </p>

  <ul>

    <li>
n
 <strong>Section headers</strong> auto-detected from comments (e.g., <code>%% PARAMETERS</code>)</li>

    <li>
nn
 <strong>Anchors</strong> like <code>%%ANCHOR_BODY%%</code> highlighted with tooltips</li>

    <li>
n
 <strong>Last Modified</strong> and filename metadata</li>

  </ul>

  <pre><code class="language-html">&lt;div class="template-preview"&gt;

  &lt;h5&gt;Template: regression_template.m&lt;/h5&gt;

  &lt;pre&gt;

%% PARAMETERS

%%ANCHOR_PARAM%%

%% MODEL

%%ANCHOR_BODY%%

  &lt;/pre&gt;

&lt;/div&gt;</code></pre>

  <p>

    Anchors are rendered with distinct colors and icons, such as:

  </p>

  <ul>

    <li><span style="color: blue;">
n
 <code>%%ANCHOR_PARAM%%</code></span> -- variable placeholder</li>

    <li><span style="color: green;">
n
 <code>%%ANCHOR_BODY%%</code></span> -- model block</li>

    <li><span style="color: red;">
n
 <code>%%ANCHOR_MISSING%%</code></span> -- missing or unrecognized tag</li>

  </ul>

  <p>

    If structural issues are detected, such as duplicate anchors or incorrect format, they are flagged below 

the preview.

  </p>

  <p><em>See also:</em> <a href="#10.11.4.4">10.11.4.4 OE Color warnings in preview</a>, <a 

href="#10.11.5.3">10.11.5.3 OE Editable fields mapped to placeholders</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.5.3 -- Editable fields mapped to placeholders     -->

<!-- ====================================================== -->

<section id="10.11.5.3">

  <h4>10.11.5.3 -- Editable fields mapped to placeholders</h4>

  <p>

    To allow user customization, each placeholder in the template is linked to an editable input field in the 

sidebar. This interface allows the user to assign values, formulas, or spreadsheet cell references to each 

anchor.

  </p>

  <p>

    Supported input types include:

  </p>

  <ul>

    <li>
n
 Textbox for entering raw values or math expressions</li>

    <li>
n
 Dropdown to link to a named range or dataset</li>

    <li>
n
 Cell anchor picker for selecting a value from the spreadsheet</li>

  </ul>

  <p>

    For example, the anchor <code>%%ANCHOR_PARAM%%</code> may be populated using a sidebar entry like:

  </p>

  <pre><code class="language-html">&lt;label&gt;Parameter Block:&lt;/label&gt;

&lt;textarea name="param_block"&gt;A = 1.5; b = 0.2;&lt;/textarea&gt;</code></pre>

  <p>

    Input validation is performed for each field, checking for:


  </p>

  <ul>

    <li>Syntax errors (e.g., unclosed brackets)</li>

    <li>Missing variable assignments</li>

    <li>Empty required values</li>

  </ul>

  <p>

    All mapped values are then sent to the replacement engine via a key-value object such as:

  </p>

  <pre><code class="language-javascript">{

  "%%ANCHOR_PARAM%%": "A = 1.5; b = 0.2;",

  "%%ANCHOR_BODY%%": "y = A * cos(w*t) * exp(-b*t);"

}</code></pre>

  <p>

    The sidebar tracks each field and includes live previews and validation ticks.

  </p>

  <p><em>See also:</em> <a href="#10.11.3.1">10.11.3.1 OE KeyOEvalue injection map</a>, <a 

href="#10.11.5.4">10.11.5.4 OE Restore defaults option</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.5.4 -- Restore defaults option                    -->

<!-- ====================================================== -->

<section id="10.11.5.4">

  <h4>10.11.5.4 -- Restore defaults option</h4>

  <p>

    Users may accidentally introduce errors into templates during editing. To resolve this, the HelpDialog 

system includes a

    <strong>"Restore Defaults"</strong> feature that reverts the template to its original uploaded or system-

default version.

  </p>

  <p>

    This action is typically triggered by a button in the sidebar:

  </p>

  <pre><code class="language-html">&lt;button onclick="restoreTemplateDefaults()"&gt;Restore 

Defaults&lt;/button&gt;</code></pre>

  <p>

    When clicked, the following happens:

  </p>

  <ul>

    <li>
nn
 All user modifications are discarded</li>

    <li>
n
 The system reloads the template from the internal backup or stored version</li>

    <li>
n
 A lock icon indicates protected sections that cannot be edited without confirmation</li>

  </ul>

  <p>

    Permissions are enforced so only authorized users (e.g., template owner, admin) can restore templates for 

all users. For shared

    documents, restoring defaults affects only the user(TM)s instance unless figlobal resetfl is confirmed.

  </p>

  <p>

    Optional confirmations:

  </p>

  <ul>

    <li>
nn
 Modal alert: fiAre you sure you want to restore the default version of this template?fl</li>

    <li>
n
 Log entry: Restoration event timestamped in ExportLog or UserLog</li>

  </ul>

  <p>

    This feature ensures users can safely experiment with template customization without risk of breaking the 

underlying export structure.

  </p>

  <p><em>See also:</em> <a href="#10.15.1.2">10.15.1.2 OE Backup previous version</a>, <a 

href="#10.15.2.2">10.15.2.2 OE Restore from backup</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.11.5.5 -- Template name, description, and author     -->

<!-- ====================================================== -->

<section id="10.11.5.5">

  <h4>10.11.5.5 -- Template name, description, and author</h4>

  <p>

    Each uploaded or system-defined template includes a metadata header that stores identifying information 

for organizational and versioning purposes. These fields include:

  </p>

  <ul>

    <li><strong>Template Name:</strong> Displayed in the dropdown list or sidebar header</li>

    <li><strong>Description:</strong> A short explanation of the template(TM)s use case</li>

    <li><strong>Author:</strong> User ID, GitHub handle, or alias of the creator</li>

  </ul>

  <pre><code class="language-js">{

  "name": "Damped Oscillation Template",

  "description": "Used for nonlinear regression and SHM modeling",


  "author": "PhysicsToolsDev"

}</code></pre>

  <p>

    These details appear in both the selection dropdown and the preview panel. If the template was uploaded by

 a user, their

    email or ID is shown (with privacy warnings if shared).

  </p>

  <p>

    Sorting and filtering are available:

  </p>

  <ul>

    <li>
n
 Group by category (e.g., "Oscillations", "Decay", "Thermo")</li>

    <li>
n
 Sort by date added or modified</li>

    <li>
n
 Search by keyword in title or description</li>

  </ul>

  <details>

    <summary>
n
 Example: Sidebar Selector Entry</summary>

    <ul>

      <li><strong>Name:</strong> "Standard Regression Export"</li>

      <li><strong>Author:</strong> "@templateAdmin"</li>

      <li><strong>Last Modified:</strong> "2025-05-21"</li>

    </ul>

  </details>

  <p>

    Template metadata is essential for multi-user environments and ensuring clarity when multiple exports or 

customizations are used across trials.

  </p>

  <p><em>See also:</em> <a href="#12.4.2.1">12.4.2.1 OE Developer credits</a>, <a href="#12.2.1.4">12.2.1.4 OE 

Document changes by section</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.12.1.1 -- Purpose of sending regression model to MATLAB Online -->

<!-- ====================================================== -->

<section id="10.12.1.1">

  <h4>10.12.1.1 -- Purpose of sending regression model to MATLAB Online</h4>

  <p>

    The HelpDialog system includes integration with MATLAB Online to enable <strong>cloud-based 

evaluation</strong> of regression models. Instead of requiring a local MATLAB installation, the system can 

send model payloads to a remote server, where the expressions are plotted, executed, or verified using 

MATLAB(TM)s computation engine.

  </p>

  <p>This approach is especially beneficial in:</p>

  <ul>

    <li>
n
 Classroom environments with limited software installations</li>

    <li>
n
 Chromebook-based or browser-only computing setups</li>

    <li>
n
 Rapid prototyping of dynamic models and system responses</li>

  </ul>

  <p>

    The API-based approach allows for full round-trip execution, enabling users to preview outputs like 

formatted <code>.m</code> code, LaTeX-rendered expressions, and even graph results without ever leaving Google

 Sheets.

  </p>

  <p>

    Typical steps include:

  </p>

  <ol>

    <li>User fits model 
®
 e.g., damped cosine or logistic growth</li>

    <li>Click fiExport to MATLAB Onlinefl in the sidebar or menu</li>

    <li>Script sends model + parameters to the remote server</li>

    <li>Preview of result or graph is returned into a sidebar or sheet</li>

  </ol>

  <p>

    This enables remote simulation, allows teachers to inspect submitted models, and provides cross-platform 

compatibility.

  </p>

  <p><em>See also:</em> <a href="#10.12.3.1">10.12.3.1 OE Using <code>UrlFetchApp.fetch()</code></a>, <a 

href="#10.12.4.2">10.12.4.2 OE HTML preview from returned output</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.12.1.2 -- Supported use cases (graphing, export, simulation) -->

<!-- ====================================================== -->

<section id="10.12.1.2">

  <h4>10.12.1.2 -- Supported use cases (graphing, export, simulation)</h4>

  <p>

    The MATLAB Online integration supports a wide range of use cases for regression analysis and model 

evaluation. These use cases enhance the functionality of the spreadsheet-based workflow by leveraging MATLAB(TM)s

 symbolic and numerical capabilities.

  </p>

  <ul>


    <li>
n
 <strong>Graphing:</strong> Render model equations with fitted parameters using MATLAB(TM)s plotting 

tools. Results include overlays and residual plots.</li>

    <li>
n
 <strong>Model Simulation:</strong> Evaluate the expression for varying inputs or time windows, 

simulating expected behavior (e.g., decay over time).</li>

    <li>
n
 <strong>Export-Only:</strong> Send the model and parameters to generate a finalized `.m` file with 

no execution -- useful for manual upload or analysis.</li>

    <li>
n
 <strong>Parameter Sweeps:</strong> Run multiple trials with different values of one parameter to 

analyze sensitivity.</li>

    <li>
n
 <strong>Graph Return:</strong> Return rendered plots as image URLs or previews directly to the 

sidebar or sheet cell.</li>

  </ul>

  <p>

    These capabilities are toggled via optional flags in the JSON payload (see <a 

href="#10.12.2.2">10.12.2.2</a>) and may be filtered based on account permissions or API subscription tier.

  </p>

  <pre><code class="language-json">{

  "mode": "simulate",

  "formula": "A * cos(w*t + phi) * exp(-b*t)",

  "params": { "A": 1.5, "w": 3.1, "phi": 0.2, "b": 0.1 },

  "exportGraph": true

}</code></pre>

  <p>

    The system ensures a consistent interface regardless of use case, and results are optionally written back 

into the spreadsheet or displayed interactively.

  </p>

  <p><em>See also:</em> <a href="#10.12.4.3">10.12.4.3 OE Inject result into MATLAB Results sheet</a>, <a 

href="#10.12.1.5">10.12.1.5 OE Future expansions</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.12.1.3 -- Current limitations (authentication, compute time) -->

<!-- ====================================================== -->

<section id="10.12.1.3">

  <h4>10.12.1.3 -- Current limitations (authentication, compute time)</h4>

  <p>

    While the MATLAB Online API enables powerful remote computation, there are several limitations in the 

current integration that affect usability, speed, and reliability.

  </p>

  <ul>

    <li>
n
 <strong>Authentication:</strong> Users may be required to authenticate per session. OAuth tokens are

 not stored in the sheet for security reasons (see <a href="#10.12.1.4">10.12.1.4</a>).</li>

    <li>
n
 <strong>Session Timeout:</strong> Sessions may expire after 5OE15 minutes of inactivity, requiring 

re-authentication.</li>

    <li>
n
 <strong>Compute Limits:</strong> Free-tier accounts may encounter throttling or execution delays, 

especially for compute-heavy simulations.</li>

    <li>
n
 <strong>Unsupported Syntax:</strong> Certain symbolic operations or file I/O may be disallowed in 

the API environment.</li>

  </ul>

  <p>

    These limitations are handled gracefully within the script:

  </p>

  <ul>

    <li>
n
 Warning modals are shown when authentication fails</li>

    <li>
nn
 Timeout logs appear in the <code>ErrorLog</code> sheet</li>

    <li>
n
 Retry logic allows users to resubmit failed exports (see <a href="#10.12.3.3">10.12.3.3</a>)</li>

  </ul>

  <p>

    Users are encouraged to use short models and avoid highly symbolic scripts when working with limited-tier 

MATLAB Online accounts.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.12.1.4 -- Security model (no token stored in script) -->

<!-- ====================================================== -->

<section id="10.12.1.4">

  <h4>10.12.1.4 -- Security model (no token stored in script)</h4>

  <p>

    To ensure security and compliance with best practices, the Apps Script integration with MATLAB Online 

<strong>does not store user credentials or tokens</strong> in the spreadsheet or script code.

  </p>

  <p>

    Instead:

  </p>

  <ul>

    <li>
n
 Users manually enter a short-lived session token into a prompt or sidebar field</li>

    <li>
n
 The token is used <em>only</em> for that session and discarded on script completion</li>

    <li>
n
 No cookies, localStorage, or persistent variables are used for token handling</li>

  </ul>

  <p>

    This avoids the need for scopes like <code>DriveApp.getOAuthToken()</code> and prevents potential exposure

 in shared environments.


  </p>

  <pre><code class="language-javascript">// Safe one-time token entry

let token = prompt("Paste your MATLAB Online token:");

if (token) {

  sendModelToMATLAB(token, payload);

}</code></pre>

  <p>

    Token handling is validated client-side (e.g., regex length check) and expired tokens trigger a clear 

error prompt. Admins may implement a stricter timeout or proxy-based validation layer in future versions.

  </p>

  <p><em>See also:</em> <a href="#10.12.3.2">10.12.3.2 OE Headers and request method</a>, <a 

href="#12.4.1.3">12.4.1.3 OE No warranty or guarantee clause</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.12.1.5 -- Future expansion: Wolfram Alpha, NumPy, Desmos -->

<!-- ====================================================== -->

<section id="10.12.1.5">

  <h4>10.12.1.5 -- Future expansion: Wolfram Alpha, NumPy, Desmos</h4>

  <p>

    The architecture of the HelpDialog export engine has been designed with flexibility in mind. Beyond MATLAB

 Online, future expansions may include alternative math APIs for symbolic manipulation, plotting, and 

simulation.

  </p>

  <ul>

    <li>
n
 <strong>Wolfram Alpha API:</strong> Enables symbolic evaluation, step-by-step simplification, and 

calculus-based analysis.</li>

    <li>
n
 <strong>NumPy/SciPy (via Python microservices):</strong> Supports numerical regression, array 

handling, and Fourier transforms in Python environments.</li>

    <li>
n
 <strong>Desmos Graph API (where available):</strong> Interactive plotting of user-defined functions 

in-browser, ideal for student demonstrations.</li>

  </ul>

  <p>

    Each API would follow a modular plug-in structure with toggled output destinations (e.g., sidebar, sheet 

cell, or file export). Endpoints and handlers would be controlled from the <code>Config</code> tab or sidebar 

dropdown.

  </p>

  <p>

    Example config block:

  </p>

  <pre><code class="language-json">{

  "preferredAPI": "wolfram",

  "exportMode": "graphOnly",

  "fallback": "matlab"

}</code></pre>

  <p>

    This modular framework allows future integrations without requiring reengineering of core export logic. 

Experimental support for these services may appear in sandbox or beta releases.

  </p>

  <p><em>See also:</em> <a href="#10.13.2.4">10.13.2.4 OE Global settings object</a>, <a 

href="#10.12.3.4">10.12.3.4 OE Endpoint customization</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.12.2.1 -- Required fields: formula, parameters, UID -->

<!-- ====================================================== -->

<section id="10.12.2.1">

  <h4>10.12.2.1 -- Required fields: formula, parameters, UID</h4>

  <p>

    When sending a model to MATLAB Online (or future APIs), the payload must contain specific required fields 

in a consistent structure. These fields are validated before transmission to ensure successful execution.

  </p>

  <ul>

    <li><code>formula</code> OE A string representing the full mathematical model (e.g., <code>"A * cos(w * t +

 phi) * exp(-b * t)"</code>)</li>

    <li><code>params</code> OE A dictionary of parameter names and values (e.g., <code>{"A":1.2, "w":5.1, 

"phi":0.1, "b":0.02}</code>)</li>

    <li><code>UID</code> OE A unique identifier that links this export to a specific trial, regression, or 

session (e.g., <code>"Trial04"</code>)</li>

  </ul>

  <p>

    These fields are generated automatically by the script when a model is selected in the Processing tab. If 

any field is missing or malformed, the export is blocked, and the user is shown a warning.

  </p>

  <pre><code class="language-json">{

  "UID": "trial_alpha_03",

  "formula": "A * exp(-b * t) * cos(w * t + phi)",

  "params": {

    "A": 0.91,

    "b": 0.072,

    "w": 5.3,


    "phi": 0.45

  }

}</code></pre>

  <p>

    This consistent schema ensures reproducibility and allows downstream systems (e.g., result previewers, 

drive exports) to trace model origin.

  </p>

  <p><em>See also:</em> <a href="#11.3.2.1">11.3.2.1 OE Equation structure for damped cosine</a>, <a 

href="#10.12.2.3">10.12.2.3 OE JSON schema validation</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.12.2.2 -- Optional fields: display options, export type -->

<!-- ====================================================== -->

<section id="10.12.2.2">

  <h4>10.12.2.2 -- Optional fields: display options, export type</h4>

  <p>

    In addition to the required fields (<code>formula</code>, <code>params</code>, <code>UID</code>), the 

model payload can include optional fields to control how results are rendered or returned. These fields 

enhance usability and flexibility without changing the core model logic.

  </p>

  <ul>

    <li><code>displayMode</code> OE Choose <code>"inline"</code>, <code>"block"</code>, or <code>"none"</code> 

to control how LaTeX previews appear.</li>

    <li><code>exportType</code> OE Specifies output format: <code>".m"</code>, <code>".png"</code>, or 

<code>"HTML"</code>.</li>

    <li><code>graphOnly</code> OE Boolean to suppress code return and send only a plot image.</li>

    <li><code>returnJSON</code> OE If <code>true</code>, returns raw evaluated output as a JSON object for 

further processing.</li>

  </ul>

  <p>

    These are useful for:

  </p>

  <ul>

    <li>
n
 Generating lightweight graph-only outputs for reports</li>

    <li>
n
 Returning a clean <code>.m</code> script without preview markup</li>

    <li>
n
 Running batch operations that consume JSON responses programmatically</li>

  </ul>

  <pre><code class="language-json">{

  "UID": "trial12",

  "formula": "A * cos(w*t + phi) * exp(-b*t)",

  "params": { "A": 1.5, "b": 0.05, "w": 4.2, "phi": 0.1 },

  "displayMode": "block",

  "exportType": ".m",

  "graphOnly": false

}</code></pre>

  <p>

    If omitted, defaults are applied based on global settings or user preferences (see <a 

href="#10.13.1.1">10.13.1.1</a>).

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.12.2.3 -- JSON schema validation -->

<!-- ====================================================== -->

<section id="10.12.2.3">

  <h4>10.12.2.3 -- JSON schema validation</h4>

  <p>

    Before the payload is transmitted to the MATLAB Online endpoint (or equivalent), it undergoes a validation

 step to ensure the format, fields, and values meet the expected structure. This prevents malformed requests 

and gives users immediate feedback on errors.

  </p>

  <p>

    Validation includes:

  </p>

  <ul>

    <li>
n
 <strong>Field presence:</strong> Ensures required keys (<code>UID</code>, <code>formula</code>, 

<code>params</code>) are present</li>

    <li>
n
 <strong>Data types:</strong> Checks that <code>params</code> is an object and all values are 

numbers</li>

    <li>
n
 <strong>Regex validation:</strong> Verifies that <code>formula</code> contains only supported 

characters</li>

    <li>
n
 <strong>Empty fields:</strong> Warns if values are blank or missing (e.g., <code>A: ""</code>)</li>

  </ul>

  <pre><code class="language-javascript">// Schema enforcement

if (!payload.formula || typeof payload.params !== "object") {

  throw new Error("Malformed export payload.");

}</code></pre>

  <p>

    All validation results are shown in a modal or logged to the <code>ErrorLog</code> tab with timestamp and 

UID. This ensures traceability for failed exports and makes debugging easier.

  </p>


  <p><em>See also:</em> <a href="#10.12.4.4">10.12.4.4 OE Show errors in modal + Error Log</a>, <a 

href="#11.7.1.2">11.7.1.2 OE Header structure of error logs</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.12.2.4 -- Structure of model payload (nested vs flat) -->

<!-- ====================================================== -->

<section id="10.12.2.4">

  <h4>10.12.2.4 -- Structure of model payload (nested vs flat)</h4>

  <p>

    When exporting regression data to an API, the structure of the payload can be either 

<strong>nested</strong> or <strong>flat</strong>, depending on the endpoint(TM)s expected format. The script 

supports both formats via a toggle or setting in the export configuration.

  </p>

  <ul>

    <li>
n
 <strong>Nested format:</strong> Groups values into labeled blocks, e.g., <code>{ "params": { A: 1.2,

 b: 0.03 }, "formula": ... }</code></li>

    <li>
n
 <strong>Flat format:</strong> Presents all key-value pairs at the top level, e.g., <code>{ A: 1.2, 

b: 0.03, formula: "..." }</code></li>

  </ul>

  <p>Example -- <strong>Nested:</strong></p>

  <pre><code class="language-json">{

  "UID": "fit_001",

  "params": {

    "A": 1.03,

    "b": 0.04,

    "phi": 0.3

  },

  "formula": "A * exp(-b * t) * cos(w * t + phi)"

}</code></pre>

  <p>Example -- <strong>Flat:</strong></p>

  <pre><code class="language-json">{

  "UID": "fit_001",

  "A": 1.03,

  "b": 0.04,

  "phi": 0.3,

  "formula": "A * exp(-b * t) * cos(w * t + phi)"

}</code></pre>

  <p>

    The user may configure the payload style in the <code>Export Settings</code> sheet or via a sidebar 

option. Internally, the structure is controlled by a template switch:

  </p>

  <pre><code class="language-javascript">let useNested = settings.exportStyle === "nested";

let payload = useNested

  ? { UID, params, formula }

  : Object.assign({ UID, formula }, params);</code></pre>

  <p>

    Some APIs, such as Wolfram Alpha or symbolic engines, prefer flat key-value inputs, while MATLAB Online 

generally accepts nested formats.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.12.2.5 -- Support for multiple regressions in batch -->

<!-- ====================================================== -->

<section id="10.12.2.5">

  <h4>10.12.2.5 -- Support for multiple regressions in batch</h4>

  <p>

    The export system allows the transmission of <strong>multiple models in one API call</strong>. This 

enables comparative regression, batch analysis, or simulation over several trial datasets.

  </p>

  <ul>

    <li>
nn
 Models are grouped into an array keyed by <code>UID</code> or trial label</li>

    <li>
n
 Each model contains <code>params</code>, <code>formula</code>, and any optional display fields</li>

    <li>
nn
 The API returns a list of results, each matched by index or UID</li>

  </ul>

  <p>

    Batch payload example:

  </p>

  <pre><code class="language-json">{

  "models": [

    {

      "UID": "trial_1",

      "formula": "A*cos(w*t)*exp(-b*t)",

      "params": { "A": 0.95, "b": 0.04, "w": 6.3 }

    },

    {

      "UID": "trial_2",

      "formula": "A*cos(w*t)*exp(-b*t)",

      "params": { "A": 1.1, "b": 0.03, "w": 6.2 }

    }

  ]


}</code></pre>

  <p>

    Internally, the export function builds this array by scanning the <code>Processing</code> sheet or 

selected trials. A dropdown in the export sidebar controls whether batch mode is enabled.

  </p>

  <p>

    Results are logged and inserted back into the sheet using the UID to map each result. This supports 

classroom use and comparative trial workflows.

  </p>

  <p><em>See also:</em> <a href="#10.12.4.3">10.12.4.3 OE Inject result into fiMATLAB API Resultsfl sheet</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.12.3.1 -- Using `UrlFetchApp.fetch()` in Apps Script -->

<!-- ====================================================== -->

<section id="10.12.3.1">

  <h4>10.12.3.1 -- Using <code>UrlFetchApp.fetch()</code> in Apps Script</h4>

  <p>

    The primary method used to send API requests in Google Apps Script is <code>UrlFetchApp.fetch()</code>. 

This function allows for HTTP communication with external services such as MATLAB Online or other cloud math 

engines.

  </p>

  <p>

    The call supports custom headers, methods (e.g., POST), and payloads, making it flexible for JSON-based 

regression exports.

  </p>

  <pre><code class="language-javascript">const response = UrlFetchApp.fetch(endpointURL, {

  method: "post",

  contentType: "application/json",

  payload: JSON.stringify(modelPayload)

});</code></pre>

  <p>

    Important parameters:

  </p>

  <ul>

    <li><code>endpointURL</code> OE Target API endpoint (editable via config)</li>

    <li><code>payload</code> OE The model content in JSON format</li>

    <li><code>contentType</code> OE Set to <code>"application/json"</code> for structured APIs</li>

  </ul>

  <p>

    This method is synchronous: it waits for the response before continuing. If latency is an issue, response 

time is logged (see <a href="#10.12.4.6">10.12.4.6</a>).

  </p>

  <p>

    On error (e.g., HTTP 500), the script may retry automatically (see <a href="#10.12.3.3">10.12.3.3</a>), or

 log the issue in the <code>ErrorLog</code>.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.12.3.2 -- Headers and request method (POST) -->

<!-- ====================================================== -->

<section id="10.12.3.2">

  <h4>10.12.3.2 -- Headers and request method (POST)</h4>

  <p>

    The request sent via <code>UrlFetchApp.fetch()</code> uses the HTTP POST method to include a full JSON 

payload in the body. Most math services require POST for secure data handling and structured content.

  </p>

  <p>

    Standard headers used:

  </p>

  <pre><code class="language-javascript">{

  "method": "post",

  "headers": {

    "Content-Type": "application/json",

    "Authorization": "Bearer " + token  // optional

  },

  "payload": JSON.stringify(data)

}</code></pre>

  <ul>

    <li><strong>Content-Type:</strong> Always <code>application/json</code> for model data</li>

    <li><strong>Authorization:</strong> Optional, included only if required (e.g., MATLAB Online OAuth)</li>

  </ul>

  <p>

    Note: Google Apps Script does not store persistent tokens by default. This means the script requires 

manual entry or a secure short-term token from the user/session (see <a href="#10.12.1.4">10.12.1.4</a>).

  </p>

  <p>

    POST is preferred over GET because:

  </p>

  <ul>


    <li>
4
n
 Supports large and structured payloads</li>

    <li>
4
n
 Is more secure (no URL-encoded formulas)</li>

    <li>
4
n
 Matches API best practices across MATLAB, Python, and Wolfram systems</li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 10.12.3.3 -- Retry logic on failure -->

<!-- ====================================================== -->

<section id="10.12.3.3">

  <h4>10.12.3.3 -- Retry logic on failure</h4>

  <p>

    To improve reliability when exporting to external APIs, the script includes built-in retry logic for 

handling transient network errors or temporary server-side issues. This helps reduce failures due to momentary

 outages or timeouts.

  </p>

  <p>Retry features:</p>

  <ul>

    <li>
n
 Attempts the request up to <strong>3 times</strong> if the response is not <code>200 OK</code></li>

    <li>
nn
 Adds a delay (e.g., <code>500 ms</code>) between retries</li>

    <li>
n
 Logs each retry attempt in the <code>ErrorLog</code> (with timestamp and message)</li>

  </ul>

  <pre><code class="language-javascript">function fetchWithRetry(url, options, maxTries = 3) {

  for (let attempt = 1; attempt <= maxTries; attempt++) {

    try {

      let response = UrlFetchApp.fetch(url, options);

      if (response.getResponseCode() === 200) return response;

    } catch (e) {

      Logger.log("Retry " + attempt + ": " + e.message);

      Utilities.sleep(500);

    }

  }

  throw new Error("Failed after " + maxTries + " retries.");

}</code></pre>

  <p>

    Retry is used for <code>UrlFetchApp.fetch()</code> only and does not retry on 4xx errors (e.g., bad 

input). These are flagged immediately and recorded with <code>UID</code> in the logs.

  </p>

  <p><em>See also:</em> <a href="#11.7.1.3">11.7.1.3 OE Log levels: INFO, WARNING, ERROR</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.12.3.4 -- Endpoint customization (by user or dev) -->

<!-- ====================================================== -->

<section id="10.12.3.4">

  <h4>10.12.3.4 -- Endpoint customization (by user or dev)</h4>

  <p>

    The destination URL for sending regression exports can be customized by the user or set by the developer. 

This makes it possible to direct requests to different environments (e.g., dev, staging, production).

  </p>

  <p>Where it's configured:</p>

  <ul>

    <li><code>Export Settings</code> sheet under key <code>MATLAB_API_ENDPOINT</code></li>

    <li>Or directly editable in the sidebar(TM)s Advanced tab</li>

    <li>Defaults to internal staging endpoint unless overridden</li>

  </ul>

  <p>Example values:</p>

  <ul>

    <li><code>https://api.mathlab.edu/eval</code> OE standard classroom endpoint</li>

    <li><code>http://localhost:5000/simulate</code> OE dev sandbox</li>

    <li><code>https://myinstitution.org/api/model</code> OE org-hosted export layer</li>

  </ul>

  <pre><code class="language-javascript">const endpoint = settings.apiEndpoint || DEFAULT_ENDPOINT;

UrlFetchApp.fetch(endpoint, options);</code></pre>

  <p>

    Developers can also define plugin-style endpoints by mapping each target to a tab or folder, enabling 

parallel API targets per experiment group.

  </p>

  <p><strong>Note:</strong> User-entered URLs are sanitized before use to prevent injection or bad formatting 

(see <a href="#10.13.2.3">10.13.2.3</a>).</p>

</section>

<!-- ====================================================== -->

<!-- 10.12.3.5 -- Payload logging (safe mode vs debug mode) -->

<!-- ====================================================== -->

<section id="10.12.3.5">

  <h4>10.12.3.5 -- Payload logging (safe mode vs debug mode)</h4>

  <p>

    For verification and troubleshooting, the system supports two modes of logging payloads sent to external 

APIs:

  </p>

  <ul>


    <li><strong>
n
 Safe Mode:</strong> Hides sensitive values (e.g., parameter numbers or formula body)</li>

    <li><strong>
n
 Debug Mode:</strong> Logs the full payload for advanced review</li>

  </ul>

  <p>

    These modes are controlled via the <code>Export Settings</code> sheet with a setting key like:

  </p>

  <pre><code class="language-javascript">LOG_PAYLOAD_MODE = "safe"  // or "debug"</code></pre>

  <p>

    Example of Safe Mode log:

  </p>

  <pre><code class="language-log">[10:02:18] UID: trial_3

[Payload Preview] formula: &lt;hidden&gt;, params: &lt;hidden&gt;</code></pre>

  <p>

    Example of Debug Mode log:

  </p>

  <pre><code class="language-json">{

  "UID": "trial_3",

  "formula": "A * exp(-b * t) * cos(w * t + phi)",

  "params": {

    "A": 1.03,

    "b": 0.042,

    "w": 6.28,

    "phi": 0.1

  }

}</code></pre>

  <p>

    This flexibility ensures privacy in production environments while enabling full traceability during 

debugging or development. Logs are written to both:

  </p>

  <ul>

    <li><code>ErrorLog</code> (if request fails)</li>

    <li><code>ExportLog</code> (if request succeeds)</li>

  </ul>

  <p>

    Users can switch modes without redeploying the script. Modal alerts may appear if <code>debug</code> mode 

is active during student trials, reminding the user of potential data sensitivity.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.12.4.1 -- Parsing success vs error -->

<!-- ====================================================== -->

<section id="10.12.4.1">

  <h4>10.12.4.1 -- Parsing success vs error</h4>

  <p>

    After sending a model payload, the script processes the API(TM)s response to determine whether the export 

succeeded or failed. The response body is expected to be valid JSON and will include a <code>status</code>, 

<code>output</code>, or <code>error</code> field.

  </p>

  <p>Example success response:</p>

  <pre><code class="language-json">{

  "status": "success",

  "output": "y(t) = A * exp(-b*t) * cos(w*t + phi)"

}</code></pre>

  <p>Example error response:</p>

  <pre><code class="language-json">{

  "status": "error",

  "message": "Missing parameter: phi"

}</code></pre>

  <p>

    The script parses this response using:

  </p>

  <pre><code class="language-javascript">const data = JSON.parse(response.getContentText());

if (data.status === "success") {

  return data.output;

} else {

  throw new Error("API Error: " + data.message);

}</code></pre>

  <p>

    If parsing fails (e.g., malformed JSON), the result is logged in the <code>ErrorLog</code> and shown in a 

red modal popup to the user. A unique identifier (<code>UID</code>) ensures the failed response is linked to 

the correct trial row.

  </p>

  <p><em>See also:</em> <a href="#10.14.3.1">10.14.3.1 OE Log failures to fiError Logfl and fiExport Logfl</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.12.4.2 -- HTML preview from returned script or output -->

<!-- ====================================================== -->

<section id="10.12.4.2">

  <h4>10.12.4.2 -- HTML preview from returned script or output</h4>


  <p>

    When a successful response is received from the external API, the script can display a formatted preview 

of the returned MATLAB script, LaTeX model, or visual output. This preview helps users verify the result 

before saving it into the spreadsheet or Drive.

  </p>

  <p>Preview types:</p>

  <ul>

    <li><strong>
n
 Script view:</strong> MATLAB code formatted in a fixed-width box</li>

    <li><strong>
n
 Graph view:</strong> Rendered SVG or PNG graph from API output</li>

    <li><strong>
n
 LaTeX view:</strong> Rendered MathJax formula block</li>

  </ul>

  <p>

    If the response includes HTML, it is rendered directly inside a modal:

  </p>

  <pre><code class="language-html">&lt;div class="modal"&gt;

  &lt;h3&gt;Model Output Preview&lt;/h3&gt;

  &lt;pre&gt;y(t) = A * exp(-b*t) * cos(w*t + phi)&lt;/pre&gt;

&lt;/div&gt;</code></pre>

  <p>

    Users can choose to:

  </p>

  <ul>

    <li>
n
 Confirm and save the output</li>

    <li>
nn
 Discard and retry the export</li>

    <li>
n
 View side-by-side with original formula (see <a href="#10.12.4.3">10.12.4.3</a>)</li>

  </ul>

  <p>

    Errors or warnings in the returned content are highlighted (e.g., missing semicolon or unused variable). 

This gives the user one final review checkpoint before committing to export.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.12.4.3 -- Inject result into fiMATLAB API Resultsfl sheet -->

<!-- ====================================================== -->

<section id="10.12.4.3">

  <h4>10.12.4.3 -- Inject result into fiMATLAB API Resultsfl sheet</h4>

  <p>

    After a successful API export, the final result (script string, image URL, or symbolic model) is written 

to the dedicated sheet titled <code>MATLAB API Results</code>. This sheet is auto-created if missing.

  </p>

  <p>Inserted fields per row:</p>

  <ul>

    <li><strong>
n
 UID</strong> OE Unique trial or export identifier</li>

    <li><strong>
n
 Output</strong> OE Final script or model string</li>

    <li><strong>
n
 Preview Link</strong> OE Link to graph (if applicable)</li>

    <li><strong>
n
 Error Message</strong> OE If response was partial or contained warnings</li>

  </ul>

  <p>

    Example:

  </p>

  <pre><code class="language-spreadsheet">UID       | Output                             | Preview Link

           | Error Message

----------|-------------------------------------|------------------------|-------------------------------

trial_12  | y(t) = A*exp(-b*t)...               | https://api/.../plot  | &lt;none&gt;

trial_13  | &lt;blank&gt;                             | &lt;none&gt;                | Missing param: 

phi</code></pre>

  <p>

    The sheet supports filters and auto-formatting to highlight successful and failed exports. Column widths 

are auto-resized, and hyperlinks are clickable. Only authorized scripts can write to this sheet.

  </p>

  <p>

    Results stored here are used in <code>ExportLog</code> summaries and preview recovery tools (see <a 

href="#10.15.2.1">10.15.2.1</a>).

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.12.4.4 -- Show errors in modal + Error Log -->

<!-- ====================================================== -->

<section id="10.12.4.4">

  <h4>10.12.4.4 -- Show errors in modal + Error Log</h4>

  <p>

    If the MATLAB API call returns an error, or the system encounters a failure during processing (e.g., 

malformed payload, invalid UID), the issue is reported in two places:

  </p>

  <ul>

    <li>
nn
 <strong>Modal popup</strong> OE Immediate alert to the user</li>

    <li>
n
 <strong>ErrorLog</strong> OE Structured entry for historical record</li>

  </ul>

  <p>


    Example modal output:

  </p>

  <pre><code class="language-text">Export Failed

-------------------------

Reason: Parameter 'phi' is missing or undefined.

Suggested Fix: Check variable cell or LaTeX formula.

</code></pre>

  <p>

    ErrorLog entry format:

  </p>

  <pre><code class="language-spreadsheet">Timestamp         | UID      | Sheet        | Error Message

------------------|----------|--------------|------------------------------

2025-06-15 10:32  | trial_14 | Regression_1 | Missing parameter: phi</code></pre>

  <p>

    Logging both immediate and archival errors ensures transparency and allows teachers or admins to track 

repeated problems. The log may also show which setting or block failed (e.g., fiLaTeX parse errorfl, fiJSON 

invalid typefl).

  </p>

  <p><em>See also:</em> <a href="#11.7.1.4">11.7.1.4 -- Color-coding rows for severity</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.12.4.5 -- Optional: Attach response `.m` file to Drive -->

<!-- ====================================================== -->

<section id="10.12.4.5">

  <h4>10.12.4.5 -- Optional: Attach response <code>.m</code> file to Drive</h4>

  <p>

    In addition to previewing the output and writing it to a sheet, the script can optionally save the 

returned MATLAB code as a physical <code>.m</code> file to the user(TM)s Google Drive. This file is stored 

alongside other exports using the current <code>UID</code> as part of the filename.

  </p>

  <p>Key features:</p>

  <ul>

    <li>
n
 Folder ID taken from <code>Export Settings</code></li>

    <li>
n
 File named like <code>trial_17_output.m</code></li>

    <li>
n
 Timestamped and linked to Export Log</li>

  </ul>

  <pre><code class="language-javascript">const file = DriveApp.getFolderById(exportFolderId)

  .createFile("trial_17_output.m", scriptText);</code></pre>

  <p>

    File contents match the result shown in the HTML preview. This allows users to open the script in MATLAB 

or Octave directly from Drive, facilitating offline access or LMS submission.

  </p>

  <p>

    If the export fails or returns partial output, a fidebugfl suffix is added to the filename and a warning is 

attached to its header:

  </p>

  <pre><code class="language-matlab">% WARNING: This export contains errors.

% Original API returned: Missing param 'w'

</code></pre>

  <p>

    This functionality is toggled via:

  </p>

  <pre><code>ATTACH_M_OUTPUT = true</code></pre>

  <p>

    in the config sheet. If disabled, only in-sheet preview is shown and no Drive export occurs.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.12.4.6 -- Track latency and timestamp in Export Log -->

<!-- ====================================================== -->

<section id="10.12.4.6">

  <h4>10.12.4.6 -- Track latency and timestamp in Export Log</h4>

  <p>

    To monitor API performance and support debugging, the script logs the latency of each regression export to

 the <code>ExportLog</code> sheet. This includes the total round-trip time from request to response, recorded 

in milliseconds.

  </p>

  <p>Logged fields:</p>

  <ul>

    <li><strong>
n
 Timestamp:</strong> Date and time of export</li>

    <li><strong>
n
 UID:</strong> Unique identifier for the export</li>

    <li><strong>
n
 Duration (ms):</strong> Measured using system clock</li>

    <li><strong>
n
 Status:</strong> <code>Success</code>, <code>Error</code>, or <code>Timeout</code></li>

  </ul>

  <p>Example ExportLog row:</p>

  <pre><code class="language-spreadsheet">Timestamp         | UID      | Duration (ms) | Status   | Message

------------------|----------|----------------|----------|-------------------------

2025-06-15 10:35  | trial_17 | 1243           | Success  | Model received and saved</code></pre>


  <p>

    Latency is calculated using timestamps just before and after the call to <code>UrlFetchApp.fetch()</code>:

  </p>

  <pre><code class="language-javascript">const start = new Date().getTime();

const response = UrlFetchApp.fetch(url, options);

const end = new Date().getTime();

const latency = end - start;</code></pre>

  <p>

    Excessive duration (e.g., over 10 seconds) can be flagged in the log or preview modal with a yellow 

warning icon, encouraging the user to check for network issues or server load.

  </p>

  <p>

    This metric also helps identify bottlenecks in batch exports and can be used in future performance 

dashboards or analytics summaries. Settings like <code>LOG_LATENCY = true</code> can toggle this feature.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.1.1 -- Create/configure `Export Settings` sheet -->

<!-- ====================================================== -->

<section id="10.13.1.1">

  <h4>10.13.1.1 -- Create/configure <code>Export Settings</code> sheet</h4>

  <p>

    The <code>Export Settings</code> sheet stores user-defined options for `.m` file exports, including folder

 paths, output formatting, and toggles for features like config metadata, dry runs, or preview display. This 

sheet is created automatically if it does not exist during export.

  </p>

  <ul>

    <li><strong>
n
 KeyOEValue Format:</strong> Each row stores a config key and its associated value</li>

    <li><strong>
nn
 Protected Sheet:</strong> Write-protected except for specific editable ranges</li>

    <li><strong>
n
 Hidden by Default:</strong> Optionally hidden to prevent accidental edits</li>

  </ul>

  <p>

    When initialized, the sheet is populated with default settings such as:

  </p>

  <pre><code class="language-spreadsheet">Setting               | Value       | Notes

----------------------|-------------|-----------------------------

EXPORT_FOLDER_ID      | &lt;folder_id&gt; | Drive folder for `.m` output

SHOW_CONFIG_BLOCK     | TRUE        | Insert config metadata block

DRY_RUN_MODE          | FALSE       | If TRUE, no file written

ATTACH_M_OUTPUT       | TRUE        | Save `.m` to Drive

LOG_PAYLOAD_MODE      | safe        | Payload log type: safe/debug</code></pre>

  <p>

    The script reads these entries dynamically and caches them in a global settings object for reuse 

throughout the export functions.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.1.2 -- Column structure: Setting | Value | Notes -->

<!-- ====================================================== -->

<section id="10.13.1.2">

  <h4>10.13.1.2 -- Column structure: Setting | Value | Notes</h4>

  <p>

    The configuration sheet is structured with exactly three columns:

  </p>

  <ul>

    <li><strong>A: Setting</strong> -- A unique keyword (case-insensitive)</li>

    <li><strong>B: Value</strong> -- The current value (Boolean, String, Number)</li>

    <li><strong>C: Notes</strong> -- Optional description or tooltip for user understanding</li>

  </ul>

  <p>

    For example:

  </p>

  <pre><code class="language-spreadsheet">Setting           | Value     | Notes

------------------|-----------|-------------------------------

EXPORT_FOLDER_ID  | 1Abc2DeFg | Drive ID for export location

LOG_LATENCY       | TRUE      | Enable time tracking in log

LATEX_MODE        | block     | 'inline' or 'block' for LaTeX

MAX_WARNINGS      | 10        | Limit number of export warnings

FORMULA_SYNTAX    | latex     | Formula input type</code></pre>

  <p>

    Keys in column A must be unique. Duplicate entries trigger a validation warning. Empty values are allowed 

for optional settings but may result in fallback defaults.

  </p>

  <p>

    The Notes column helps clarify implications for each setting and is recommended for non-technical users.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.1.3 -- Highlight editable fields -->


<!-- ====================================================== -->

<section id="10.13.1.3">

  <h4>10.13.1.3 -- Highlight editable fields</h4>

  <p>

    To help users distinguish between editable and system-managed rows in the <code>Export Settings</code> 

sheet, the script applies formatting that visually separates user-configurable fields.

  </p>

  <p>Default formatting scheme:</p>

  <ul>

    <li><span style="background-color: #FFF3B0;">
n
 Yellow background</span> -- for editable cells</li>

    <li>
n
 Protected ranges -- system or calculated fields are locked</li>

    <li>
n
 Notes -- column C may use italic or lighter text for instructions</li>

  </ul>

  <p>

    Example cell coloring:

  </p>

  <pre><code class="language-spreadsheet">Setting             | Value     | Notes

--------------------|-----------|---------------------------------

SHOW_CONFIG_BLOCK   | TRUE      | Yellow cell: editable

LATEX_MODE          | block     | Only 'block' or 'inline' allowed

# AUTO_GENERATED    | n/a       | Grey and locked row</code></pre>

  <p>

    The script enforces these formatting rules using the <code>setBackground()</code> and 

<code>protect()</code> APIs:

  </p>

  <pre><code class="language-javascript">sheet.getRange("B2:B100")

  .setBackground("#FFF3B0");

sheet.getRange("A2:C100").protect().setWarningOnly(true);</code></pre>

  <p>

    This visual guide reduces accidental overwriting of critical config entries and improves clarity for 

students unfamiliar with technical setups.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.1.4 -- Validate inputs automatically (e.g., export folder) -->

<!-- ====================================================== -->

<section id="10.13.1.4">

  <h4>10.13.1.4 -- Validate inputs automatically (e.g., export folder)</h4>

  <p>

    Any time the user modifies a value in the <code>Export Settings</code> sheet, a validation check is 

triggered to ensure the new input is valid. This process runs silently in the background or as a sidebar modal

 if errors are found.

  </p>

  <p>Examples of validations:</p>

  <ul>

    <li>
n
 <strong>Folder ID</strong> OE must be 25+ chars, valid Drive folder</li>

    <li>
n
 <strong>Max warnings</strong> OE must be a number 
³
 0</li>

    <li>
n
 <strong>Boolean values</strong> OE only <code>TRUE</code> or <code>FALSE</code> accepted</li>

  </ul>

  <p>

    Example validation snippet:

  </p>

  <pre><code class="language-javascript">if (!/^[a-zA-Z0-9_-]{25,}$/.test(folderId)) {

  SpreadsheetApp.getUi().alert("Invalid EXPORT_FOLDER_ID");

}</code></pre>

  <p>

    Errors are reported to the user with:

  </p>

  <ul>

    <li>
nn
 <code>toast()</code> popup on sheet</li>

    <li>
n
 Optional entry in <code>ErrorLog</code></li>

    <li>
n
 Undo to revert to last known good config</li>

  </ul>

  <p>

    This real-time input validation improves reliability and reduces misconfiguration errors that could 

prevent `.m` file exports.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.1.5 -- Color-coded by section (drive, output, formatting) -->

<!-- ====================================================== -->

<section id="10.13.1.5">

  <h4>10.13.1.5 -- Color-coded by section (drive, output, formatting)</h4>

  <p>

    To improve readability and navigation within the <code>Export Settings</code> sheet, related settings are 

grouped and visually separated by color bands. These groupings help distinguish between configuration 

categories such as:

  </p>

  <ul>


    <li>
n
 <strong>Drive-related settings</strong> -- Folder IDs, export paths</li>

    <li>
n
 <strong>Output controls</strong> -- File format, logging, metadata</li>

    <li>
n
 <strong>Formatting options</strong> -- LaTeX mode, config visibility</li>

  </ul>

  <p>

    Example formatting:

  </p>

  <pre><code class="language-spreadsheet">Setting              | Value       | Notes

---------------------|-------------|-------------------------------

# DRIVE SETTINGS     |             | Group header (gray row)

EXPORT_FOLDER_ID     | 1Xyz...     | Drive export folder

ATTACH_M_OUTPUT      | TRUE        | Save `.m` file to Drive

# OUTPUT SETTINGS     |             |

SHOW_CONFIG_BLOCK    | TRUE        | Insert metadata block

LOG_LATENCY          | TRUE        | Track round-trip timing

DRY_RUN_MODE         | FALSE       | Skip file creation</code></pre>

  <p>

    These color bands may be applied automatically using alternating row backgrounds or conditional formats. 

Example:

  </p>

  <pre><code class="language-javascript">sheet.getRange("A5:C5").setBackground("#e0e0e0");  // Group header

sheet.getRange("A6:C10").setBackground("#f9f9f9"); // Group block</code></pre>

  <p>

    Future support may include collapsible groups or toggleable visibility for advanced settings, allowing a 

cleaner experience for novice users.

  </p>

  <p><em>See also:</em> <a href="#10.13.2.5">10.13.2.5 -- Warn if key appears twice or has no value</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.13.2.1 -- Parse all rows in column A as keys -->

<!-- ====================================================== -->

<section id="10.13.2.1">

  <h4>10.13.2.1 -- Parse all rows in column A as keys</h4>

  <p>

    When the export function reads the <code>Export Settings</code> sheet, it treats every non-blank, non-

commented entry in column A as a configuration key. These keys form the internal settings object used across 

all export modules.

  </p>

  <p>

    Parsing logic:

  </p>

  <pre><code class="language-javascript">const rows = sheet.getDataRange().getValues();

for (let i = 0; i &lt; rows.length; i++) {

  const key = rows[i][0];

  const value = rows[i][1];

  if (key && !key.startsWith("#")) settings[key] = value;

}</code></pre>

  <p>

    Notes:

  </p>

  <ul>

    <li>
n
 Keys are <strong>case-insensitive</strong> unless strict mode is enabled</li>

    <li>
nn
 Keys must not include spaces or symbols (e.g., <code>SHOW_CONFIG_BLOCK</code>)</li>

    <li>
n
 Duplicate keys will overwrite earlier entries unless validation prevents it</li>

  </ul>

  <p>

    This mapping allows the script to dynamically adapt export behavior, and changes can be made by editing a 

single cell rather than modifying the codebase.

  </p>

  <p>

    Parsed keyOEvalue pairs are logged in <code>Logger.log()</code> during debug runs, and optionally displayed

 in the export preview for verification.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.2.2 -- Detect and ignore blank/commented rows -->

<!-- ====================================================== -->

<section id="10.13.2.2">

  <h4>10.13.2.2 -- Detect and ignore blank/commented rows</h4>

  <p>

    To ensure that configuration parsing is clean and resilient, the export script automatically skips rows 

that are either blank or commented. This allows users to add notes or visual separators without breaking the 

config logic.

  </p>

  <p>Two row types are ignored:</p>

  <ul>

    <li>
nn
 <strong>Blank rows</strong> -- no content in column A</li>

    <li>
n
 <strong>Commented rows</strong> -- start with <code>#</code> (e.g., <code># Output 

Settings</code>)</li>


  </ul>

  <p>

    Example skipped rows:

  </p>

  <pre><code class="language-spreadsheet">Setting              | Value   | Notes

---------------------|---------|------------------------------

# DRIVE SETTINGS     |         |

EXPORT_FOLDER_ID     | 1abc... | Google Drive Folder ID

                     |         | (blank row -- ignored)

# LATEX FORMATTING   |         | Section header</code></pre>

  <p>

    Implementation logic:

  </p>

  <pre><code class="language-javascript">if (!row[0] || row[0].startsWith("#")) continue;</code></pre>

  <p>

    This ensures that visual grouping does not interfere with logic and allows advanced users to annotate 

their configuration files freely.

  </p>

  <p>

    Additionally, blank/commented lines preserve their position in the sheet and are helpful for context 

during user review or sidebar previews.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.2.3 -- Coerce types: numbers, strings, Booleans -->

<!-- ====================================================== -->

<section id="10.13.2.3">

  <h4>10.13.2.3 -- Coerce types: numbers, strings, Booleans</h4>

  <p>

    When reading configuration values from the sheet, the script automatically converts them into appropriate 

data types. This ensures consistent behavior and allows numeric comparisons or boolean logic in later stages 

of export.

  </p>

  <p>Coercion rules:</p>

  <ul>

    <li><strong><code>TRUE</code> / <code>FALSE</code></strong> 
®
 converted to JavaScript <code>true</code> / 

<code>false</code></li>

    <li><strong>Numeric strings</strong> 
®
 converted to <code>Number</code> (e.g., <code>"123"</code> 
®
 

<code>123</code>)</li>

    <li><strong>Other values</strong> 
®
 kept as <code>String</code></li>

  </ul>

  <p>Example coercion block:</p>

  <pre><code class="language-javascript">function coerce(value) {

  if (value === "TRUE") return true;

  if (value === "FALSE") return false;

  if (!isNaN(value)) return Number(value);

  return value;

}</code></pre>

  <p>

    This type coercion is crucial for correctly handling toggle flags, upper bounds, and settings like 

<code>MAX_WARNINGS</code> or <code>DRY_RUN_MODE</code>.

  </p>

  <p>

    If a type mismatch is detected (e.g., a string where a number is required), the export is paused and a 

warning is shown via toast and/or logged to the <code>ErrorLog</code> tab.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.2.4 -- Map config into global settings object -->

<!-- ====================================================== -->

<section id="10.13.2.4">

  <h4>10.13.2.4 -- Map config into global settings object</h4>

  <p>

    Once all valid rows in the <code>Export Settings</code> sheet are parsed and coerced, the script maps them

 into a global JavaScript object. This settings object becomes accessible to all export-related modules and 

avoids re-reading the sheet multiple times.

  </p>

  <p>

    Example structure:

  </p>

  <pre><code class="language-javascript">settings = {

  EXPORT_FOLDER_ID: "1abcD23efGHIJ...",

  SHOW_CONFIG_BLOCK: true,

  DRY_RUN_MODE: false,

  MAX_WARNINGS: 10,

  LATEX_MODE: "inline"

};</code></pre>

  <p>


    This object is typically declared at the top of the export script or loaded via a dedicated 

<code>loadExportSettings()</code> function:

  </p>

  <pre><code class="language-javascript">const settings = loadExportSettings();</code></pre>

  <p>

    This pattern ensures:

  </p>

  <ul>

    <li>
n
 Reusability -- config is consistent across preview, export, and logging functions</li>

    <li>
n
 Performance -- sheet is read only once per session</li>

    <li>
n
 Predictability -- developers can refer to <code>settings.KEY</code> rather than raw cell access</li>

  </ul>

  <p>

    Optionally, this object can be cached in memory between runs or refreshed with a "Reload Settings" menu 

item.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.2.5 -- Warn if key appears twice or has no value -->

<!-- ====================================================== -->

<section id="10.13.2.5">

  <h4>10.13.2.5 -- Warn if key appears twice or has no value</h4>

  <p>

    During the parsing of the <code>Export Settings</code> sheet, the script checks for common 

misconfigurations such as duplicate keys or missing values. These issues are flagged before any export 

continues.

  </p>

  <p>Two error conditions:</p>

  <ul>

    <li>
n
 <strong>Duplicate key</strong> -- multiple rows with the same key in column A</li>

    <li>
nn
 <strong>Empty value</strong> -- blank entry in column B for required setting</li>

  </ul>

  <p>

    Example detection:

  </p>

  <pre><code class="language-javascript">if (settings[key] !== undefined) {

  logError("Duplicate key: " + key);

}

if (value === "") {

  logError("Empty value for: " + key);

}</code></pre>

  <p>

    Warnings appear via:

  </p>

  <ul>

    <li>
n
 <code>toast()</code> popup for immediate feedback</li>

    <li>
n
 Entry in <code>ErrorLog</code> with timestamp and sheet row</li>

    <li>
n
 Export halted if critical keys are undefined</li>

  </ul>

  <p>

    Optionally, the system can enforce a strict mode where any duplicate or missing keys prevent script 

execution entirely. This behavior is useful in high-stakes classroom or research deployments.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.3.1 -- Output formatted metadata block at top of file -->

<!-- ====================================================== -->

<section id="10.13.3.1">

  <h4>10.13.3.1 -- Output formatted metadata block at top of file</h4>

  <p>

    As part of the export process, a configurable metadata block can be inserted at the top of the resulting 

<code>.m</code> file. This block captures key settings, version info, and tags relevant to the export 

environment.

  </p>

  <p>Example output:</p>

  <pre><code class="language-matlab">%% EXPORT SETTINGS

%% CONFIG: EXPORT_FOLDER_ID = 1abc23DEF456...

%% CONFIG: SHOW_CONFIG_BLOCK = TRUE

%% CONFIG: LATEX_MODE = inline

%% CONFIG: DRY_RUN_MODE = FALSE

</code></pre>

  <p>

    This metadata block:

  </p>

  <ul>

    <li>
n
 Uses MATLAB comment syntax for compatibility</li>

    <li>
n
 Groups all config lines under a header (<code>%% EXPORT SETTINGS</code>)</li>

    <li>
n
 Matches keyOEvalue pairs exactly from <code>Export Settings</code> sheet</li>

  </ul>


  <p>

    Whether this block is included depends on the setting <code>SHOW_CONFIG_BLOCK</code>. If set to 

<code>FALSE</code>, the metadata is skipped during export.

  </p>

  <p><em>See also:</em> <a href="#10.13.3.2">10.13.3.2 -- Format: CONFIG: key = value</a></p>

</section>

<!-- ====================================================== -->

<!-- 10.13.3.2 -- Format: CONFIG: key = value -->

<!-- ====================================================== -->

<section id="10.13.3.2">

  <h4>10.13.3.2 -- Format: <code>%% CONFIG: key = value</code></h4>

  <p>

    Each line of the export config block follows a strict format to ensure it can be easily parsed or visually

 scanned:

  </p>

  <pre><code class="language-matlab">%% CONFIG: KEY_NAME = VALUE</code></pre>

  <p>Formatting rules:</p>

  <ul>

    <li>
n
 All keys are uppercased</li>

    <li>
n
 Equal sign is aligned where possible</li>

    <li>
n
 Values are escaped if containing special characters</li>

    <li>
n
 Each line is prefixed with <code>%% CONFIG:</code> for grep/search compatibility</li>

  </ul>

  <p>

    This layout improves traceability when reviewing exported `.m` files and supports automated diff tools or 

code reviews. Developers may filter by <code>%% CONFIG</code> to find all export metadata in batch analysis.

  </p>

  <p>

    Advanced mode may allow toggling this format to inline comments or block-style via an 

<code>EXPORT_STYLE</code> setting.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.3.3 -- Allow multi-line comments -->

<!-- ====================================================== -->

<section id="10.13.3.3">

  <h4>10.13.3.3 -- Allow multi-line comments</h4>

  <p>

    The export script supports inclusion of multi-line descriptive comments in the configuration metadata 

block at the top of the `.m` file. These comments may include information such as:

  </p>

  <ul>

    <li>
n
 Export date and version tag</li>

    <li>
-
n
 User-defined notes about the trial or model</li>

    <li>
n
 Summary of the regression type or fit quality</li>

  </ul>

  <p>Example:</p>

  <pre><code class="language-matlab">%% EXPORT SETTINGS

%% Generated: 2025-06-15

%% Version: v5.1.3 (Regression Module)

%% Description:

%%   This export uses the damped cosine fit model.

%%   Fit range = 0OE2.4s; Exported by M. Samuel

%% CONFIG: LATEX_MODE = inline

%% CONFIG: DRY_RUN_MODE = FALSE</code></pre>

  <p>

    Each comment line starts with <code>%%</code> and preserves indentation and wrapping. These are added 

automatically if the <code>INCLUDE_COMMENTS</code> setting is <code>TRUE</code>, or can be manually inserted 

in the config sheet in a <code>NOTES</code> column.

  </p>

  <p>

    These comments are optional but useful for documentation and reproducibility in large batch exports or 

student reports.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.3.4 -- Preserve order of keys in file -->

<!-- ====================================================== -->

<section id="10.13.3.4">

  <h4>10.13.3.4 -- Preserve order of keys in file</h4>

  <p>

    The order of keys in the <code>Export Settings</code> sheet is preserved in the `.m` output to ensure 

consistency between user input and script output. This helps with:

  </p>

  <ul>

    <li>
n
 Reproducibility -- outputs always reflect user-configured intent</li>

    <li>
n
 Debugging -- easier comparison between sheet and export</li>

    <li>
nn
 Re-import -- supports future workflows where settings are read back into a script</li>

  </ul>

  <p>Example:</p>


  <pre><code class="language-spreadsheet">Setting              | Value

---------------------|----------

LATEX_MODE           | inline

DRY_RUN_MODE         | TRUE

EXPORT_FOLDER_ID     | 1xyzABC...

--&gt; Output order in `.m`:

%% CONFIG: LATEX_MODE = inline

%% CONFIG: DRY_RUN_MODE = TRUE

%% CONFIG: EXPORT_FOLDER_ID = 1xyzABC...</code></pre>

  <p>

    Optional enhancements include fipinned keysfl (e.g., <code>EXPORT_FOLDER_ID</code>) always appearing at the 

top, regardless of their row position. This behavior may be controlled via <code>PRESERVE_ORDER = TRUE</code>.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.3.5 -- Disable config export with setting -->

<!-- ====================================================== -->

<section id="10.13.3.5">

  <h4>10.13.3.5 -- Disable config export with setting</h4>

  <p>

    Users may optionally disable the insertion of the configuration metadata block at the top of the `.m` file

 by setting the flag <code>SHOW_CONFIG_BLOCK = FALSE</code> in the <code>Export Settings</code> sheet.

  </p>

  <p>

    This is especially useful when preparing clean exports for publication, classroom sharing, or presentation

 materials where minimal header content is desired.

  </p>

  <p>Behavior summary:</p>

  <ul>

    <li>
n
 When <code>SHOW_CONFIG_BLOCK = FALSE</code>, no <code>%% CONFIG:</code> lines appear</li>

    <li>
n
 All internal config is still used, just not printed in file</li>

    <li>
n
 Warnings or errors may still be appended at the bottom if necessary</li>

  </ul>

  <p>Example in config sheet:</p>

  <pre><code class="language-spreadsheet">Setting              | Value

---------------------|----------

SHOW_CONFIG_BLOCK    | FALSE

EXPORT_FOLDER_ID     | 1abcDEF...

</code></pre>

  <p>

    If the export is later restored or diffed, this setting can also be used to confirm intentional omission 

of the metadata. A sidebar toggle or advanced checkbox may offer user control during export.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.4.1 -- UI preview of `.m` header before save -->

<!-- ====================================================== -->

<section id="10.13.4.1">

  <h4>10.13.4.1 -- UI preview of <code>.m</code> header before save</h4>

  <p>

    Before writing the export file, the system can show a UI preview of the header block in a modal or 

sidebar. This allows users to visually confirm the final structure of the configuration section.

  </p>

  <p>Preview includes:</p>

  <ul>

    <li>
n
 All <code>%% CONFIG:</code> entries, with formatting intact</li>

    <li>
n
 Any user-defined multi-line comments</li>

    <li>
n
 Option to continue, edit, or cancel export</li>

  </ul>

  <p>Example modal:</p>

  <pre><code class="language-html">&lt;div class="config-preview"&gt;

  &lt;h3&gt;Header Preview: trial_07.m&lt;/h3&gt;

  &lt;pre&gt;

%% EXPORT SETTINGS

%% CONFIG: LATEX_MODE = inline

%% CONFIG: EXPORT_FOLDER_ID = 1abcDEF...

  &lt;/pre&gt;

  &lt;button&gt;Continue Export&lt;/button&gt;

  &lt;button&gt;Cancel&lt;/button&gt;

&lt;/div&gt;</code></pre>

  <p>

    This reduces the risk of accidental misconfiguration or forgotten toggles, and offers a layer of user 

control before irreversible changes are made.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.4.2 -- Allow user to edit or toggle lines -->

<!-- ====================================================== -->

<section id="10.13.4.2">


  <h4>10.13.4.2 -- Allow user to edit or toggle lines</h4>

  <p>

    The header preview interface allows users to toggle or edit individual lines before the final `.m` file is

 written. This provides on-the-fly overrides without changing the source config sheet.

  </p>

  <p>UI features include:</p>

  <ul>

    <li>
/
n
 Inline editable text fields for values</li>

    <li>
n
 Checkbox to include/exclude specific keys</li>

    <li>
nn
 Warning if user disables required lines</li>

  </ul>

  <p>Editable line example:</p>

  <pre><code class="language-html">&lt;label&gt;

  &lt;input type="checkbox" checked&gt;

  LATEX_MODE = &lt;input type="text" value="inline"&gt;

&lt;/label&gt;</code></pre>

  <p>

    These temporary overrides do <strong>not</strong> affect the underlying config stored in the spreadsheet. 

Once the export is complete, the session edits are discarded unless saved manually.

  </p>

  <p>

    This feature helps reduce accidental exports with legacy values, and provides flexibility for trial-and-

error workflows without re-entering sheet data.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.4.3 -- Comparison side-by-side with active config -->

<!-- ====================================================== -->

<section id="10.13.4.3">

  <h4>10.13.4.3 -- Comparison side-by-side with active config</h4>

  <p>

    Advanced preview modes show a side-by-side comparison between the active export configuration (what will 

be written to the `.m` file) and the current contents of the <code>Export Settings</code> sheet.

  </p>

  <p>Comparison features:</p>

  <ul>

    <li>
n
 Left: live spreadsheet config; Right: export override</li>

    <li>
n
 Highlight rows that differ</li>

    <li>
n
 Optionally show footnotes explaining changes</li>

  </ul>

  <p>Example diff layout:</p>

  <pre><code class="language-plaintext">| Sheet Config           | Export Config          |

|------------------------|------------------------|

| LATEX_MODE = inline    | LATEX_MODE = block     |

| MAX_WARNINGS = 10      | MAX_WARNINGS = 10      |

| SHOW_CONFIG_BLOCK = T  | SHOW_CONFIG_BLOCK = F  |</code></pre>

  <p>

    This allows educators, developers, or researchers to catch subtle overrides, especially in multi-user 

environments or when scripting batch runs.

  </p>

  <p>

    Discrepancies can be confirmed, canceled, or reverted with inline controls or sidebar checkboxes.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.4.4 -- Export both `.m` and `.json` config copy -->

<!-- ====================================================== -->

<section id="10.13.4.4">

  <h4>10.13.4.4 -- Export both <code>.m</code> and <code>.json</code> config copy</h4>

  <p>

    For version tracking and reproducibility, the script can export both a standard MATLAB <code>.m</code> 

file and a structured <code>.json</code> file containing the configuration settings used in the export.

  </p>

  <p>Exported `.json` includes:</p>

  <ul>

    <li>
n
 All key-value pairs from <code>Export Settings</code></li>

    <li>
n
 Optional notes and metadata like timestamp, UID, version</li>

    <li>
n
 Stored in same folder as <code>.m</code> file with matching name</li>

  </ul>

  <p>Example filenames:</p>

  <pre><code class="language-bash">trial_07.m

trial_07.config.json</code></pre>

  <p>Example `.json` content:</p>

  <pre><code class="language-json">{

  "LATEX_MODE": "inline",

  "DRY_RUN_MODE": false,

  "EXPORT_FOLDER_ID": "1abcDEF...",

  "UID": "T07-20250615",

  "timestamp": "2025-06-15T18:02:34Z"


}</code></pre>

  <p>

    This allows easy re-import for future exports or batch processing, supports Git diffing of export 

settings, and creates a tamper-evident history of configuration changes over time.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.13.4.5 -- Save summary of applied settings to Export Log -->

<!-- ====================================================== -->

<section id="10.13.4.5">

  <h4>10.13.4.5 -- Save summary of applied settings to Export Log</h4>

  <p>

    Each time a file is exported, the core settings used during export are summarized and stored in the 

<code>Export Log</code> sheet. This log entry includes metadata that can be audited later for consistency or 

debugging.

  </p>

  <p>Columns may include:</p>

  <ul>

    <li>
n
 File name and UID</li>

    <li>
n
 Timestamp of export</li>

    <li>
nn
 Export type (e.g. <code>.m only</code>, <code>.m + .json</code>)</li>

    <li>
n
 Summary of key settings (e.g. <code>LATEX_MODE=inline</code>)</li>

  </ul>

  <p>Example log row:</p>

  <pre><code class="language-csv">UID, Filename, Timestamp, Mode, Settings Summary

T07, trial_07.m, 2025-06-15 18:02, m + json, LATEX_MODE=inline, DRY_RUN=FALSE</code></pre>

  <p>

    This supports traceability across experiments and helps identify regressions, configuration drift, or 

misaligned settings in team environments.

  </p>

  <p>

    Admins may also filter logs by configuration to find past exports with specific toggles enabled.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.14.1.1 -- Strip or convert Unicode (e.g., Greek 
®
 ASCII) -->

<!-- ====================================================== -->

<section id="10.14.1.1">

  <h4>10.14.1.1 -- Strip or convert Unicode (e.g., Greek 
®
 ASCII)</h4>

  <p>

    During `.m` file export, the script sanitizes Unicode characters to ensure compatibility with MATLAB, 

which may not support certain characters in variable names or expressions.

  </p>

  <p>Common conversions:</p>

  <ul>

    <li>
a
 
®
 <code>a</code></li>

    <li>
f
 
®
 <code>phi</code></li>

    <li>
w
 
®
 <code>omega</code></li>

    <li>
p
 
®
 <code>pi</code></li>

  </ul>

  <p>

    The mode of conversion (strict ASCII vs. transliteration) is configurable via <code>UNICODE_MODE = 

"convert"</code> or <code>"strip"</code> in the export settings.

  </p>

  <p>Example:</p>

  <pre><code class="language-matlab">% Original user-defined formula

y(t) = A * cos(
w
*t + 
f
)

% After conversion

y(t) = A * cos(omega*t + phi)</code></pre>

  <p>

    This prevents errors such as fiUnrecognized characterfl or fiInvalid variable namefl in MATLAB and makes the 

exported code more robust for environments that lack UTF-8 support.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.14.1.2 -- Detect invisible whitespace or breaks -->

<!-- ====================================================== -->

<section id="10.14.1.2">

  <h4>10.14.1.2 -- Detect invisible whitespace or breaks</h4>

  <p>

    The export system checks for invisible characters such as zero-width spaces, non-breaking spaces (NBSP), 

or unprintable control characters that may have been introduced via copy/paste or external tools.

  </p>

  <p>Types of issues flagged:</p>

  <ul>

    <li>
n
 Zero-width space (`U+200B`)</li>

    <li>
n
 Non-breaking space (`U+00A0`)</li>

    <li>
n
 Unintended carriage return/line feed artifacts</li>

  </ul>


  <p>Response actions:</p>

  <ul>

    <li>
n
 Auto-removal if safe</li>

    <li>
nn
 Highlighted line in preview</li>

    <li>
n
 Appended warning comment: <code>% WARNING: invisible character removed</code></li>

  </ul>

  <p>Example before/after:</p>

  <pre><code class="language-matlab">% Before:

y(t) = A
n
*
n
cos(w*t)
n
% (invisible NBSPs used)

% After:

y(t) = A * cos(w*t)  % WARNING: invisible characters removed</code></pre>

  <p>

    This ensures that MATLAB execution isn(TM)t silently broken due to invisible content, which is especially 

common when formulas are copied from LaTeX renderers or websites.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.14.1.3 -- Error on unsupported math symbols -->

<!-- ====================================================== -->

<section id="10.14.1.3">

  <h4>10.14.1.3 -- Error on unsupported math symbols</h4>

  <p>

    Some mathematical symbols used in LaTeX, Unicode, or textbook notation (e.g. 
ò
, 
Ö
, 
Ä
, ±) are not supported

 in MATLAB expressions and must be handled before export.

  </p>

  <p>Common examples that trigger errors:</p>

  <ul>

    <li>
ò
 (integral symbol)</li>

    <li>
Ö
 (square root sign)</li>

    <li>
Ä
 (tensor product or multiplication)</li>

    <li>
¹
, 
£
, 
³
 (relational operators in symbol form)</li>

  </ul>

  <p>Resolution strategies:</p>

  <ul>

    <li>
n
 Replaced with ASCII equivalents (e.g., <code>sqrt()</code>, <code>^0.5</code>)</li>

    <li>
n
 Export halted if symbol cannot be safely converted</li>

    <li>
n
 Comment added: <code>% WARNING: unsupported symbol 
Ö
 replaced</code></li>

  </ul>

  <p>Example fix:</p>

  <pre><code class="language-matlab">% User input (invalid)

y(t) = 
Ö
(A) * cos(w*t)

% Exported (safe)

y(t) = sqrt(A) * cos(w*t)  % WARNING: unsupported symbol 
Ö
 replaced</code></pre>

  <p>

    Users are notified during preview, and logs include the location and type of replacement. This promotes 

transparency and allows manual correction when needed.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.14.1.4 -- Display replacement result (before/after) -->

<!-- ====================================================== -->

<section id="10.14.1.4">

  <h4>10.14.1.4 -- Display replacement result (before/after)</h4>

  <p>

    To help users understand how their formula was sanitized or modified, the export preview includes a 

fibeforefl and fiafterfl comparison panel. This is displayed in a code-styled container in the sidebar or modal.

  </p>

  <p>UI layout:</p>

  <ul>

    <li>
nn
 Left: original input (user-entered or imported)</li>

    <li>
á
n
 Right: cleaned output ready for `.m` export</li>

    <li>
n
 Color-coded highlights for changes</li>

  </ul>

  <p>Preview example:</p>

  <pre><code class="language-diff">- y(t) = 
Ö
(A) * cos(
w
*t)

+ y(t) = sqrt(A) * cos(omega*t)</code></pre>

  <p>

    This not only improves debugging and review accuracy but also supports educational feedback loops by 

showing students how their symbolic inputs are interpreted.

  </p>

  <p>

    Optional: toggles to fiview only changed lines,fl fiexpand all,fl or fishow comments inline.fl

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.14.1.5 -- Highlight lines with substitutions -->

<!-- ====================================================== -->

<section id="10.14.1.5">

  <h4>10.14.1.5 -- Highlight lines with substitutions</h4>


  <p>

    When exporting `.m` files, any lines that include symbol conversions, Unicode replacements, or invalid 

character removals are explicitly annotated. This increases transparency and provides an audit trail for 

changes made automatically by the script.

  </p>

  <p>Features include:</p>

  <ul>

    <li>
nn
 Lines marked with a <code>% cleaned</code> suffix comment</li>

    <li>
n
 Optional color highlighting in preview panel</li>

    <li>
n
 Sidebar log entry for each modified line (if verbose mode is on)</li>

  </ul>

  <p>Example output:</p>

  <pre><code class="language-matlab">y(t) = sqrt(A) * cos(omega*t)  % cleaned</code></pre>

  <p>

    This tag does not affect MATLAB execution but helps users trace what changes were made behind the scenes, 

especially if results deviate unexpectedly from the original model.

  </p>

  <p>

    Configurable setting: <code>ANNOTATE_CLEANED_LINES = true</code> enables or disables this behavior 

globally.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.14.2.1 -- Check for trailing operators, missing semicolons -->

<!-- ====================================================== -->

<section id="10.14.2.1">

  <h4>10.14.2.1 -- Check for trailing operators, missing semicolons</h4>

  <p>

    The validator scans for basic MATLAB syntax errors such as unclosed expressions (e.g., <code>A = 5 

+</code>) and missing semicolons, which can produce noisy or invalid output.

  </p>

  <p>Checks include:</p>

  <ul>

    <li>
n
 Trailing operators (<code>+</code>, <code>*</code>, <code>^</code>) without a second operand</li>

    <li>
n
 Lines that don(TM)t terminate with a semicolon (configurable warning)</li>

    <li>
n
 Imbalanced parentheses or brackets</li>

  </ul>

  <p>Auto-correction (optional):</p>

  <ul>

    <li>Add semicolon at end of line if missing</li>

    <li>Flag unclosed expressions but don(TM)t attempt unsafe repairs</li>

    <li>Log error with line index and preview</li>

  </ul>

  <p>Example warning:</p>

  <pre><code class="language-matlab">A = 5 +         % WARNING: trailing operator

y = cos(w*t)    % auto-added semicolon: y = cos(w*t);</code></pre>

  <p>

    These checks catch common user mistakes and reduce friction during regression or publication steps.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.14.2.2 -- Invalid variable names or MATLAB-reserved words -->

<!-- ====================================================== -->

<section id="10.14.2.2">

  <h4>10.14.2.2 -- Invalid variable names or MATLAB-reserved words</h4>

  <p>

    MATLAB variable names must start with a letter and contain only letters, digits, or underscores. 

Additionally, some names are reserved by MATLAB (e.g., <code>end</code>, <code>plot</code>, <code>sum</code>) 

and cannot be used for user-defined variables.

  </p>

  <p>Validation steps:</p>

  <ul>

    <li>
n
 Check that variable names begin with a letter</li>

    <li>
n
 Reject names with spaces, dashes, or special characters</li>

    <li>
n
 Compare against list of MATLAB keywords and function names</li>

  </ul>

  <p>Response options:</p>

  <ul>

    <li>
n
 Auto-rename invalid variables (e.g., <code>plot 
®
 plot_user</code>)</li>

    <li>
nn
 Prompt user to rename or approve override</li>

    <li>
n
 Append comment: <code>% WARNING: renamed reserved variable</code></li>

  </ul>

  <p>Example output:</p>

  <pre><code class="language-matlab">plot = 5;  % WARNING: 'plot' is a reserved MATLAB function name 
®
 renamed

 to 'plot_user'

plot_user = 5;</code></pre>

  <p>

    This prevents execution errors and ensures that function and variable scopes remain isolated.

  </p>


</section>

<!-- ====================================================== -->

<!-- 10.14.2.3 -- Warnings for empty or duplicate lines -->

<!-- ====================================================== -->

<section id="10.14.2.3">

  <h4>10.14.2.3 -- Warnings for empty or duplicate lines</h4>

  <p>

    Before final export, the system checks for structural problems in parameter blocks or generated code, 

including empty lines, duplicate assignments, or unreachable code fragments.

  </p>

  <p>Warnings include:</p>

  <ul>

    <li>
n
 Empty lines in parameter or formula regions</li>

    <li>
nn
 Duplicate variable assignments (e.g., two definitions of <code>b</code>)</li>

    <li>
n
 Lines that are unreachable due to missing context (experimental)</li>

  </ul>

  <p>Logged result:</p>

  <pre><code class="language-matlab">A = 5;

b = 0.3;

b = 0.2;  % WARNING: duplicate variable 'b'

</code></pre>

  <p>

    Sidebar preview and Error Log both list line number and tag the affected block, giving users a chance to 

resolve or accept the duplication. These issues don(TM)t always break MATLAB but may introduce confusion or 

errors in downstream analysis.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.14.2.4 -- Insert `% WARNING: ...` comment into export -->

<!-- ====================================================== -->

<section id="10.14.2.4">

  <h4>10.14.2.4 -- Insert <code>% WARNING: ...</code> comment into export</h4>

  <p>

    For every issue identified during the export process--be it symbol replacement, missing semicolons, 

duplicate variables, or unsupported expressions--the system adds inline warning comments directly into the 

generated `.m` file.

  </p>

  <p>Features of warning comments:</p>

  <ul>

    <li>
n
 Added in the same line as the issue, after a semicolon if present</li>

    <li>
n
 Always start with <code>% WARNING:</code> to allow easy grep/search</li>

    <li>
n
 Match preview in sidebar and Error Log for traceability</li>

  </ul>

  <p>Examples of inserted warnings:</p>

  <pre><code class="language-matlab">phi = ;                     % WARNING: empty assignment

omega = sqrt(w);            % WARNING: unsupported symbol 
Ö
 replaced with sqrt()

b = 0.2;

b = 0.25;                   % WARNING: duplicate assignment to 'b'</code></pre>

  <p>

    These warnings provide context for reviewers and teachers, making them useful not just for debugging but 

for pedagogical feedback. The verbosity and inclusion of such tags can be toggled via the config setting: 

<code>INCLUDE_WARNING_COMMENTS = true</code>.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.14.2.5 -- Limit warning spam via setting -->

<!-- ====================================================== -->

<section id="10.14.2.5">

  <h4>10.14.2.5 -- Limit warning spam via setting</h4>

  <p>

    To prevent the `.m` output from becoming overwhelmed with too many warnings--especially in large or 

autogenerated models--the script includes logic to limit the number of inline warnings.

  </p>

  <p>Mechanism details:</p>

  <ul>

    <li>
n
 Caps total warnings per file (default: 10)</li>

    <li>
n
 After the limit, repeated issues are collapsed into summary lines</li>

    <li>
n
 Sidebar and Error Log still contain full entries, even if `.m` output is trimmed</li>

  </ul>

  <p>Example (collapsed view):</p>

  <pre><code class="language-matlab">% WARNING: 12 additional similar issues omitted. See Error Log for full 

list.</code></pre>

  <p>

    This keeps the `.m` output clean while maintaining full error documentation in structured logs. Setting 

can be modified with: <code>MAX_INLINE_WARNINGS = 10</code>.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.14.3.1 -- Log failures to fiError Logfl and fiExport Logfl -->


<!-- ====================================================== -->

<section id="10.14.3.1">

  <h4>10.14.3.1 -- Log failures to fiError Logfl and fiExport Logfl</h4>

  <p>

    Any error that interrupts or degrades the quality of a `.m` export is captured in two structured logs:

  </p>

  <ul>

    <li><strong>Error Log:</strong> Detailed breakdown of issue with location, message, and context</li>

    <li><strong>Export Log:</strong> High-level summary of export status for tracking</li>

  </ul>

  <p>Sample entries:</p>

  <pre><code class="language-spreadsheet">[Error Log]

Timestamp       | UID      | File        | Message

----------------|----------|-------------|-----------------------------

10:34:22 AM     | T202     | trial4.m    | Missing semicolon on line 5

[Export Log]

Timestamp       | UID      | Status      | Notes

----------------|----------|-------------|-----------------------------

10:34:24 AM     | T202     | Failed      | Syntax error in phi definition</code></pre>

  <p>

    These logs are essential for automated QA, error recovery, and export history audits. They(TM)re stored 

persistently in sheets and optionally exported as CSV or JSON snapshots.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.14.3.2 -- Structure: UID, file, time, message, fix -->

<!-- ====================================================== -->

<section id="10.14.3.2">

  <h4>10.14.3.2 -- Structure: UID, file, time, message, fix</h4>

  <p>

    All log entries follow a consistent schema designed for both human readability and machine parsing. This 

aids in debugging, version tracking, and batch analysis.

  </p>

  <p>Fields include:</p>

  <ul>

    <li><strong>UID:</strong> Trial or export ID (e.g., T304, Run18)</li>

    <li><strong>File:</strong> Output file name (e.g., <code>trial4.m</code>)</li>

    <li><strong>Time:</strong> Local timestamp of the export event</li>

    <li><strong>Message:</strong> Specific error, warning, or info</li>

    <li><strong>Fix:</strong> (Optional) Remediation attempted by script</li>

  </ul>

  <p>Example structured line:</p>

  <pre><code class="language-csv">UID: T304, File: trial4.m, Time: 10:35 AM, Issue: Invalid symbol 
f
, Fix: 

replaced with phi</code></pre>

  <p>

    This structure is mirrored across both sidebar logs and spreadsheet-based logs. It facilitates cross-

referencing between runs and enables smart filtering in dashboards.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.14.3.3 -- Auto-flag broken exports in dashboard -->

<!-- ====================================================== -->

<section id="10.14.3.3">

  <h4>10.14.3.3 -- Auto-flag broken exports in dashboard</h4>

  <p>

    Failed or partially successful exports are automatically flagged in the summary dashboard. This helps 

users and teachers identify which trials require attention or reprocessing.

  </p>

  <p>Flagging mechanisms include:</p>

  <ul>

    <li>
n
 A red outline or cross icon on the export row in the summary sheet</li>

    <li>
n
 fiFailedfl or fi
n
 Needs Reviewfl status in the Export Log</li>

    <li>
n
 Sidebar filter to only show broken or suspicious trials</li>

  </ul>

  <p>Example dashboard row:</p>

  <pre><code class="language-spreadsheet">Trial Name | UID    | Status      | Notes

-----------|--------|-------------|------------------------------

trial_04   | T304   | 
n
 Needs Review | Duplicate variable: A</code></pre>

  <p>

    These visual indicators make it easy to review batch exports, especially in classroom or research 

environments. Clicking on a flagged trial can open the associated `.m` file preview or error trace.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.14.3.4 -- Export bad `.m` file to temp folder for review -->

<!-- ====================================================== -->

<section id="10.14.3.4">

  <h4>10.14.3.4 -- Export bad <code>.m</code> file to temp folder for review</h4>

  <p>

    Instead of discarding failed or partially broken exports, the script saves the result to a designated 


debug folder in Google Drive. This allows for later inspection, bug reporting, or teacher evaluation.

  </p>

  <p>Features:</p>

  <ul>

    <li>
n
 Files stored in <code>/MATLAB_Debug/</code> or user-defined folder</li>

    <li>
n
 Timestamp and UID embedded in filename</li>

    <li>
n
 Option to include error summary in file header</li>

  </ul>

  <p>Example filename:</p>

  <code>trial4_ERROR_2025-06-15T10-45-00.m</code>

  <p>

    This allows exports that fail validation to be preserved for accountability and comparison. Optionally, a 

warning modal may link directly to the Drive location where the file was saved.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.14.3.5 -- Optionally requeue broken exports -->

<!-- ====================================================== -->

<section id="10.14.3.5">

  <h4>10.14.3.5 -- Optionally requeue broken exports</h4>

  <p>

    To streamline error recovery and reduce manual intervention, the system allows users to requeue failed or 

problematic exports directly from the HelpDialog sidebar or ExportLog interface.

  </p>

  <p>This functionality supports workflows where:</p>

  <ul>

    <li>
n
 A template was corrected after a bad export</li>

    <li>
n
 Parameter inputs or cell anchors were fixed</li>

    <li>
n
 Partial outputs need to be retried in bulk</li>

  </ul>

  <p>Sidebar interaction:</p>

  <ul>

    <li>
n
 A list of failed exports is displayed with trial name, timestamp, and error</li>

    <li>
n
 Each item has a <strong>"Retry"</strong> button beside it</li>

    <li>
n
 Hover tooltips summarize what failed (e.g., "Missing value for phi")</li>

  </ul>

  <p>Technical structure:</p>

  <pre><code class="language-javascript">// Example requeue logic

if (row.status === "Failed") {

  ui.button("Retry", () => {

    runRegression(row.uid);  // Retry core export logic

  });

}

</code></pre>

  <p>Key features:</p>

  <ul>

    <li>
n
 Number of retry attempts tracked and stored in a dedicated column</li>

    <li>
n
 ExportLog updated with new status and note on retry</li>

    <li>
n
 Reattempt entries retain original UID to ensure traceability</li>

  </ul>

  <p>

    Requeueing can be done individually or via a <strong>fiRetry Allfl</strong> button, especially useful after 

global fixes (e.g., syntax rule correction, updated template).

  </p>

  <p>

    For educators, this feature dramatically improves post-lab feedback cycles, enabling clean re-runs after 

students adjust data or equations. Optional settings in the config tab can cap retries (e.g., 

<code>MAX_RETRIES = 3</code>) or require confirmation before mass rerun.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.15.1.1 -- Auto-move `.m` files to Trash on delete -->

<!-- ====================================================== -->

<section id="10.15.1.1">

  <h4>10.15.1.1 -- Auto-move <code>.m</code> files to Trash on delete</h4>

  <p>

    When a user deletes a generated <code>.m</code> file using the export tools or the sidebar interface, the 

system performs a soft delete by moving the file to the Google Drive Trash instead of permanently deleting it.

  </p>

  <p>This safeguard prevents accidental data loss and supports future recovery.</p>

  <p>Deletion logic includes:</p>

  <ul>

    <li>
n
 Uses <code>DriveApp.getFileById().setTrashed(true)</code></li>

    <li>
n
 Logs deletion event to the Export Log with UID, file name, and user</li>

    <li>
n
 Optionally requests confirmation before proceeding (see 10.15.3.4)</li>

  </ul>

  <p>Example entry in Export Log:</p>

  <pre><code class="language-csv">Timestamp       | UID    | File Name    | Status     | Action

----------------|--------|--------------|------------|------------------------


10:46 AM        | U492   | trial05.m    | Deleted    | Moved to Trash by user</code></pre>

  <p>

    This behavior ensures that valuable code exports aren(TM)t lost due to misclicks or misunderstandings, 

particularly in shared classroom or research environments. Trash contents are visible in Google Drive for up 

to 30 days unless manually purged.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.15.1.2 -- Backup previous version before overwrite -->

<!-- ====================================================== -->

<section id="10.15.1.2">

  <h4>10.15.1.2 -- Backup previous version before overwrite</h4>

  <p>

    When exporting a <code>.m</code> file with a name that already exists in the target Drive folder, the 

system automatically backs up the older version before it is overwritten. This backup ensures version history 

and allows recovery of past exports.

  </p>

  <p>Backup behavior includes:</p>

  <ul>

    <li>
n
 Moves original file to a hidden or user-defined backup folder (e.g., <code>/Backups/</code>)</li>

    <li>
n
 Appends a timestamp or version number to prevent filename conflicts</li>

    <li>
n
 Records the event in both the Export Log and Metadata Sheet</li>

  </ul>

  <p>Example backup filename:</p>

  <code>trial05_BACKUP_2025-06-15T10-48-12.m</code>

  <p>

    This protects users from silent overwrites, especially when working with shared folders or repeating 

exports across versions. In the HelpDialog or config sheet, users can set backup retention time, location, and

 naming format.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.15.1.3 -- Store metadata (`deletedBy`, `deletedAt`) -->

<!-- ====================================================== -->

<section id="10.15.1.3">

  <h4>10.15.1.3 -- Store metadata (<code>deletedBy</code>, <code>deletedAt</code>)</h4>

  <p>

    Whenever a user deletes or overwrites a file using the HelpDialog system, key metadata about that action 

is logged for auditability. This feature ensures accountability in shared environments and supports recovery 

or rollback tracking.

  </p>

  <p>Metadata captured includes:</p>

  <ul>

    <li>
n
 <strong>User Email</strong> -- pulled via <code>Session.getActiveUser().getEmail()</code></li>

    <li>
n
 <strong>Timestamp</strong> -- ISO-formatted for easy sorting</li>

    <li>
n
 <strong>File Name / UID</strong> -- to link to the affected export</li>

    <li>
n
 <strong>Action Type</strong> -- fiDeletedfl, fiOverwrittenfl, or fiRequeuedfl</li>

  </ul>

  <p>Example metadata row:</p>

  <pre><code class="language-csv">UID      | File Name   | deletedBy             | deletedAt           | 

Action

---------|-------------|------------------------|---------------------|------------

T514     | trial06.m   | student@school.edu     | 2025-06-15T10:49:42 | Deleted</code></pre>

  <p>

    This data is saved in a dedicated <code>MetadataLog</code> sheet and optionally mirrored to a JSON store. 

Future versions may enable filtered views for admin review or integration with school policy enforcement 

tools.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.15.1.4 -- Limit retention (e.g. 7 days) -->

<!-- ====================================================== -->

<section id="10.15.1.4">

  <h4>10.15.1.4 -- Limit retention (e.g. 7 days)</h4>

  <p>

    To manage storage efficiently and prevent clutter in backup and trash folders, the system enforces a 

retention policy. Deleted or overwritten files are automatically purged after a configurable number of days 

unless marked for long-term retention.

  </p>

  <p>Retention system details:</p>

  <ul>

    <li>
n
 Default = 7 days; editable in <code>Export Settings</code> tab via <code>RETENTION_DAYS</code></li>

    <li>
n
 Files beyond this threshold are auto-deleted via time-based trigger or cleanup function</li>

    <li>
n
 Log entry is added when a file is purged, including UID and folder</li>

  </ul>

  <p>Optional safeguards:</p>

  <ul>

    <li>
n
 Flag files with <code>KEEP</code> tag to exclude from purge</li>

    <li>
n
 Admin override prevents deletion if account-level lock is set</li>

  </ul>


  <p>

    This automated cleanup prevents unnecessary Drive clutter and complies with common data lifecycle policies

 in educational and institutional contexts.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.15.1.5 -- Show contents in UI sidebar -->

<!-- ====================================================== -->

<section id="10.15.1.5">

  <h4>10.15.1.5 -- Show contents in UI sidebar</h4>

  <p>

    Deleted or overwritten files are not only logged, but also presented in a sidebar interface to aid with 

review and recovery. This tool gives users a visual and interactive way to browse recently affected files, 

with partial previews and metadata.

  </p>

  <p>Sidebar contents include:</p>

  <ul>

    <li>
n
 File name and original export UID</li>

    <li>
n
 Deletion timestamp (<code>deletedAt</code>)</li>

    <li>
n
 Deleted by (email or alias)</li>

    <li>
n
 Button to view partial preview or open file in Drive</li>

  </ul>

  <p>Sidebar layout uses collapsible cards or table view:</p>

  <pre><code class="language-html">

<div class="deleted-card">

  <h5>trial06.m</h5>

  <p>UID: T514</p>

  <p>Deleted by: student@school.edu</p>

  <p>Time: 2025-06-15 10:49</p>

  <button>Preview</button>

  <button>Restore</button>

</div>

</code></pre>

  <p>Preview mode may include:</p>

  <ul>

    <li>
n
 First 20 lines of the `.m` file with syntax highlighting</li>

    <li>
nn
 Visual warnings if errors were logged before deletion</li>

    <li>
n
 "Restore" button to re-export or copy back to active folder</li>

  </ul>

  <p>

    This feature empowers users to recover from mistakes without backend intervention and reinforces trust in 

the export system. Optional filters include fiLast 24 hoursfl, fiDeleted by mefl, and fiAwaiting restorefl.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.15.2.1 -- Lookup previous version from Export Log -->

<!-- ====================================================== -->

<section id="10.15.2.1">

  <h4>10.15.2.1 -- Lookup previous version from Export Log</h4>

  <p>

    The system includes functionality to retrieve past versions of any exported file by scanning the 

<code>Export Log</code>. This is essential for restoring outputs that were overwritten or accidentally 

modified.

  </p>

  <p>Lookup parameters include:</p>

  <ul>

    <li>
n
 UID (e.g., <code>T514</code>)</li>

    <li>
n
 File name (e.g., <code>trial06.m</code>)</li>

    <li>
n
 Export timestamp</li>

  </ul>

  <p>Lookup can be triggered via:</p>

  <ul>

    <li>
n
 Sidebar tool: fiFind Previous Versionfl</li>

    <li>
n
 HelpDialog menu > Tools > fiRestore from Logfl</li>

    <li>
nn
 Auto-restore option after delete or overwrite</li>

  </ul>

  <p>Sample log query structure:</p>

  <pre><code class="language-javascript">

const logData = getSheetData("ExportLog");

const matches = logData.filter(row => row.uid === "T514" && row.status === "Success");

</code></pre>

  <p>

    Matching entries allow the script to locate the Drive file ID (if still present), metadata, and 

potentially offer a one-click restore function. This lookup ensures transparency in version management.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.15.2.2 -- Restore from backup `.m` file -->

<!-- ====================================================== -->

<section id="10.15.2.2">


  <h4>10.15.2.2 -- Restore from backup <code>.m</code> file</h4>

  <p>

    Once a matching historical export is located, the system can restore it from the backup folder. This 

function moves or copies the backup file back into the active export directory with the original or a user-

defined filename.

  </p>

  <p>Key features of restore:</p>

  <ul>

    <li>
n
 Finds the file in the defined <code>/Backups/</code> Drive folder</li>

    <li>
n
 Copies the file to the export folder</li>

    <li>
-
n
 Optionally prompts for renaming before restore</li>

    <li>
n
 Logs the action in the <code>ExportLog</code> with "Restored" status</li>

  </ul>

  <p>Example Apps Script logic:</p>

  <pre><code class="language-javascript">

function restoreBackup(uid) {

  const file = DriveApp.getFilesByName(`trial06_BACKUP_${uid}.m`).next();

  const exportFolder = getExportFolder(uid);

  exportFolder.createFile(file.getBlob()).setName(`trial06_restored.m`);

}

</code></pre>

  <p>

    This provides a simple, transparent recovery mechanism for users, especially in collaborative or 

instructional settings where accidental loss is more likely. An optional sidebar confirmation ensures the user

 sees which version is being restored.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.15.2.3 -- Rebuild regression parameters from old log -->

<!-- ====================================================== -->

<section id="10.15.2.3">

  <h4>10.15.2.3 -- Rebuild regression parameters from old log</h4>

  <p>

    In addition to restoring the exported file itself, the system can retrieve and reinsert the associated 

regression parameters (e.g., <code>A</code>, <code>b</code>, <code>
w
</code>) from the <code>ExportLog</code> 

or <code>Processing</code> sheets.

  </p>

  <p>Process details:</p>

  <ul>

    <li>
n
 Extracts values from stored logs or metadata blocks</li>

    <li>
n
 Reconnects variables to named ranges or cell blocks (e.g., anchor cells)</li>

    <li>
n
 Offers partial rebuild if only some values are recoverable</li>

  </ul>

  <p>Sample output after restore:</p>

  <pre><code class="language-text">

Restored regression parameters for UID: T514

A = 1.23

b = 0.17

w
 = 6.28

f
 = -0.12

</code></pre>

  <p>

    This function is especially useful for revisiting or continuing interrupted analysis, ensuring the model 

and its parameters are synchronized without requiring a full re-import or manual re-entry. Rebuilding also 

helps validate whether an old export was valid or needs correction.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.15.2.4 -- Reinject old LaTeX / cell values -->

<!-- ====================================================== -->

<section id="10.15.2.4">

  <h4>10.15.2.4 -- Reinject old LaTeX / cell values</h4>

  <p>

    This feature allows the HelpDialog system to recover and reinsert the original LaTeX expressions and cell-

level input values that were used during a previous export. It's particularly helpful for restoring symbolic 

or annotated formulas in complex regressions.

  </p>

  <p>How reinjection works:</p>

  <ul>

    <li>
n
 Extracts stored LaTeX from export metadata or logs</li>

    <li>
n
 Matches variables to named cell ranges or anchors (e.g., <code>%%VAR%%</code>)</li>

    <li>
n
 Offers user preview of which values will be pasted where</li>

  </ul>

  <p>Example reinjected block:</p>

  <pre><code class="language-latex">

y(t) = A \cos(\omega t + \phi) \cdot e^{-bt} + x_0

\text{where } A = 1.2, \omega = 6.28, b = 0.1, \phi = 0.3

</code></pre>

  <p>Optional reinjection modes:</p>

  <ul>


    <li>
n
 Cell mode -- writes values into spreadsheet input blocks</li>

    <li>
n
 Metadata mode -- embeds expression in parameter sheet</li>

    <li>
n
 Preview mode -- read-only card view in sidebar</li>

  </ul>

  <p>

    This tool ensures that users can fully reconstruct past exports or correct changes without needing to 

memorize or retype the original math, especially when dealing with customized or derived formulas.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.15.2.5 -- Restore metadata block + file name -->

<!-- ====================================================== -->

<section id="10.15.2.5">

  <h4>10.15.2.5 -- Restore metadata block + file name</h4>

  <p>

    As part of a full restoration, the system also reinserts the metadata header that accompanied the original

 <code>.m</code> file, as well as the filename and unique identifier (UID). This helps preserve historical 

consistency and alignment with other exported outputs.

  </p>

  <p>Restored metadata includes:</p>

  <ul>

    <li>
n
 UID and trial number (e.g., <code>UID = T514</code>)</li>

    <li>
n
 Original export timestamp (ISO format)</li>

    <li>
n
 Description of model or fit type</li>

    <li>
n
 Configuration summary if included (see <a href="#10.13.3.1">10.13.3.1</a>)</li>

  </ul>

  <p>Example metadata block:</p>

  <pre><code class="language-matlab">

%% Export Metadata

% UID = T514

% Date = 2025-06-15T10:52:43

% Model = Damped Cosine

% Notes = Restored from backup

</code></pre>

  <p>

    This ensures that restored exports can still be traced, indexed, and audited alongside other files from 

the same trial. It also helps in maintaining reproducibility for IA submissions, lab reports, or long-term 

project tracking.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.15.3.1 -- Add to Help/Tools menu -->

<!-- ====================================================== -->

<section id="10.15.3.1">

  <h4>10.15.3.1 -- Add to Help/Tools menu</h4>

  <p>

    To make the undo and restore features easily accessible, the system adds a new entry to the HelpDialog 

menu interface. This item provides users with direct access to undo recent actions or view backup history 

without scripting.

  </p>

  <p>Menu integration details:</p>

  <ul>

    <li>
n
 Located in the <code>"HelpDialog 
®
 Tools"</code> submenu</li>

    <li>
n
 Entry name: <code>"Undo Last Export"</code> or <code>"Restore from Backup"</code></li>

    <li>
n
 Optionally hidden unless recent export activity is logged</li>

  </ul>

  <p>Example insertion code:</p>

  <pre><code class="language-javascript">

ui.createMenu("HelpDialog")

  .addSubMenu(ui.createMenu("Tools")

    .addItem("Undo Last Export", "undoLastExport")

    .addItem("View Deleted Files", "showDeletedFilesSidebar"))

  .addToUi();

</code></pre>

  <p>

    This provides intuitive access for students or teachers unfamiliar with backend scripts, enabling simple 

recovery with one click from the UI. It complements logging features introduced in <a href="#11.7">Section 

11.7</a>.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.15.3.2 -- Function <code>undoLastExport()</code> with preview -->

<!-- ====================================================== -->

<section id="10.15.3.2">

  <h4>10.15.3.2 -- Function <code>undoLastExport()</code> with preview</h4>

  <p>

    The core function supporting the fiUndofl feature is <code>undoLastExport()</code>. It accesses the latest 

export record and attempts to restore the prior state--either by restoring a previous file, recovering 

overwritten content, or replacing deleted metadata.

  </p>


  <p>Function behavior:</p>

  <ul>

    <li>
n
 Looks up most recent export UID and file name</li>

    <li>
n
 Verifies that a backup file or prior log exists</li>

    <li>
n
 Prompts user to preview the rollback before committing</li>

    <li>
n
 Executes copy/restore and logs the result</li>

  </ul>

  <p>UI Preview includes:</p>

  <ul>

    <li>
n
 Filename and original export folder</li>

    <li>
n
 Summary of parameter values</li>

    <li>
n
 Side-by-side code snippet preview (before/after)</li>

  </ul>

  <p>Example call (user triggered):</p>

  <pre><code class="language-javascript">

function undoLastExport() {

  const lastUid = getLastExportUID();

  const preview = getPreviewOfBackup(lastUid);

  showUndoPreviewModal(preview);

}

</code></pre>

  <p>

    This function helps reduce fear of mistakes and supports confidence in using the export features without 

risk of data loss, especially for novice users or during demonstrations.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.15.3.3 -- Limit scope: one level undo only -->

<!-- ====================================================== -->

<section id="10.15.3.3">

  <h4>10.15.3.3 -- Limit scope: one level undo only</h4>

  <p>

    To maintain clarity and avoid complexity in the recovery logic, the undo system is designed to support 

only a <strong>single-level rollback</strong>. This means the user can undo the most recent export, but not a 

chain of past exports.

  </p>

  <p>Reasoning and safeguards:</p>

  <ul>

    <li>
n
 Prevents confusion over which file state is restored</li>

    <li>
n
 Keeps the export log audit trail clean and traceable</li>

    <li>
n
 Avoids issues with recursion or circular state tracking</li>

  </ul>

  <p>What this means for users:</p>

  <ul>

    <li>Only the <em>last</em> export (by UID or timestamp) is eligible for <code>Undo</code></li>

    <li>Older exports can still be restored manually via the <code>View Deleted Files</code> sidebar</li>

    <li>If a second export occurs, the previous undo opportunity is lost</li>

  </ul>

  <p>

    The limitation is enforced in the <code>undoLastExport()</code> logic with a check on the latest UID and 

timestamp match against the backup record. Any older attempts trigger a modal alert explaining this policy.

  </p>

</section>

<!-- ====================================================== -->

<!-- 10.15.3.4 -- Prompt user before overwrite -->

<!-- ====================================================== -->

<section id="10.15.3.4">

  <h4>10.15.3.4 -- Prompt user before overwrite</h4>

  <p>

    Before restoring or overwriting any previous export, the system shows a <strong>confirmation 

modal</strong>. This ensures the user understands the consequences and can prevent accidental file 

replacement.

  </p>

  <p>Modal features:</p>

  <ul>

    <li>
n
 Filename and UID of the export being restored</li>

    <li>
n
 Timestamp of original export vs now</li>

    <li>
n
 Optional diff or preview of file contents (see <a href="#10.15.3.5">10.15.3.5</a>)</li>

    <li>
n
 Checkbox for "Yes, proceed" with a final "Restore" button</li>

  </ul>

  <p>Example confirmation text:</p>

  <pre><code>

You are about to overwrite the current version of "trial06.m"

with a backup from 2025-06-15 10:47 AM (UID: T514).

n
 I confirm I want to restore this version.

[Restore]   [Cancel]

</code></pre>

  <p>

    This prompt avoids silent data overwrites and fits best practice patterns for user action validation. 

Additional options may allow restoring under a <code>_restored</code> suffix to preserve both versions.


  </p>

</section>

<!-- ====================================================== -->

<!-- 10.15.3.5 -- Show diff of current vs prior file -->

<!-- ====================================================== -->

<section id="10.15.3.5">

  <h4>10.15.3.5 -- Show diff of current vs prior file</h4>

  <p>

    To enhance clarity during restores, the system provides a side-by-side <strong>diff viewer</strong> that 

highlights differences between the current version of the <code>.m</code> file and the previously saved 

backup. This allows the user to assess whether restoring is necessary or desirable.

  </p>

  <p>Features of the diff viewer:</p>

  <ul>

    <li>
n
 Displays the current file on the left, and the backup on the right</li>

    <li>
n
 Highlights deleted lines in red, 
n
 new lines in green, and 
n
 modified lines in blue</li>

    <li>
n
 Supports scroll-sync for comparing large blocks of code</li>

  </ul>

  <p>Implementation overview:</p>

  <ul>

    <li>Uses a basic line-by-line diff algorithm (or <code>JsDiff</code>-like engine in HTML)</li>

    <li>HTML output rendered via <code>HtmlService</code> in the sidebar or modal</li>

    <li>Optional export of diff summary as a <code>.txt</code> or <code>.csv</code> for audit use</li>

  </ul>

  <p>Sample preview snippet:</p>

  <pre><code class="language-diff">

- % Amplitude = 1.25

+ % Amplitude = 1.20

  % Frequency = 6.28

- % Damping = 0.15

+ % Damping = 0.17

</code></pre>

  <p>

    This tool gives power users, teachers, or developers confidence in what will change during restoration. 

It(TM)s especially helpful for catching accidental parameter tweaks, syntax errors, or version drifts in 

collaborative environments.

  </p>

</section>

<!-- ====================================================== -->

<!-- 11.1.1.1 -- Purpose of glossary -->

<!-- ====================================================== -->

<section id="11.1.1.1">

  <h4>11.1.1.1 -- Purpose of glossary</h4>

  <p>

    The glossary serves as a system-wide reference for all key terms used in regression, physics, export 

logic, and UI design. Its primary goal is to promote consistent understanding across users -- including 

students, educators, and developers -- by providing precise, expandable definitions.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Glossary entries define terms such as <code>angular frequency</code>, 

<code>UID</code>, <code>anchor cell</code>, and <code>damping coefficient</code>, ensuring that users 

interpret script output and HelpDialog content correctly.</li>

    <li>
n
 <strong>Example:</strong> When reading the output equation <code>A cos(
w
t + 
f
)</code> in the LaTeX 

export (see <a href="#10.13.4.2">10.13.4.2</a>), hovering over <code>
f
</code> shows a tooltip: fiphase offset OE

 determines wave alignmentfl.</li>

    <li>
n
 <strong>Implementation:</strong> Glossary references appear in:

      <ul>

        <li>Tooltips and modals (<a href="#11.6.2.2">11.6.2.2</a>)</li>

        <li>Export metadata blocks (<a href="#10.13.3.1">10.13.3.1</a>)</li>

        <li>Sidebar previews (<a href="#11.6.3.5">11.6.3.5</a>)</li>

        <li>ErrorLog explanations (<a href="#11.7.1.3">11.7.1.3</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.1.1.2 -- Anchor-based linking system -->

<!-- ====================================================== -->

<section id="11.1.1.2">

  <h4>11.1.1.2 -- Anchor-based linking system</h4>

  <p>

    Each glossary entry is assigned an internal anchor tag (e.g. <code>#phase-offset</code>) to allow inline 

navigation from HelpDialog sections, tooltips, and error messages. These anchors enable deep linking for quick

 reference and streamlined user guidance.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Anchor tags use kebab-case versions of glossary terms (e.g. fiPhase 

Offsetfl 
®
 <code>#phase-offset</code>) so that each entry can be uniquely addressed and referenced from other 

documentation or exports.</li>

    <li>
n
 <strong>Example:</strong> A tooltip in the regression sidebar might say fisee glossary: <a 


href='#damping-coefficient'>damping coefficient</a>fl. Clicking the link scrolls to the corresponding entry and

 expands it.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Auto-generated anchors inserted into sidebar glossary sections</li>

        <li>Used by sidebar links (see <a href="#11.6.3.5">11.6.3.5</a>) and modal navigation</li>

        <li>Referenced from fit summaries, export previews, and error handlers (see <a 

href="#10.14.3.1">10.14.3.1</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.1.1.3 -- Where glossary terms appear -->

<!-- ====================================================== -->

<section id="11.1.1.3">

  <h4>11.1.1.3 -- Where glossary terms appear</h4>

  <p>

    Glossary terms are embedded throughout the HelpDialog interface and export system to provide consistent 

definitions wherever users encounter technical terms. Their presence is dynamic and context-aware, supporting 

both new learners and advanced users.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Terms from the glossary show up in places where key phrases appear -- 

such as tooltips, export logs, formula editors, and regression parameter tables.</li>

    <li>
n
 <strong>Example:</strong> The term <code>initial displacement</code> appears in:

      <ul>

        <li>The LaTeX sidebar preview (see <a href="#10.13.4.2">10.13.4.2</a>)</li>

        <li>Export metadata (<a href="#10.13.3.1">10.13.3.1</a>)</li>

        <li>Processing sheet parameter summaries (see <a href="#11.3.2.3">11.3.2.3</a>)</li>

      </ul>

    </li>

    <li>
n
 <strong>Implementation:</strong> Glossary terms are injected into:

      <ul>

        <li>Sidebar hoverable tooltips (<a href="#11.6.2.2">11.6.2.2</a>)</li>

        <li>Form input placeholders and modal headers (<a href="#11.5.1.1">11.5.1.1</a>)</li>

        <li>Exported `.m` and `.tex` file metadata headers (<a href="#10.13.3.1">10.13.3.1</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.1.1.4 -- Structured format of entries -->

<!-- ====================================================== -->

<section id="11.1.1.4">

  <h4>11.1.1.4 -- Structured format of entries</h4>

  <p>

    Each glossary entry follows a consistent structure to ensure clarity and accessibility. Entries are short,

 actionable, and easy to navigate, especially in instructional contexts or unfamiliar workflows.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Glossary entries include the term name, a short definition, an example

 of use, and a note on how it appears in the system.</li>

    <li>
n
 <strong>Example format:</strong>

      <pre><code>

## Damping Coefficient

- 
n
 Controls rate of energy loss in a system.

- 
n
 Appears in: A * cos(
w
t + 
f
) * exp(-bt)

- 
n
 Used in regression model: Damped Cosine Fit

      </code></pre>

    </li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Formatted with Markdown-style bullets, then rendered in HTML sidebar cards</li>

        <li>Supports collapsible display (see <a href="#11.1.1.5">11.1.1.5</a>)</li>

        <li>Used by export logic and help sidebar for dynamic explanations (see <a 

href="#11.6.3.5">11.6.3.5</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.1.1.5 -- Styling and collapsibility in UI -->

<!-- ====================================================== -->

<section id="11.1.1.5">

  <h4>11.1.1.5 -- Styling and collapsibility in UI</h4>

  <p>

    Glossary entries are styled for visual clarity and are collapsible in the HelpDialog sidebar. This allows 

users to browse long glossaries without overwhelming the interface, while still offering full detail on 

demand.

  </p>


  <ul>

    <li>
n
 <strong>Explanation:</strong> Each entry uses a card-based UI with soft borders, emoji labels, and 

collapsible sections to highlight explanations, examples, and implementation roles.</li>

    <li>
n
 <strong>Example:</strong> When browsing glossary terms in the sidebar (see <a 

href="#11.6.3.5">11.6.3.5</a>), clicking a term like fiUIDfl expands the entry with bullet points. Clicking 

again collapses it for clean navigation.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>HTML uses a toggleable <code>&lt;div class="glossary-card"&gt;</code> with summary and detail 

sections</li>

        <li>Font and layout match sidebar styles from <a href="#11.6.3.1">11.6.3.1</a> and <a 

href="#11.6.3.3">11.6.3.3</a></li>

        <li>Icons and bullets improve scanning for students in time-limited tasks</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.1.2.1 -- Linking glossary to numbered citations -->

<!-- ====================================================== -->

<section id="11.1.2.1">

  <h4>11.1.2.1 -- Linking glossary to numbered citations</h4>

  <p>

    Glossary terms are matched to citations used elsewhere in the documentation. This allows users to trace 

numbered references (e.g., fi[12]fl) back to full glossary definitions, preserving transparency and supporting 

academic standards.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Numbered references in exports and the sidebar (like 

<code>[11]</code>) correspond to Section 12.1 entries. Each glossary item includes a reverse link to the 

term(TM)s definition and usage in Section 11.</li>

    <li>
n
 <strong>Example:</strong> In an exported LaTeX file, a footnote might read: <code>Phase offset 
f
 

governs wave shift [9]</code>. Reference [9] links to glossary entry <a href="#11.3.1.4">11.3.1.4</a> and is 

fully explained in Section 12.1.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Each glossary entry includes a <code>data-citation-id</code> tag for internal linking</li>

        <li>Section <a href="#12.1">12.1</a> indexes these entries with live links and source tracking</li>

        <li>Footnotes or export metadata use <code>
nn
</code> anchors to allow backward navigation to 

HelpDialog entries</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.1.2.2 -- Hover tooltips and inline definitions -->

<!-- ====================================================== -->

<section id="11.1.2.2">

  <h4>11.1.2.2 -- Hover tooltips and inline definitions</h4>

  <p>

    Key terms throughout the HelpDialog system feature hover-based tooltips that briefly define each glossary 

item. This reduces cognitive load for users by avoiding repetitive scrolling and ensures quick understanding 

in context.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Terms such as <code>phase offset</code>, <code>UID</code>, and 

<code>damping coefficient</code> are automatically wrapped in hoverable spans that display short-form 

definitions on mouseover.</li>

    <li>
n
 <strong>Example:</strong> In the Formula Wizard (<a href="#11.5.1.1">11.5.1.1</a>), if the user 

enters <code>A * cos(
w
t + 
f
)</code>, hovering over <code>
f
</code> in the preview sidebar shows: fiphase offset 

OE horizontal shift of waveformfl.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Tooltips built with <code>title=""</code> attributes or injected HTML overlays</li>

        <li>Enabled for both rendered MathJax previews (<a href="#11.5.3.2">11.5.3.2</a>) and static sidebar 

descriptions</li>

        <li>Fallback text shown in mobile or screen-reader formats where hover isn't supported</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.1.2.3 -- Sidebar glossary search/filter -->

<!-- ====================================================== -->

<section id="11.1.2.3">

  <h4>11.1.2.3 -- Sidebar glossary search/filter</h4>

  <p>

    The glossary sidebar includes a dynamic search and filtering system that helps users find relevant terms 

quickly by keyword, category, or tag. This enables efficient browsing even as the glossary grows across 

versions.

  </p>


  <ul>

    <li>
n
 <strong>Explanation:</strong> A search box at the top of the glossary panel filters entries in real 

time based on typed keywords. Users can also filter by tag (e.g. <code>physics</code>, <code>LaTeX</code>, 

<code>required</code>).</li>

    <li>
n
 <strong>Example:</strong> Typing fiomegafl in the search bar highlights entries for <code>angular 

frequency</code>, <code>
w
</code>, and related regression terms from <a href="#11.3.1.3">11.3.1.3</a>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Uses live client-side filtering via JavaScript in <code>HtmlService</code></li>

        <li>Tag-based buttons allow toggling views by category (see <a href="#11.9">Section 11.9</a> and <a 

href="#11.10">11.10</a>)</li>

        <li>All glossary entries indexed with searchable metadata and anchor tags</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.1.2.4 -- Auto-glossary detection from sheets -->

<!-- ====================================================== -->

<section id="11.1.2.4">

  <h4>11.1.2.4 -- Auto-glossary detection from sheets</h4>

  <p>

    The script automatically detects glossary-relevant terms in spreadsheet headers, formulas, and parameter 

cells. These terms are linked to their glossary definitions in the HelpDialog sidebar and preview areas to 

reduce manual tagging.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> The system scans headers like <code>Time (ms)</code> or formula 

entries like <code>A * cos(
w
t + 
f
)</code> for known terms. When matches are found, links to their glossary 

entries are added to the preview UI.</li>

    <li>
n
 <strong>Example:</strong> A column header labeled <code>Damping (b)</code> automatically highlights 

fidamping coefficientfl in the glossary with a link to <a href="#11.3.1.2">11.3.1.2</a> and a tooltip 

summary.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Detection runs during CSV import (<a href="#11.2.2.2">11.2.2.2</a>), regression input parsing (<a 

href="#11.5.2.1">11.5.2.1</a>), and export metadata generation (<a href="#10.13.3.1">10.13.3.1</a>)</li>

        <li>Matched terms are tagged with <code>data-glossary-id</code> attributes and cross-linked 

dynamically</li>

        <li>Supports fallback synonyms using alias mapping logic (see <a href="#11.10.2.3">11.10.2.3</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.1.2.5 -- Glossary integration with LaTeX preview -->

<!-- ====================================================== -->

<section id="11.1.2.5">

  <h4>11.1.2.5 -- Glossary integration with LaTeX preview</h4>

  <p>

    The LaTeX preview system in the sidebar supports glossary tagging and hover references for rendered 

variables. This helps students understand the meaning of symbols in complex equations without leaving the 

formula view.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Each variable in the rendered formula (e.g. <code>
w
</code>, 

<code>
f
</code>) includes a hidden glossary link or tooltip. Hovering reveals definitions sourced from Section 

<a href="#11.3">11.3</a> or <a href="#11.9">11.9</a>.</li>

    <li>
n
 <strong>Example:</strong> When previewing the damped cosine model <code>A \cos(\omega t + \phi) 

\cdot e^{-bt}</code>, hovering over <code>\phi</code> displays: fiphase offset -- aligns wave to initial 

conditionfl.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Glossary tags embedded using <code>&lt;span title="..."&gt;</code> within MathJax-rendered 

HTML</li>

        <li>Optional toggle lets user enable or disable term popovers in the preview panel (see <a 

href="#11.5.3.5">11.5.3.5</a>)</li>

        <li>Glossary link anchoring preserved in `.tex` exports for students using external editors</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- SECTION 11.2 -- CSV Import Glossary -->

<!-- ====================================================== -->

<!-- ====================================================== -->

<!-- 11.2.1.1 -- What is a Google Drive Folder ID -->

<!-- ====================================================== -->

<section id="11.2.1.1">

  <h4>11.2.1.1 -- What is a Google Drive Folder ID</h4>

  <p>


    A Google Drive Folder ID is the unique alphanumeric string used to identify a specific folder in Drive. It

 is required to fetch or scan CSV files automatically from shared or private folders using the script.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Folder IDs appear after <code>/folders/</code> in a shared URL and are

 passed into functions like <code>DriveApp.getFolderById()</code>.</li>

    <li>
n
 <strong>Example:</strong> In the link 

<code>https://drive.google.com/drive/folders/1xL9AbcXYZQ6</code>, the ID is <code>1xL9AbcXYZQ6</code>.</li>

    <li>
n
 <strong>Implementation:</strong> Folder IDs are stored in config cells or modal prompts (see <a 

href="#11.6.2.3">11.6.2.3</a>), then used in import functions like <code>importCSVFromDrive()</code>.</li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.2.1.2 -- Locating a CSV file ID from URL -->

<!-- ====================================================== -->

<section id="11.2.1.2">

  <h4>11.2.1.2 -- Locating a CSV file ID from URL</h4>

  <p>

    Each file in Google Drive has a unique ID, visible in its URL. This ID is used to directly fetch or open a

 specific CSV from the script interface.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> The ID appears between <code>/d/</code> and <code>/edit</code> in the 

file(TM)s URL.</li>

    <li>
n
 <strong>Example:</strong> <code>https://drive.google.com/file/d/123ABCxyz456/edit</code> 
®
 File ID =

 <code>123ABCxyz456</code>.</li>

    <li>
n
 <strong>Implementation:</strong> Passed to <code>DriveApp.getFileById()</code> or stored in the 

ImportConfig sheet. Can be validated with regex (see <a href="#11.2.1.3">11.2.1.3</a>).</li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.2.1.3 -- Validating ID format and length -->

<!-- ====================================================== -->

<section id="11.2.1.3">

  <h4>11.2.1.3 -- Validating ID format and length</h4>

  <p>

    The script checks whether provided folder or file IDs are of valid structure and length before attempting 

to use them. This reduces runtime errors and user confusion.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> A valid ID is typically 25OE45 characters and alphanumeric. Short, 

malformed, or special-character-laden inputs are flagged.</li>

    <li>
n
 <strong>Example:</strong> If a user enters fiabc123!fl as a folder ID, the script prompts: fiInvalid 

Folder ID -- please copy from a Drive URL.fl</li>

    <li>
n
 <strong>Implementation:</strong> Regex check implemented in <code>validateFolderId()</code> or modal

 prompt handler. Logs failed IDs in <a href="#11.2.2.5">ImportLog</a> and <a 

href="#11.7.1.2">ErrorLog</a>.</li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.2.1.4 -- Error messages from invalid IDs -->

<!-- ====================================================== -->

<section id="11.2.1.4">

  <h4>11.2.1.4 -- Error messages from invalid IDs</h4>

  <p>

    When an invalid file or folder ID is detected, the system provides a helpful error message and halts the 

import to prevent runtime failure.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Error messages help guide the user toward correcting the ID without 

requiring backend debugging.</li>

    <li>
n
 <strong>Example:</strong> fiCould not locate folder with ID: <code>abc123</code>. Please check the 

link format and permissions.fl</li>

    <li>
n
 <strong>Implementation:</strong> Shown via <code>ui.alert()</code> or sidebar toast (see <a 

href="#11.6.2.1">11.6.2.1</a>). Logged with details in both ImportLog and ErrorLog for audit purposes (see <a 

href="#11.7.1.3">11.7.1.3</a>).</li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.2.1.5 -- Storing and retrieving from script -->

<!-- ====================================================== -->

<section id="11.2.1.5">

  <h4>11.2.1.5 -- Storing and retrieving from script</h4>

  <p>

    Once entered, folder and file IDs are stored in memory or named ranges so they don(TM)t have to be re-entered

 every session. This streamlines repeated use of common sources.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> The folder or file ID is stored in a hidden config sheet or Apps 

Script PropertiesService for persistent access.</li>

    <li>
n
 <strong>Example:</strong> After importing once from folder ID <code>1AbC234Xyz</code>, the menu 


reuses it automatically next time.</li>

    <li>
n
 <strong>Implementation:</strong> Uses named ranges like <code>FOLDER_ID</code> or PropertiesService 

keys. Restored on script load via <code>onOpen()</code> logic (see <a href="#11.6.1.1">11.6.1.1</a>).</li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.2.2.1 -- Manual vs scheduled import triggers -->

<!-- ====================================================== -->

<section id="11.2.2.1">

  <h4>11.2.2.1 -- Manual vs scheduled import triggers</h4>

  <p>

    CSV imports can be initiated either manually by the user or automatically on a timed schedule. This allows

 flexibility in both classroom and automated data environments.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Manual triggers are invoked via menu commands. Scheduled triggers use 

time-based intervals to automate recurring imports without user intervention.</li>

    <li>
n
 <strong>Example:</strong> A teacher clicks fiImport Nowfl for a one-time update; another sheet runs 

every 15 minutes via a scheduled time-driven trigger.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Manual: via <code>Physics Tools 
®
 CSV 
®
 Import Folder</code> menu (see <a 

href="#11.6.1.3">11.6.1.3</a>)</li>

        <li>Scheduled: uses <code>ScriptApp.newTrigger().timeBased()</code></li>

        <li>Custom intervals managed in the ImportConfig or script setup block</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.2.2.2 -- What the Import Log sheet tracks -->

<!-- ====================================================== -->

<section id="11.2.2.2">

  <h4>11.2.2.2 -- What the Import Log sheet tracks</h4>

  <p>

    The Import Log sheet provides a timestamped record of all CSV import attempts, including their status, 

file origin, and messages. It helps with audit trails, duplicate detection, and debugging.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Each import appends a new row detailing which file was processed, from

 which folder, and whether it succeeded or failed.</li>

    <li>
n
 <strong>Example:</strong> The log entry for <code>accel_trial3.csv</code> includes: <code>Imported --

 UID: f9ab4, Folder: Sensors_A, Status: Success</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Sheet is named <code>ImportLog</code> and created automatically (see <a 

href="#11.7.1.1">11.7.1.1</a>)</li>

        <li>Includes columns: Timestamp, UID, Filename, Folder, Status, Message</li>

        <li>Used as primary reference for duplicate checks (<a href="#11.2.2.4">11.2.2.4</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.2.2.3 -- Log structure: filename, timestamp, status -->

<!-- ====================================================== -->

<section id="11.2.2.3">

  <h4>11.2.2.3 -- Log structure: filename, timestamp, status</h4>

  <p>

    Each row in the Import Log sheet includes standardized fields that describe when a file was imported, its 

name, where it came from, and whether the import was successful.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This structure enables sorting, searching, and filter-based dashboards

 across large numbers of imported trials.</li>

    <li>
n
 <strong>Example:</strong> A log row might contain: <code>2025-06-14 11:48 | sensors_17.csv | UID: 

bQ91 | Folder: ID#1AcXk... | Status: Success</code></li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Field order: Timestamp, Filename, UID, Folder Name, Folder ID, Status, Message</li>

        <li>Sheet auto-sorted by Timestamp DESC (see <a href="#11.7.1.5">11.7.1.5</a>)</li>

        <li>Status field used in conditional formatting to color rows (see <a 

href="#11.7.1.4">11.7.1.4</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.2.2.4 -- Handling duplicate imports -->

<!-- ====================================================== -->

<section id="11.2.2.4">


  <h4>11.2.2.4 -- Handling duplicate imports</h4>

  <p>

    The system checks the Import Log to avoid re-importing the same file more than once unless an override is 

used. This prevents redundancy and versioning conflicts in spreadsheets.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Before importing, the script scans the Import Log for matching file 

names or UIDs. If a match is found and no force flag is present, it skips the file.</li>

    <li>
n
 <strong>Example:</strong> If <code>accel_05.csv</code> was already imported, re-running the import 

won(TM)t duplicate it unless fiForce Reimportfl is checked.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Match key = combination of filename + UID + timestamp threshold</li>

        <li>Force import enabled via override checkbox or function parameter</li>

        <li>Skipped entries logged as fiDuplicate OE Skippedfl</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.2.2.5 -- Cross-reference with Error Log entries -->

<!-- ====================================================== -->

<section id="11.2.2.5">

  <h4>11.2.2.5 -- Cross-reference with Error Log entries</h4>

  <p>

    When a CSV import fails, it(TM)s logged in both the Import Log and the Error Log, enabling cross-referenced 

debugging. Each entry includes a UID to match events across both logs.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This dual logging allows developers and teachers to trace issues back 

to specific files or import attempts.</li>

    <li>
n
 <strong>Example:</strong> Entry in ImportLog: fiFailed to parse file -- UID: 128zfl. Matching ErrorLog 

row shows: fiColumn header mismatch in accel_data.csv (expected Time(ms))fl.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Shared UID used to link rows across <code>ImportLog</code> and <code>ErrorLog</code></li>

        <li>Helps resolve errors using <a href="#11.7.3.4">stack traces</a> and contextual error notes</li>

        <li>Viewable via sidebar debug tools (see <a href="#11.7.2.2">11.7.2.2</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- SECTION 11.3 -- Regression Terms -->

<!-- ====================================================== -->

<!-- ====================================================== -->

<!-- 11.3.1.1 -- A: Amplitude of oscillation -->

<!-- ====================================================== -->

<section id="11.3.1.1">

  <h4>11.3.1.1 -- A: Amplitude of oscillation</h4>

  <p>

    The amplitude <code>A</code> represents the maximum displacement from equilibrium in an oscillatory 

system. It defines the peak value of the waveform being modeled.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> In a damped cosine model, <code>A</code> scales the entire wave 

vertically. It reflects the energy and initial conditions of the system.</li>

    <li>
n
 <strong>Example:</strong> In <code>x(t) = A · cos(
w
t + 
f
) · e<sup>-bt</sup></code>, the curve will 

peak at <code>x = ±A</code> (before damping reduces it).</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Included in all damped models by default (see <a href="#11.3.2.1">11.3.2.1</a>)</li>

        <li>Extracted via nonlinear regression (see <a href="#10.12.4.2">10.12.4.2</a>)</li>

        <li>Shown in summary output in the Processing sheet (see <a href="#11.3.2.3">11.3.2.3</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.1.2 -- b: Damping coefficient -->

<!-- ====================================================== -->

<section id="11.3.1.2">

  <h4>11.3.1.2 -- b: Damping coefficient</h4>

  <p>

    The damping coefficient <code>b</code> determines how quickly the amplitude of an oscillating system 

decreases over time. It reflects energy loss due to friction, resistance, or drag.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> A larger <code>b</code> results in a faster decay. If <code>b = 

0</code>, the system is undamped and maintains constant amplitude.</li>

    <li>
n
 <strong>Example:</strong> The term <code>e<sup>-bt</sup></code> in <code>A cos(
w
t + 
f
) 


e<sup>-bt</sup></code> controls how quickly the waveform flattens.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Always positive in physical models; fitted using exponential regression logic (see <a 

href="#11.3.2.2">11.3.2.2</a>)</li>

        <li>Displayed in results sheet with fit diagnostics (see <a href="#11.3.2.3">11.3.2.3</a>)</li>

        <li>Linked to envelope visualization in charts (see <a href="#11.9.3.5">11.9.3.5</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.1.3 -- 
w
: Angular frequency -->

<!-- ====================================================== -->

<section id="11.3.1.3">

  <h4>11.3.1.3 -- 
w
: Angular frequency</h4>

  <p>

    Angular frequency <code>
w
</code> measures how rapidly the oscillation cycles occur in radians per second. 

It determines the period of the waveform.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Related to the period by the formula <code>
w
 = 2
p
 / T</code>. Affects 

the spacing between waveform peaks.</li>

    <li>
n
 <strong>Example:</strong> If <code>
w
 = 
p
</code>, then the system completes one full oscillation 

every 2 seconds.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Used in trigonometric components of models (see <a href="#11.3.2.1">11.3.2.1</a>)</li>

        <li>Included in regression formulas and exported model summaries</li>

        <li>Displayed with LaTeX notation <code>\omega</code> in MathJax preview (see <a 

href="#11.5.3.1">11.5.3.1</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.1.4 -- 
f
: Phase offset -->

<!-- ====================================================== -->

<section id="11.3.1.4">

  <h4>11.3.1.4 -- 
f
: Phase offset</h4>

  <p>

    The phase offset <code>
f
</code> shifts the entire waveform horizontally along the time axis. It aligns the

 model with the observed data(TM)s initial position.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> <code>
f
</code> allows the model to start the oscillation at a non-zero

 point or a phase other than zero.</li>

    <li>
n
 <strong>Example:</strong> If 
f
 = 
p
/2, then <code>cos(
w
t + 
f
)</code> starts at zero rather than at a 

peak.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Estimated during model fitting when <code>phase-shifted cosine</code> is selected</li>

        <li>Commonly ranges from -
p
 to 
p
 radians in physics-based regressions</li>

        <li>Displayed in fit summaries and glossary-linked LaTeX output (see <a 

href="#11.1.2.5">11.1.2.5</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.1.5 -- t: Time variable in models -->

<!-- ====================================================== -->

<section id="11.3.1.5">

  <h4>11.3.1.5 -- t: Time variable in models</h4>

  <p>

    The independent variable <code>t</code> represents time, typically in seconds or milliseconds. It forms 

the x-axis in all motion-based regression models.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> All models assume <code>t</code> as the continuous input. The format 

must match the spreadsheet column headers.</li>

    <li>
n
 <strong>Example:</strong> If your CSV column reads <code>Time (ms)</code>, the script converts it to

 seconds for modeling unless overridden (see <a href="#11.10.1.2">11.10.1.2</a>).</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Parsed from column A or Z1 region in the sheet</li>

        <li>Supports unit inference from header metadata (see <a href="#11.10.1.5">11.10.1.5</a>)</li>

        <li>Mapped into LaTeX as <code>t</code>, linked to glossary for hover support (see <a 

href="#11.1.2.5">11.1.2.5</a>)</li>

      </ul>

    </li>

  </ul>


</section>

<!-- ====================================================== -->

<!-- 11.3.1.6 -- x
n
: Initial displacement or fit origin -->

<!-- ====================================================== -->

<section id="11.3.1.6">

  <h4>11.3.1.6 -- x
n
: Initial displacement or fit origin</h4>

  <p>

    The variable <code>x
n
</code> (sometimes labeled <code>C</code> or <code>offset</code>) represents the 

baseline displacement of a system at time <code>t = 0</code>. It may serve as the vertical shift of the entire

 waveform.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> In many models, <code>x
n
</code> accounts for a non-zero starting 

position or a shifted equilibrium point.</li>

    <li>
n
 <strong>Example:</strong> In <code>x(t) = A · cos(
w
t + 
f
) · e<sup>-bt</sup> + C</code>, the term 

<code>+C</code> lifts or lowers the wave relative to the time axis.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Commonly called <code>C</code> in parameter tables; equivalent to <code>x
n
</code> in physics 

contexts</li>

        <li>Optional in regression models; can be toggled in formula editor (see <a 

href="#11.5.2.3">11.5.2.3</a>)</li>

        <li>Displayed in sidebar previews, LaTeX export, and metadata blocks</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.2.1 -- Equation structure for damped cosine -->

<!-- ====================================================== -->

<section id="11.3.2.1">

  <h4>11.3.2.1 -- Equation structure for damped cosine</h4>

  <p>

    The damped cosine model combines sinusoidal oscillation with exponential decay. This structure is widely 

used in physics to model spring systems, pendulums, and driven resonances.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> The general form is: <br />

    <code>x(t) = A · cos(
w
t + 
f
) · e<sup>-bt</sup> + C</code>

    </li>

    <li>
n
 <strong>Example:</strong> If <code>A = 2</code>, <code>
w
 = 
p
</code>, <code>
f
 = 0</code>, <code>b = 

0.2</code>, <code>C = 0</code>, then the wave decays steadily while oscillating every 2s.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>This model is the default selection in the regression menu (see <a 

href="#10.12.2.1">10.12.2.1</a>)</li>

        <li>Used for motion trials with decreasing amplitude (see <a href="#11.9.3.5">11.9.3.5</a>)</li>

        <li>Rendered with MathJax in LaTeX export (see <a href="#11.5.3.1">11.5.3.1</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.2.2 -- Role of exponential decay in modeling -->

<!-- ====================================================== -->

<section id="11.3.2.2">

  <h4>11.3.2.2 -- Role of exponential decay in modeling</h4>

  <p>

    Exponential decay captures the energy loss over time due to friction or damping. It is modeled by the 

<code>e<sup>-bt</sup></code> term and scales down the amplitude of oscillation.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Without this term, the oscillation would continue indefinitely at 

constant amplitude -- an idealized case not observed in real systems.</li>

    <li>
n
 <strong>Example:</strong> When <code>b = 0.3</code>, the amplitude of a wave drops to about 37% of 

its original value after ~3.3 seconds.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Decay is multiplicative across all data points: <code>y(t) = f(t) · e<sup>-bt</sup></code></li>

        <li>Used in SHM energy modeling (see <a href="#11.9.3.2">11.9.3.2</a>)</li>

        <li>Fit value of <code>b</code> logged in summary tables and shown in preview chart legends</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.2.3 -- Parameter interpretation in fit summary -->

<!-- ====================================================== -->

<section id="11.3.2.3">

  <h4>11.3.2.3 -- Parameter interpretation in fit summary</h4>

  <p>


    After fitting, all model parameters (e.g., A, b, 
w
, 
f
) are listed in a summary table with values, errors, 

and units. This helps validate the quality and realism of the model.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> The summary allows users to see how each parameter contributes to the 

model and assess whether they make physical sense.</li>

    <li>
n
 <strong>Example:</strong> Summary may show: <code>A = 1.95 ± 0.03</code>, <code>b = 0.28 ± 

0.01</code>, <code>
w
 = 3.14 ± 0.05</code></li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Results displayed in the Processing tab(TM)s parameter table</li>

        <li>Each row includes variable name, best-fit value, uncertainty, and link to glossary (see <a 

href="#11.1.2.5">11.1.2.5</a>)</li>

        <li>Used for student write-ups, .m exports, and regression validation (see <a 

href="#10.13.3.1">10.13.3.1</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.2.4 -- When to use exponential vs trigonometric fits -->

<!-- ====================================================== -->

<section id="11.3.2.4">

  <h4>11.3.2.4 -- When to use exponential vs trigonometric fits</h4>

  <p>

    Choosing between exponential and trigonometric models depends on the nature of the dataset -- whether it 

decays smoothly, oscillates, or does both.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Exponential models are best for pure decay (e.g., radioactive half-

life), while trigonometric models suit periodic motion. A combined model handles damped oscillation.</li>

    <li>
n
 <strong>Example:</strong> Use <code>y = A e<sup>-bt</sup></code> for voltage drop in an RC circuit; 

use <code>y = A cos(
w
t)</code> for pure SHM; use <code>y = A cos(
w
t + 
f
) e<sup>-bt</sup></code> for motion 

with damping.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Model type selected via regression menu or formula wizard (see <a 

href="#11.5.1.1">11.5.1.1</a>)</li>

        <li>Fitting algorithm switches based on curve class (see <a href="#10.12.2.1">10.12.2.1</a>)</li>

        <li>Visual preview distinguishes shape before processing begins</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.2.5 -- Combined motion + decay fits -->

<!-- ====================================================== -->

<section id="11.3.2.5">

  <h4>11.3.2.5 -- Combined motion + decay fits</h4>

  <p>

    Combined fits involve both periodic (oscillatory) and exponential (decaying) components. These models 

simulate systems like damped springs, mass oscillators, or biological rhythms.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> The model merges sinusoidal and exponential elements to describe 

systems that oscillate and simultaneously lose energy over time.</li>

    <li>
n
 <strong>Example:</strong> The full model <code>A · cos(
w
t + 
f
) · e<sup>-bt</sup> + C</code> can 

describe a cart between springs with air drag or internal friction (see <a 

href="#11.9.1.3">11.9.1.3</a>).</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Used in regression mode fidamped oscillationfl (see <a href="#10.12.3.1">10.12.3.1</a>)</li>

        <li>All parameters estimated simultaneously with nonlinear optimization</li>

        <li>Exported as LaTeX and MATLAB expressions (see <a href="#10.13.1.2">10.13.1.2</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.3.1 -- R² definition and ideal values -->

<!-- ====================================================== -->

<section id="11.3.3.1">

  <h4>11.3.3.1 -- R² definition and ideal values</h4>

  <p>

    The coefficient of determination, <code>R²</code>, quantifies how well the regression model explains the 

variance in the observed data. It ranges from 0 (no fit) to 1 (perfect fit).

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> R² = 1 OE (residual variance / total variance). A higher value means 

the model closely follows the trend in the data.</li>

    <li>
n
 <strong>Example:</strong> <code>R² = 0.987</code> indicates a very strong correlation between the 

model and measurements. Below 0.8 may suggest model mismatch or noise.</li>


    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Automatically computed for each regression attempt (see <a href="#10.12.5.1">10.12.5.1</a>)</li>

        <li>Shown alongside parameter estimates in summary table</li>

        <li>Used as an alert condition when fit is weak (see <a href="#11.3.3.5">11.3.3.5</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.3.2 -- How residuals are computed -->

<!-- ====================================================== -->

<section id="11.3.3.2">

  <h4>11.3.3.2 -- How residuals are computed</h4>

  <p>

    Residuals are the differences between observed and predicted values at each point. They are essential for 

diagnosing fit accuracy and visualizing error trends.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> For a point <code>(t, x)</code>, the residual is <code>residual = 

observed_x OE model_x(t)</code>. These values are squared and summed to compute total error.</li>

    <li>
n
 <strong>Example:</strong> If a datapoint is <code>x = 2.1</code> and the model predicts 

<code>1.9</code>, the residual is <code>+0.2</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Used internally in the regression loop (see <a href="#10.12.4.2">10.12.4.2</a>)</li>

        <li>Residuals stored for plotting in diagnostic charts (see <a href="#11.3.3.4">11.3.3.4</a>)</li>

        <li>Key factor in R² and sum-of-squares metrics</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.3.3 -- Sum of squares minimization logic -->

<!-- ====================================================== -->

<section id="11.3.3.3">

  <h4>11.3.3.3 -- Sum of squares minimization logic</h4>

  <p>

    Most regression methods used in the script minimize the sum of squared residuals to find the best fit. 

This approach favors models that reduce large errors disproportionately.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Minimizing <code>
S
(residual²)</code> ensures that outliers are 

penalized heavily, leading to a more stable and accurate model overall.</li>

    <li>
n
 <strong>Example:</strong> The best fit is the one that produces the lowest total squared error 

across all points, even if it sacrifices perfect accuracy on a few.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Used by all major algorithms: Levenberg-Marquardt, BFGS, Nelder-Mead (see <a 

href="#10.12.4.1">10.12.4.1</a>)</li>

        <li>Residuals squared inside the cost function, weighted if necessary</li>

        <li>Final metric displayed in fit summary and sidebar logs</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.3.4 -- Visualizing fit quality with residual plots -->

<!-- ====================================================== -->

<section id="11.3.3.4">

  <h4>11.3.3.4 -- Visualizing fit quality with residual plots</h4>

  <p>

    Residual plots show the difference between predicted and actual data across time or output value. They 

help identify model bias, outliers, or systematic errors.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Good fits produce random-looking scatter in the residual plot. 

Patterns (e.g. curves or clusters) indicate model problems.</li>

    <li>
n
 <strong>Example:</strong> A residual plot shaped like a wave suggests underfitting; large deviations

 at endpoints may suggest bad initial values (see <a href="#11.3.4.2">11.3.4.2</a>).</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Plots appear in the Processing sheet or sidebar if enabled (see <a 

href="#11.6.3.1">11.6.3.1</a>)</li>

        <li>Hovering shows raw residual value and associated time</li>

        <li>Interactive chart updates live during re-fitting</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->


<!-- 11.3.3.5 -- Thresholds for good vs poor fits -->

<!-- ====================================================== -->

<section id="11.3.3.5">

  <h4>11.3.3.5 -- Thresholds for good vs poor fits</h4>

  <p>

    R² and residual patterns are used to assess whether a fit is acceptable. Thresholds are flexible but can 

serve as a guide to flag model quality issues automatically.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> A high <code>R²</code> (close to 1) suggests a strong fit; a low 

<code>R²</code> indicates that the model may not describe the data well.</li>

    <li>
n
 <strong>Example:</strong> <code>R² 
³
 0.90</code> is typically considered excellent; values below 

<code>0.80</code> may trigger a warning tooltip in the Processing tab or HelpDialog (see <a 

href="#11.6.2.1">11.6.2.1</a>).</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Default warning threshold set in config or script constant (e.g., <code>R2_WARN_THRESHOLD = 

0.85</code>)</li>

        <li>Sidebar flags low-quality fits with alert icons and suggestion popups</li>

        <li>Used to suppress export if regression fails quality gate (see <a 

href="#10.13.4.2">10.13.4.2</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.4.1 -- User-supplied starting values -->

<!-- ====================================================== -->

<section id="11.3.4.1">

  <h4>11.3.4.1 -- User-supplied starting values</h4>

  <p>

    Users may provide initial guesses for model parameters such as amplitude, damping, or frequency. These 

guide the regression engine toward convergence, especially in noisy datasets.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Without a good starting point, nonlinear solvers may converge on local

 minima or fail to converge at all.</li>

    <li>
n
 <strong>Example:</strong> For a system oscillating at ~1Hz with low damping, a user might input 

<code>A = 2</code>, <code>
w
 = 6.28</code>, <code>b = 0.05</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Inputs collected via formula wizard prompts (see <a href="#11.5.2.3">11.5.2.3</a>)</li>

        <li>Stored as metadata or in hidden sheet blocks for reuse</li>

        <li>Overrides auto-guess logic if provided</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.4.2 -- Influence of guesses on convergence -->

<!-- ====================================================== -->

<section id="11.3.4.2">

  <h4>11.3.4.2 -- Influence of guesses on convergence</h4>

  <p>

    Poor guesses can result in divergence or convergence to incorrect models. Well-chosen values speed up 

fitting and improve robustness.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Solvers like Levenberg-Marquardt depend on starting proximity to the 

optimal solution. Initial guesses help avoid invalid regions of the solution space.</li>

    <li>
n
 <strong>Example:</strong> A poor guess of <code>
w
 = 0.1</code> for a system actually oscillating at 

<code>
w
 = 6.0</code> might produce a flat or chaotic output.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Convergence diagnostics shown in sidebar preview and ExportLog (see <a 

href="#11.7.3.3">11.7.3.3</a>)</li>

        <li>Fallbacks applied only if guess fails or diverges (see <a href="#11.3.4.5">11.3.4.5</a>)</li>

        <li>Warnings logged in <code>ErrorLog</code> with trace of failed parameters</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.4.3 -- Defining fit range via time or row -->

<!-- ====================================================== -->

<section id="11.3.4.3">

  <h4>11.3.4.3 -- Defining fit range via time or row</h4>

  <p>

    Users can define the interval to fit over, either by selecting rows manually or using time markers like 

Z1/Z2 cells. This limits the regression to a relevant data window.

  </p>

  <ul>


    <li>
n
 <strong>Explanation:</strong> This avoids edge noise, clipped data, or irrelevant motion phases that

 might distort the model.</li>

    <li>
n
 <strong>Example:</strong> Selecting rows 10OE80 or time between <code>t = 1.5s</code> and <code>t = 

4.0s</code> allows modeling only the clean decay portion.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Ranges defined with Z1/Z2 cells or via modal prompt (see <a href="#11.4.1.3">11.4.1.3</a>)</li>

        <li>Converted to row indices internally using header time values</li>

        <li>Stored with export metadata to allow future refitting</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.4.4 -- Pre-cleaning data before fitting -->

<!-- ====================================================== -->

<section id="11.3.4.4">

  <h4>11.3.4.4 -- Pre-cleaning data before fitting</h4>

  <p>

    Before any regression begins, the dataset is automatically checked and cleaned. This includes removing 

rows with missing values, negative time, or duplicate timestamps.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Clean input improves model stability and accuracy. Garbage-in, 

garbage-out applies heavily to curve fitting.</li>

    <li>
n
 <strong>Example:</strong> A row with <code>t = -0.01</code> and <code>x = NaN</code> would be 

excluded from the regression pass.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Cleaning performed by <code>cleanCurrentSheet()</code> and <code>deleteNegativeTimeRows()</code> 

(see <a href="#11.8.1.5">11.8.1.5</a>, <a href="#11.8.2.1">11.8.2.1</a>)</li>

        <li>Also logs row count before/after in ExportLog</li>

        <li>Warns user if >20% of rows were dropped</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.3.4.5 -- Default fallback guess handling -->

<!-- ====================================================== -->

<section id="11.3.4.5">

  <h4>11.3.4.5 -- Default fallback guess handling</h4>

  <p>

    If no user-provided guess is available, the script generates fallback estimates for all model parameters 

using heuristics based on the dataset(TM)s statistical properties.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This ensures the regression engine always has a starting point, even 

if no manual input is provided.</li>

    <li>
n
 <strong>Example:</strong> For amplitude <code>A</code>, the script might use <code>max(data) OE 

min(data) / 2</code>. For angular frequency <code>
w
</code>, it may estimate based on zero-crossing 

intervals.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Fallback enabled by default unless disabled in config</li>

        <li>Values logged in sidebar and ErrorLog if used (see <a href="#11.7.3.3">11.7.3.3</a>)</li>

        <li>Displayed with 
nn
 warning badge in Processing summary</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- SECTION 11.4 -- Interval Concepts -->

<!-- ====================================================== -->

<!-- ====================================================== -->

<!-- 11.4.1.1 -- Types of interval markers used (row/time) -->

<!-- ====================================================== -->

<section id="11.4.1.1">

  <h4>11.4.1.1 -- Types of interval markers used (row/time)</h4>

  <p>

    Interval markers define the specific section of data that should be processed, analyzed, or exported. 

These can be based on row numbers or actual time values (in seconds or milliseconds).

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Intervals help isolate regions of interest, especially when dealing 

with long or segmented trials.</li>

    <li>
n
 <strong>Example:</strong> A user may define an interval from row 25 to row 90, or from <code>t = 

1.00 s</code> to <code>t = 4.00 s</code> using cell markers like Z1 and Z2.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Both row-based and time-based options supported</li>


        <li>Used in regression trimming (<a href="#11.3.4.3">11.3.4.3</a>) and export filtering (<a 

href="#10.13.2.1">10.13.2.1</a>)</li>

        <li>Internally normalized to row indices for processing</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.4.1.2 -- Manual selection vs programmatic detection -->

<!-- ====================================================== -->

<section id="11.4.1.2">

  <h4>11.4.1.2 -- Manual selection vs programmatic detection</h4>

  <p>

    Intervals can be chosen manually by the user via spreadsheet selection or cell values, or they can be 

detected automatically by the script using pattern-based heuristics.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Manual selection offers control, while programmatic detection reduces 

setup time and prevents human error.</li>

    <li>
n
 <strong>Example:</strong> The script might automatically select the interval where oscillation 

starts if it detects a sudden drop from baseline.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Manual mode uses <code>.getActiveRange()</code> or Z1/Z2 cells</li>

        <li>Auto mode scans data for thresholds or inflection points (see <a 

href="#11.4.2.1">11.4.2.1</a>)</li>

        <li>Preview tool allows toggling between modes</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.4.1.3 -- Z1:Z2 style cell blocks -->

<!-- ====================================================== -->

<section id="11.4.1.3">

  <h4>11.4.1.3 -- Z1:Z2 style cell blocks</h4>

  <p>

    The cells labeled <code>%%Z1%%</code> and <code>%%Z2%%</code> act as anchors for start and end points of 

an interval, either in rows or time units. They enable flexible and reusable workflows.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> These named blocks allow interval definitions to be embedded in the 

sheet rather than re-selected each time.</li>

    <li>
n
 <strong>Example:</strong> A sheet might define <code>%%Z1%% = 1.20</code> and <code>%%Z2%% = 

3.80</code> in seconds to isolate the clean portion of oscillation.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Values parsed via label matching (see <a href="#11.4.2.1">11.4.2.1</a>)</li>

        <li>Rendered with visual borders for user clarity (see <a href="#11.4.1.5">11.4.1.5</a>)</li>

        <li>Stored as metadata for export and formula preview</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.4.1.4 -- Overlap checking across datasets -->

<!-- ====================================================== -->

<section id="11.4.1.4">

  <h4>11.4.1.4 -- Overlap checking across datasets</h4>

  <p>

    When exporting or analyzing multiple intervals, the script checks for overlaps between them to avoid 

conflicts, double-counting, or conflicting regressions.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Intervals must be distinct unless superposition is explicitly desired.

 Overlaps can invalidate certain modeling steps.</li>

    <li>
n
 <strong>Example:</strong> If Dataset A uses rows 10OE40 and Dataset B uses 35OE70, a warning is shown 

unless merged mode is enabled.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Overlap logic triggers during multi-sheet export or batch regression</li>

        <li>Warnings displayed in preview screen and ExportLog (see <a href="#11.7.3.1">11.7.3.1</a>)</li>

        <li>Optional config toggle to allow soft overlaps for ensemble models</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.4.1.5 -- Sheet preview of marked regions -->

<!-- ====================================================== -->

<section id="11.4.1.5">


  <h4>11.4.1.5 -- Sheet preview of marked regions</h4>

  <p>

    Visual feedback is provided in the spreadsheet by highlighting the defined interval. This helps users 

verify selection boundaries before fitting or exporting.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Visual cues reduce mistakes and make it easier to teach or present 

workflows involving interval selection.</li>

    <li>
n
 <strong>Example:</strong> The range from row 20 to 75 might appear with a shaded grey background, 

bordered in blue to indicate interval active zone.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Uses <code>setBackground()</code> and <code>setBorder()</code> from Apps Script UI tools</li>

        <li>Removed on next run or when interval is cleared</li>

        <li>Integrated with sidebar confirmation modal (see <a href="#11.4.2.3">11.4.2.3</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.4.2.1 -- Detecting user-selected ranges via Apps Script -->

<!-- ====================================================== -->

<section id="11.4.2.1">

  <h4>11.4.2.1 -- Detecting user-selected ranges via Apps Script</h4>

  <p>

    Apps Script allows the script to detect what range the user has selected in the spreadsheet, enabling 

interactive interval definition without manual entry.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> When the user selects a block of cells, <code>.getActiveRange()</code>

 can be used to read the bounds and convert them to row indices or time values.</li>

    <li>
n
 <strong>Example:</strong> Selecting rows 25OE75 in column A translates into a time-based interval if 

the time values are present and recognized as valid (see <a href="#11.10.1.5">11.10.1.5</a>).</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Range captured from active selection at trigger time (see <a href="#11.6.2.3">11.6.2.3</a>)</li>

        <li>Converted to internal start/stop row values for processing</li>

        <li>Logged in sidebar preview and stored as metadata for export reference</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.4.2.2 -- Using selection to limit fit or export -->

<!-- ====================================================== -->

<section id="11.4.2.2">

  <h4>11.4.2.2 -- Using selection to limit fit or export</h4>

  <p>

    Once a selection has been captured, it can be used to constrain the dataset to be fitted, graphed, or 

exported. This enables custom analysis without modifying the full dataset.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Interval selection is key for isolating clean segments, skipping 

invalid rows, or analyzing repeated trials independently.</li>

    <li>
n
 <strong>Example:</strong> If only the first few seconds of oscillation are useful for regression, a 

user may limit export to rows 5OE45.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Selection applied as mask to regression window (see <a href="#11.3.4.3">11.3.4.3</a>)</li>

        <li>Passed into export scripts for `.csv`, `.m`, and `.tex` files (see <a 

href="#10.13.2.1">10.13.2.1</a>)</li>

        <li>Auto-disables if no selection is active or defined</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.4.2.3 -- Preview of selected window before processing -->

<!-- ====================================================== -->

<section id="11.4.2.3">

  <h4>11.4.2.3 -- Preview of selected window before processing</h4>

  <p>

    The HelpDialog or sidebar preview pane displays a summary of the selected interval, showing its data shape

 and value ranges before regression or export occurs.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This allows users to confirm they selected the correct region before 

the model is applied or an export file is generated.</li>

    <li>
n
 <strong>Example:</strong> The preview might indicate: fiInterval: 1.23s to 3.45s, 58 rows, Peak 

Amplitude: ~2.0 units.fl</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>


        <li>Chart embedded in sidebar using <code>HtmlService.createHtmlOutput()</code> (see <a 

href="#11.6.3.1">11.6.3.1</a>)</li>

        <li>Overlayed with fit type, bounds, and basic statistics</li>

        <li>Requires user confirmation with fiUse This Intervalfl button before continuing</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.4.2.4 -- Issues with merged or non-contiguous ranges -->

<!-- ====================================================== -->

<section id="11.4.2.4">

  <h4>11.4.2.4 -- Issues with merged or non-contiguous ranges</h4>

  <p>

    Merged cells or fragmented selections can confuse the range logic and result in invalid fit windows or 

error-prone exports. These are automatically detected and flagged.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> The script assumes a rectangular range. Non-contiguous blocks break 

assumptions and often lead to skipped or broken exports.</li>

    <li>
n
 <strong>Example:</strong> Selecting column A rows 5OE25 and column C rows 10OE30 will trigger a 

warning: fiMultiple ranges detected -- please select a continuous block.fl</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Checked using <code>.getRanges()</code> and <code>.isPartOfMerge()</code> API calls</li>

        <li>Fallbacks apply only to the first valid block; others are ignored unless user confirms 

override</li>

        <li>Error also logged in <code>ErrorLog</code> and shown via <code>alert()</code> (see <a 

href="#11.6.2.2">11.6.2.2</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.4.2.5 -- Restoring default range after deselection -->

<!-- ====================================================== -->

<section id="11.4.2.5">

  <h4>11.4.2.5 -- Restoring default range after deselection</h4>

  <p>

    If no valid interval is selected, the script automatically resets to process the full sheet. Users are 

notified when this fallback occurs to avoid silent misconfiguration.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This prevents errors when switching between sheets, clearing 

selections, or working in setup phases.</li>

    <li>
n
 <strong>Example:</strong> If Z1 and Z2 are deleted, or no block is selected, the regression range 

resets to use all data from the active sheet.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Fallback logic triggers when <code>start == null || end == null</code></li>

        <li>Triggers toast warning: fiNo interval set. Full dataset will be used.fl</li>

        <li>Auto-reset range also logged to <code>ExportLog</code> for traceability</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- SECTION 11.5 -- Formula Wizard -->

<!-- ====================================================== -->

<!-- ====================================================== -->

<!-- 11.5.1.1 -- User-facing input box (JS-style or LaTeX-style) -->

<!-- ====================================================== -->

<section id="11.5.1.1">

  <h4>11.5.1.1 -- User-facing input box (JS-style or LaTeX-style)</h4>

  <p>

    The formula wizard prompts the user with an input box for entering regression equations. Both JavaScript-

style and LaTeX-style notation are accepted, depending on the user(TM)s preference.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This input method supports both technical and mathematical formats for

 user-defined functions.</li>

    <li>
n
 <strong>Example:</strong> A user may enter <code>A*cos(w*t+
f
)*exp(-b*t)+C</code> or 

<code>A\cos(\omega t + \phi)e^{-bt} + C</code>, with both rendering correctly in preview (see <a 

href="#11.5.3.1">11.5.3.1</a>).</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Input collected via <code>prompt()</code> or sidebar form (see <a 

href="#11.6.2.3">11.6.2.3</a>)</li>

        <li>Supports inline variable parsing and dynamic LaTeX rendering</li>

        <li>Stored in memory and exported in <code>.m</code> and <code>.tex</code> files (see <a 

href="#10.13.2.1">10.13.2.1</a>)</li>


      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.1.2 -- Syntax hints and input constraints -->

<!-- ====================================================== -->

<section id="11.5.1.2">

  <h4>11.5.1.2 -- Syntax hints and input constraints</h4>

  <p>

    Real-time tooltips and hover hints help guide the user while entering a formula, including reserved word 

warnings and formatting best practices.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Prevents invalid formulas, syntax errors, or unsupported operations by

 offering inline hints and tooltips on error.</li>

    <li>
n
 <strong>Example:</strong> If a user types <code>cos++</code>, a red warning appears: fiInvalid 

increment operator in function syntax.fl</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Inline validator scans string using regex patterns (see <a href="#11.5.1.4">11.5.1.4</a>)</li>

        <li>Tooltip helper based on glossary anchor tags (see <a href="#11.1.2.2">11.1.2.2</a>)</li>

        <li>Input length and complexity limits enforced to avoid crashes</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.1.3 -- Parsing and sanitization of user input -->

<!-- ====================================================== -->

<section id="11.5.1.3">

  <h4>11.5.1.3 -- Parsing and sanitization of user input</h4>

  <p>

    Before storing or processing a formula, the system sanitizes it by cleaning unnecessary characters, 

validating syntax, and standardizing the structure.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This ensures the formula can be reliably interpreted across platforms 

(UI, export, regression engine).</li>

    <li>
n
 <strong>Example:</strong> The input <code> A * cos ( w * t + 
f
 )  </code> is sanitized into 

<code>A*cos(w*t+
f
)</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Trims whitespace, normalizes parentheses, escapes reserved symbols (see <a 

href="#11.10.3.4">11.10.3.4</a>)</li>

        <li>Sanitized version previewed before commit</li>

        <li>Stored in both raw and compiled format for export</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.1.4 -- Handling malformed or ambiguous formulas -->

<!-- ====================================================== -->

<section id="11.5.1.4">

  <h4>11.5.1.4 -- Handling malformed or ambiguous formulas</h4>

  <p>

    If the input formula cannot be parsed or is ambiguous, a specific error message is returned to guide the 

user in resolving it. Highlighting or suggestions may be shown.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Syntax issues are caught before model fitting, preventing failed 

regressions or broken exports.</li>

    <li>
n
 <strong>Example:</strong> For input <code>cos(wt +</code>, the wizard may return: fiUnmatched 

parentheses at position 9.fl</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Live parser uses regex-based matching and stack logic</li>

        <li>Tooltips link to glossary entries for function names and symbols</li>

        <li>Invalid inputs blocked until resolved (see <a href="#11.5.1.5">11.5.1.5</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.1.5 -- Previewing parsed result before processing -->

<!-- ====================================================== -->

<section id="11.5.1.5">

  <h4>11.5.1.5 -- Previewing parsed result before processing</h4>

  <p>

    After parsing and validation, the wizard shows a live preview of the parsed function, its variables, and 


expected data layout. Users must confirm before applying the model.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This prevents mistakes by letting users confirm that the formula 

behaves as intended before execution.</li>

    <li>
n
 <strong>Example:</strong> The modal preview might list: fiVariables detected: A, w, t, 
f
, b. Syntax 

OK. Output format: vector(time).fl</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Generated using MathJax renderer with inline and block LaTeX views (see <a 

href="#11.5.3.2">11.5.3.2</a>)</li>

        <li>Confirms variable ordering and compatibility with sheet headers</li>

        <li>fiAccept Formulafl button finalizes the input and closes wizard</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.2.1 -- Auto-detect variable names from formula -->

<!-- ====================================================== -->

<section id="11.5.2.1">

  <h4>11.5.2.1 -- Auto-detect variable names from formula</h4>

  <p>

    When the user enters a regression formula, the wizard scans the string to identify all variable names. 

This auto-generates a parameter list for fitting and export purposes.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Detecting variables programmatically saves time and prevents 

mismatches between formula and data.</li>

    <li>
n
 <strong>Example:</strong> The formula <code>A*cos(w*t + 
f
)*exp(-b*t) + C</code> yields the variable 

set <code>{A, w, t, 
f
, b, C}</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Uses a regex parser to extract alphabetic tokens not in function name list (e.g., 

<code>cos</code>, <code>exp</code>)</li>

        <li>Filters constants and reserved math symbols (see <a href="#11.10.2.3">11.10.2.3</a>)</li>

        <li>Result used to build parameter input fields and metadata block (see <a 

href="#10.13.3.2">10.13.3.2</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.2.2 -- Parameter ordering logic (alphabetical, by position) -->

<!-- ====================================================== -->

<section id="11.5.2.2">

  <h4>11.5.2.2 -- Parameter ordering logic (alphabetical, by position)</h4>

  <p>

    Detected parameters can be ordered either alphabetically or in the order they appear in the formula. This 

affects layout in the parameter entry UI and export templates.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Alphabetical order standardizes layout across sheets; position-based 

order reflects natural input flow for custom functions.</li>

    <li>
n
 <strong>Example:</strong> In <code>A*cos(w*t+
f
)+C</code>, order by position = <code>A, w, t, 
f
, 

C</code>; order alphabetically = <code>A, C, 
f
, t, w</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Default behavior can be toggled in config or via UI setting</li>

        <li>Ordering affects variable rows in <code>Processing</code> and <code>Params</code> sheets</li>

        <li>Preserved in export files using declared input sequence (see <a 

href="#10.13.1.4">10.13.1.4</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.2.3 -- Prompting user for initial guess / bounds -->

<!-- ====================================================== -->

<section id="11.5.2.3">

  <h4>11.5.2.3 -- Prompting user for initial guess / bounds</h4>

  <p>

    After parsing variable names, the system prompts the user to enter initial guess values and optional 

upper/lower bounds for regression fitting.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Supplying guess values and boundaries can drastically improve 

convergence and prevent invalid model behavior.</li>

    <li>
n
 <strong>Example:</strong> For variable <code>w</code>, the user may enter: <code>Guess: 6.3</code>, 

<code>Min: 4</code>, <code>Max: 8</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>


        <li>Inputs collected in sidebar or modal form (see <a href="#11.6.3.1">11.6.3.1</a>)</li>

        <li>Stored in internal object tied to each formula for re-use</li>

        <li>Used directly by nonlinear regression engine (see <a href="#10.12.4.1">10.12.4.1</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.2.4 -- Linking variable names to cell anchors -->

<!-- ====================================================== -->

<section id="11.5.2.4">

  <h4>11.5.2.4 -- Linking variable names to cell anchors</h4>

  <p>

    Parameters can optionally be linked to named cell anchors in the sheet. This allows formulas to reference 

live cell values for input or export, ensuring consistency across sessions.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Anchors help users change values directly in the spreadsheet without 

reopening the wizard.</li>

    <li>
n
 <strong>Example:</strong> The parameter <code>
f
</code> may be linked to cell <code>B5</code>, which 

holds the value <code>0.55</code>. The link updates automatically when <code>B5</code> is edited.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Anchor links stored as named ranges or metadata (see <a href="#11.10.2.4">11.10.2.4</a>)</li>

        <li>Used during export to replace variables with live values</li>

        <li>Tooltip on variable shows anchor location and current value</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.2.5 -- Warn on unused or undeclared parameters -->

<!-- ====================================================== -->

<section id="11.5.2.5">

  <h4>11.5.2.5 -- Warn on unused or undeclared parameters</h4>

  <p>

    The wizard verifies that all parameters referenced in the formula are declared and mapped to usable 

values. If a variable is undeclared or unused, a warning is issued before processing.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Undeclared variables can cause export errors or regression failures. 

This safeguard ensures consistency between formula and data entry.</li>

    <li>
n
 <strong>Example:</strong> If the formula includes <code>D</code> but no guess, anchor, or range is 

defined for it, the sidebar will flag: fiWarning: undeclared parameter <code>D</code>.fl</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Cross-checked against declared parameter table and anchor map (see <a 

href="#11.5.2.4">11.5.2.4</a>)</li>

        <li>Warnings shown as icon + tooltip in preview and log</li>

        <li>May block export unless resolved or confirmed by user</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.3.1 -- Convert JS-style formula to LaTeX math format -->

<!-- ====================================================== -->

<section id="11.5.3.1">

  <h4>11.5.3.1 -- Convert JS-style formula to LaTeX math format</h4>

  <p>

    Entered formulas are converted to LaTeX format for math preview and export compatibility. The converter 

preserves mathematical structure and substitutes standard math symbols.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> LaTeX provides precise and standardized formatting for mathematical 

expressions across platforms like MATLAB and printed reports.</li>

    <li>
n
 <strong>Example:</strong> The input <code>A*cos(w*t + 
f
)</code> becomes <code>A \cos(\omega t + 

\phi)</code> in rendered LaTeX (see <a href="#11.10.3.3">11.10.3.3</a>).</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Conversion logic replaces common operators and tokens with LaTeX equivalents (e.g., 

<code>cos</code> 
®
 <code>\cos</code>, <code>*</code> 
®
 <code>\cdot</code>)</li>

        <li>Unicode Greek letters substituted as needed using mapping table from <a 

href="#11.10.2.2">11.10.2.2</a></li>

        <li>LaTeX string stored alongside raw formula for use in export</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.3.2 -- Render with MathJax in preview box -->


<!-- ====================================================== -->

<section id="11.5.3.2">

  <h4>11.5.3.2 -- Render with MathJax in preview box</h4>

  <p>

    The formula preview box uses MathJax to render LaTeX math expressions interactively within the sidebar. 

Users can toggle between inline and block styles to match their preference.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This gives users immediate visual feedback about how their formula 

will appear in export and documentation.</li>

    <li>
n
 <strong>Example:</strong> Upon entering <code>A*cos(w*t)</code>, the preview updates in real-time to

 show <code>A \cos(\omega t)</code> with properly formatted math layout.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Uses embedded <code>MathJax.Hub.Queue()</code> rendering in HTML sidebar (see <a 

href="#11.6.3.1">11.6.3.1</a>)</li>

        <li>Toggle for display mode saved to user config and applied to export view (see <a 

href="#11.5.3.5">11.5.3.5</a>)</li>

        <li>Live updates triggered on input or structure change</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.3.3 -- Handle parentheses, subscripts, and exponents -->

<!-- ====================================================== -->

<section id="11.5.3.3">

  <h4>11.5.3.3 -- Handle parentheses, subscripts, and exponents</h4>

  <p>

    The LaTeX converter detects and correctly formats nested parentheses, variable subscripts, and exponent 

terms to ensure mathematical accuracy and visual clarity.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Complex expressions with powers or nested terms need structural 

parsing to avoid incorrect rendering or export syntax errors.</li>

    <li>
n
 <strong>Example:</strong> The input <code>x1^2 + A*(t - t0)</code> is converted into <code>x_1^2 + 

A(t - t_0)</code> in LaTeX, using subscripts and superscripts correctly.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Nested structures handled by stack-based parser or token tree</li>

        <li>Subscripts identified via trailing numbers or underscores</li>

        <li>Exponents translated using <code>^</code> with brackets: <code>a^(2b)</code> 
®
 

<code>a^{2b}</code></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.3.4 -- Dynamic updates as formula is edited -->

<!-- ====================================================== -->

<section id="11.5.3.4">

  <h4>11.5.3.4 -- Dynamic updates as formula is edited</h4>

  <p>

    The formula preview updates in real-time as the user types. This helps them visually track how each edit 

changes the underlying structure and LaTeX rendering.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Immediate feedback prevents accidental errors and allows users to test

 notation as they build complex expressions.</li>

    <li>
n
 <strong>Example:</strong> Typing <code>A*cos(w*t+</code> will immediately show incomplete LaTeX 

rendering and may flag a missing closing parenthesis.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Uses `input` and `keyup` listeners to trigger formula re-evaluation</li>

        <li>Preview throttled for performance and debounce behavior</li>

        <li>Error state shown until syntax validates (see <a href="#11.5.1.4">11.5.1.4</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.3.5 -- Optional display mode selection (`inline` vs `block`) -->

<!-- ====================================================== -->

<section id="11.5.3.5">

  <h4>11.5.3.5 -- Optional display mode selection (<code>inline</code> vs <code>block</code>)</h4>

  <p>

    Users can choose whether to render LaTeX formulas using inline mode (<code>$...$</code>) or block mode 

(<code>$$...$$</code>) in the preview and export interfaces.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Inline mode is compact and suited to tooltips or cell comments, while 

block mode is better for centered display and reports.</li>


    <li>
n
 <strong>Example:</strong> Inline view: <code>$A \cos(\omega t)$</code>. Block view: <code>$$A 

\cos(\omega t)$$</code>, which renders as a standalone equation.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Selection stored in sidebar config and applied to export styles (see <a 

href="#11.10.3.2">11.10.3.2</a>)</li>

        <li>Preview renderer reinitializes MathJax with the selected mode</li>

        <li>Display setting respected in `.tex` export and LaTeX sidebar</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.4.1 -- Save formula + param list to reusable model bank -->

<!-- ====================================================== -->

<section id="11.5.4.1">

  <h4>11.5.4.1 -- Save formula + param list to reusable model bank</h4>

  <p>

    Users can save their custom formulas, including all parameters and export settings, into a reusable fimodel

 bankfl for later use in the same or different sheets.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Reusable models improve workflow efficiency by allowing preconfigured 

regressions to be stored and reinserted with a single click.</li>

    <li>
n
 <strong>Example:</strong> A user defines <code>A*cos(w*t + 
f
)*exp(-b*t)</code> with six parameters. 

They save it as fiDamped Cosine A1fl to recall during future sessions.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Models stored as JSON in a hidden sheet, Drive file, or named range</li>

        <li>Includes formula string, parameter guesses, and variable anchors</li>

        <li>Referenced by menu insert tools and accessible from sidebar UI (see <a 

href="#11.5.4.4">11.5.4.4</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.4.2 -- Assign nickname or category tag to formula -->

<!-- ====================================================== -->

<section id="11.5.4.2">

  <h4>11.5.4.2 -- Assign nickname or category tag to formula</h4>

  <p>

    Users can optionally assign each formula a descriptive name or tag (e.g. fioscillationfl, fidecayfl, fitrial 

3fl), which is displayed in the model list for easy filtering and retrieval.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Tags and nicknames help organize saved models, especially in large 

projects or multi-sheet datasets.</li>

    <li>
n
 <strong>Example:</strong> A tag fispringfl allows users to quickly find all formulas related to spring

 motion. Category filters are available in the sidebar dropdown.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Tags and nicknames stored alongside model metadata (see <a href="#11.5.4.1">11.5.4.1</a>)</li>

        <li>Used in sidebar UI and formula selection modal</li>

        <li>Optional: allow auto-tagging based on variable names or export folder UID</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.4.3 -- Insert saved model into current sheet -->

<!-- ====================================================== -->

<section id="11.5.4.3">

  <h4>11.5.4.3 -- Insert saved model into current sheet</h4>

  <p>

    Any previously saved model can be reinserted into the current spreadsheet. The formula, variable names, 

guesses, and anchors are restored into the appropriate sections.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Reinserting models removes the need to retype formulas or redefine 

parameters for common analysis patterns.</li>

    <li>
n
 <strong>Example:</strong> Selecting fiTrial Template Afl from the model bank inserts the formula into 

the sidebar and updates the parameter entry block below.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Uses dropdown or menu insert system linked to JSON model bank</li>

        <li>Updates sheet metadata and optionally links to anchor cells</li>

        <li>Refreshes LaTeX preview immediately on insert (see <a href="#11.5.3.2">11.5.3.2</a>)</li>

      </ul>

    </li>

  </ul>

</section>


<!-- ====================================================== -->

<!-- 11.5.4.4 -- Show list of saved models in sidebar -->

<!-- ====================================================== -->

<section id="11.5.4.4">

  <h4>11.5.4.4 -- Show list of saved models in sidebar</h4>

  <p>

    The sidebar interface provides a scrollable list of all saved models, showing nicknames, tags, formula 

previews, and last used timestamps. This helps users choose the correct model quickly.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> A model library enhances discoverability and reuse for both individual

 users and classrooms using shared setups.</li>

    <li>
n
 <strong>Example:</strong> The list displays: fiDamped Cosine A1 (oscillation) -- last used: 3 days 

agofl with a button to insert or delete.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>HTML table or accordion list rendered using <code>HtmlService</code> (see <a 

href="#11.6.3.1">11.6.3.1</a>)</li>

        <li>Supports filtering by tag or sort by last used/date created</li>

        <li>Actions: insert, duplicate, delete (see <a href="#11.5.4.5">11.5.4.5</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.5.4.5 -- Delete or overwrite existing saved models -->

<!-- ====================================================== -->

<section id="11.5.4.5">

  <h4>11.5.4.5 -- Delete or overwrite existing saved models</h4>

  <p>

    Saved formulas in the model bank can be overwritten with updated versions or deleted entirely. This helps 

users manage evolving workflows and reduce clutter in the sidebar.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Overwriting allows a user to refine and update a model with new 

parameters. Deletion removes obsolete or test entries from the list.</li>

    <li>
n
 <strong>Example:</strong> A user clicks fi
n
 Deletefl next to fiTrial Damped Model (b = 0.12)fl. A 

confirmation appears: fiAre you sure you want to permanently delete this model?fl</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Deletes row from hidden model bank sheet or entry from stored JSON</li>

        <li>Overwrite is triggered when a saved model is selected, modified, and saved again under the same 

tag</li>

        <li>Confirmation modals used to prevent accidental deletions; updates logged in sidebar preview and 

optional <code>ModelLog</code> sheet</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- SECTION 11.6 -- UI & Menu Terms -->

<!-- ====================================================== -->

<!-- ====================================================== -->

<!-- 11.6.1.1 -- Sheet lifecycle event trigger onOpen() -->

<!-- ====================================================== -->

<section id="11.6.1.1">

  <h4>11.6.1.1 -- Sheet lifecycle event trigger <code>onOpen()</code></h4>

  <p>

    The <code>onOpen()</code> trigger executes automatically each time the spreadsheet is opened, setting up 

custom menus, sidebar states, and UI configurations for the session.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This trigger ensures the full physics tool interface (menus, 

protections, sidebars) is injected into the UI every time a user opens the file.</li>

    <li>
n
 <strong>Example:</strong> When opening a sheet, a user sees a custom fiPhysics Toolsfl menu appear in 

the top bar -- inserted via <code>onOpen()</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Defined using Apps Script with <code>function onOpen() { SpreadsheetApp.getUi()... }</code></li>

        <li>Calls helpers to build menus (see <a href="#11.6.1.2">11.6.1.2</a>) and restore HelpDialog states 

(see <a href="#11.6.3.2">11.6.3.2</a>)</li>

        <li>May apply protections or default settings based on sheet metadata</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.6.1.2 -- How custom menus are created -->

<!-- ====================================================== -->

<section id="11.6.1.2">

  <h4>11.6.1.2 -- How custom menus are created</h4>


  <p>

    Custom spreadsheet menus are created using the <code>SpreadsheetApp.getUi()</code> API. Menus group 

related actions and provide a top-level navigation structure for the script.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Menus help users launch features like CSV import, regression tools, 

export previews, and HelpDialog directly from the UI.</li>

    <li>
n
 <strong>Example:</strong> A menu titled fiPhysics Toolsfl may contain submenus like fiCSV Importfl, fiRun

 Regressionfl, and fiShow Helpfl. Each item maps to a function like <code>importCSVFromFolder()</code> or 

<code>showHelp()</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Uses <code>.createMenu()</code> with chained <code>.addItem()</code> and 

<code>.addSubMenu()</code> calls</li>

        <li>Menu functions tied to backend code -- see <a href="#11.8">11.8 -- Script Functions Index</a></li>

        <li>May conditionally display menu items based on user type or sheet status (see <a 

href="#11.6.1.5">11.6.1.5</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.6.1.3 -- Menu structure: CSV, Processing, Help, etc. -->

<!-- ====================================================== -->

<section id="11.6.1.3">

  <h4>11.6.1.3 -- Menu structure: CSV, Processing, Help, etc.</h4>

  <p>

    The menu is divided into logical sections for ease of navigation. Each section contains tools for specific

 tasks such as importing CSVs, analyzing data, generating exports, and accessing documentation.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Grouping functions into themed submenus improves usability and reduces

 clutter, especially for first-time users.</li>

    <li>
n
 <strong>Example:</strong> The fiHelpfl submenu includes: <code>Show Help Sidebar</code>, 

<code>Glossary</code>, <code>Show LaTeX Preview</code>; fiProcessingfl includes <code>Run Regression</code>, 

<code>Interval Trim</code>, <code>Clean Sheet</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Built using <code>.addSubMenu()</code> calls for each major category (e.g. Help, Regression, 

Export)</li>

        <li>Top-level menu titled fiPhysics Toolsfl or similar</li>

        <li>Individual items call functions from <a href="#11.8">Section 11.8</a> such as 

<code>runRegression()</code>, <code>showHelpFunctions1()</code>, etc.</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.6.1.4 -- Submenus and separators -->

<!-- ====================================================== -->

<section id="11.6.1.4">

  <h4>11.6.1.4 -- Submenus and separators</h4>

  <p>

    Submenus within the main script menu use separators and nested structure to visually differentiate 

toolsets. This enhances clarity and prevents accidental clicks on unrelated functions.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Using horizontal lines and grouped items mimics common UI patterns in 

desktop software, improving familiarity for students and teachers.</li>

    <li>
n
 <strong>Example:</strong> Under fiExportfl, the menu appears as:

      <ul>

        <li><code>
®
 Export as CSV</code></li>

        <li><code>
®
 Export as LaTeX</code></li>

        <li><hr></li>

        <li><code>
®
 Preview Parameters</code></li>

      </ul>

    </li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Separator lines added with <code>.addSeparator()</code></li>

        <li>Nested structure built using chained submenu creation with <code>.addSubMenu()</code></li>

        <li>Supports expandable multi-level menus for future tools</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.6.1.5 -- Dynamic menus based on permissions or state -->

<!-- ====================================================== -->

<section id="11.6.1.5">

  <h4>11.6.1.5 -- Dynamic menus based on permissions or state</h4>

  <p>


    The menu system adapts based on the user(TM)s role (e.g., admin, student) or the current sheet(TM)s status. 

Certain features may be hidden or disabled to prevent errors or simplify the UI.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This prevents access to tools that require setup, protects internal 

sheets, and simplifies the interface for non-technical users.</li>

    <li>
n
 <strong>Example:</strong> If the fiDrive Folder IDfl cell is blank, the fiExportfl submenu is replaced 

with fi
n
 Setup Requiredfl. Teachers may see more debug tools than students.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Checks user email or permissions via <code>Session.getActiveUser()</code> or predefined role 

lists</li>

        <li>Sheet state evaluated using metadata or cell values (e.g., missing folder ID)</li>

        <li>Menu item logic rebuilt on every <code>onOpen()</code> run (see <a 

href="#11.6.1.1">11.6.1.1</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.6.2.1 -- toast(message, title, timeout) for passive feedback -->

<!-- ====================================================== -->

<section id="11.6.2.1">

  <h4>11.6.2.1 -- <code>toast(message, title, timeout)</code> for passive feedback</h4>

  <p>

    Toast messages are small non-blocking notifications shown at the bottom right of the Google Sheets 

interface. They provide user feedback for minor events or confirmations.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Toasts are ideal for confirming actions like fiImport successfulfl or fi3

 rows cleanedfl without interrupting workflow.</li>

    <li>
n
 <strong>Example:</strong> After clicking fiRun Regressionfl, a toast appears: <code>"Model fit 

complete", "Regression", 4</code> (4-second display).</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Invoked using <code>SpreadsheetApp.getActiveSpreadsheet().toast()</code></li>

        <li>Optional: automatically hidden after timeout (usually 3OE5 seconds)</li>

        <li>Used in CSV import, error cleanup, and UI updates -- see <a href="#11.7.1.5">11.7.1.5</a> and <a 

href="#11.8.4.4">11.8.4.4</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.6.2.2 -- alert(title, message) for modal warnings -->

<!-- ====================================================== -->

<section id="11.6.2.2">

  <h4>11.6.2.2 -- <code>alert(title, message)</code> for modal warnings</h4>

  <p>

    Alerts are modal dialog boxes that block further user interaction until they are acknowledged. They are 

used to notify users about critical errors, missing inputs, or safety prompts.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Unlike toast messages, alerts are interruptive and require user action

 (clicking OK), making them suitable for important messages or errors.</li>

    <li>
n
 <strong>Example:</strong> If the user tries to run a regression without importing data, an alert 

appears: <code>alert("Regression Error", "No data found in active sheet.")</code></li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Uses <code>SpreadsheetApp.getUi().alert(title, message, buttonSet)</code></li>

        <li>Often followed by conditional logic to cancel or redirect user actions</li>

        <li>Called from validation checks (e.g., folder ID missing, formula malformed -- see <a 

href="#11.5.1.4">11.5.1.4</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.6.2.3 -- prompt() to collect user input (e.g., formula, range) -->

<!-- ====================================================== -->

<section id="11.6.2.3">

  <h4>11.6.2.3 -- <code>prompt()</code> to collect user input (e.g., formula, range)</h4>

  <p>

    Prompt dialogs are used to collect simple text input from the user, such as custom formulas, range names, 

folder IDs, or tags. They include a text box and confirmation buttons.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Prompt boxes are lightweight and easy to implement for single-value 

inputs, but are limited in formatting and layout options.</li>

    <li>
n
 <strong>Example:</strong> When setting up export, a prompt may appear: <code>prompt("Enter Folder 

ID", "Paste Google Drive Folder ID here:", "")</code></li>

    <li>
n
 <strong>Implementation:</strong>


      <ul>

        <li>Invoked with <code>SpreadsheetApp.getUi().prompt(title, message, buttons)</code></li>

        <li>Returns <code>.getResponseText()</code> if OK clicked; logic must check for cancel/close</li>

        <li>Used in formula editing, range definition, and folder setup -- see <a href="#11.5.1.1">11.5.1.1</a>

 and <a href="#11.8.4.5">11.8.4.5</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.6.2.4 -- Handling cancel/dismiss events -->

<!-- ====================================================== -->

<section id="11.6.2.4">

  <h4>11.6.2.4 -- Handling cancel/dismiss events</h4>

  <p>

    User dialogs like <code>alert()</code> and <code>prompt()</code> may be cancelled or dismissed. The script

 must handle these cases gracefully to avoid broken logic or missing data.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> If a user closes a dialog box without providing input, fallback logic 

is needed to prevent undefined states or crashes.</li>

    <li>
n
 <strong>Example:</strong> If a prompt asks for a formula and the user presses fiCancelfl, the function

 returns <code>null</code> and the formula is not updated.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Use <code>.getSelectedButton()</code> to check if the user clicked OK or Cancel</li>

        <li>Return early or restore default values if cancel detected</li>

        <li>Log abort events to console or sidebar if necessary (see <a href="#11.7.3.3">11.7.3.3</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.6.2.5 -- Limitations and workarounds -->

<!-- ====================================================== -->

<section id="11.6.2.5">

  <h4>11.6.2.5 -- Limitations and workarounds</h4>

  <p>

    Built-in prompts and alerts in Apps Script have layout and styling limitations. For more complex input 

forms, sidebars or modals created with HTMLService should be used instead.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Prompts support only plain text input, a single textbox, and limited 

formatting -- not ideal for parameter lists or multiple inputs.</li>

    <li>
n
 <strong>Example:</strong> To collect multiple bounds (e.g. min/max for <code>A</code> and 

<code>
w
</code>), a sidebar form is preferred over chained <code>prompt()</code> calls.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Use <code>HtmlService.createHtmlOutputFromFile()</code> for sidebars (see <a 

href="#11.6.3.1">11.6.3.1</a>)</li>

        <li>Only use <code>prompt()</code> for quick single-string inputs like Folder ID or short formula</li>

        <li>Fallback to sidebar-based input for complex workflows (e.g., <a href="#11.5.2.3">initial parameter

 entry</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.6.3.1 -- Sidebars created with HtmlService.createHtmlOutput() -->

<!-- ====================================================== -->

<section id="11.6.3.1">

  <h4>11.6.3.1 -- Sidebars created with <code>HtmlService.createHtmlOutput()</code></h4>

  <p>

    Google Apps Script allows creation of rich HTML/CSS sidebars using <code>HtmlService</code>. These are 

used for interactive tools such as HelpDialog, parameter input forms, or LaTeX previews.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Sidebars provide a flexible way to collect structured user input, 

render dynamic math, or guide workflow without interrupting the spreadsheet view.</li>

    <li>
n
 <strong>Example:</strong> The HelpDialog is rendered using 

<code>HtmlService.createHtmlOutputFromFile("HelpDialog")</code> and displayed using 

<code>showSidebar()</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Files stored in the script editor(TM)s file tree (e.g., <code>HelpDialog.html</code>)</li>

        <li>HTML served to sidebar using <code>SpreadsheetApp.getUi().showSidebar(output)</code></li>

        <li>All sidebar tools (regression wizard, LaTeX preview, export) follow this pattern</li>

      </ul>

    </li>

  </ul>

</section>


<!-- ====================================================== -->

<!-- 11.6.3.2 -- showHelp() and toggleHelpDisplay() roles -->

<!-- ====================================================== -->

<section id="11.6.3.2">

  <h4>11.6.3.2 -- <code>showHelp()</code> and <code>toggleHelpDisplay()</code> roles</h4>

  <p>

    The core functions <code>showHelp()</code> and <code>toggleHelpDisplay()</code> control visibility of the 

HelpDialog sidebar. They are invoked from the menu or programmatically by other tools.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Users can open or close HelpDialog without reloading the spreadsheet, 

maintaining their place in the sidebar view.</li>

    <li>
n
 <strong>Example:</strong> Selecting fi
n
 Help 
®
 Show Help Sidebarfl calls 

<code>toggleHelpDisplay()</code>, which toggles a boolean flag and either calls <code>showHelp()</code> or 

closes the panel.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li><code>showHelp()</code> loads and renders <code>HelpDialog.html</code> with 

<code>HtmlService</code> (see <a href="#11.6.3.1">11.6.3.1</a>)</li>

        <li><code>toggleHelpDisplay()</code> tracks sidebar state via property or config variable</li>

        <li>Also used by other sidebar tools to prevent overlap or double sidebar load</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.6.3.1 -- Sidebars created with HtmlService.createHtmlOutput() -->

<!-- ====================================================== -->

<section id="11.6.3.1">

  <h4>11.6.3.1 -- Sidebars created with <code>HtmlService.createHtmlOutput()</code></h4>

  <p>

    Google Apps Script allows creation of rich HTML/CSS sidebars using <code>HtmlService</code>. These are 

used for interactive tools such as HelpDialog, parameter input forms, or LaTeX previews.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Sidebars provide a flexible way to collect structured user input, 

render dynamic math, or guide workflow without interrupting the spreadsheet view.</li>

    <li>
n
 <strong>Example:</strong> The HelpDialog is rendered using 

<code>HtmlService.createHtmlOutputFromFile("HelpDialog")</code> and displayed using 

<code>showSidebar()</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Files stored in the script editor(TM)s file tree (e.g., <code>HelpDialog.html</code>)</li>

        <li>HTML served to sidebar using <code>SpreadsheetApp.getUi().showSidebar(output)</code></li>

        <li>All sidebar tools (regression wizard, LaTeX preview, export) follow this pattern</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.6.3.2 -- showHelp() and toggleHelpDisplay() roles -->

<!-- ====================================================== -->

<section id="11.6.3.2">

  <h4>11.6.3.2 -- <code>showHelp()</code> and <code>toggleHelpDisplay()</code> roles</h4>

  <p>

    The core functions <code>showHelp()</code> and <code>toggleHelpDisplay()</code> control visibility of the 

HelpDialog sidebar. They are invoked from the menu or programmatically by other tools.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Users can open or close HelpDialog without reloading the spreadsheet, 

maintaining their place in the sidebar view.</li>

    <li>
n
 <strong>Example:</strong> Selecting fi
n
 Help 
®
 Show Help Sidebarfl calls 

<code>toggleHelpDisplay()</code>, which toggles a boolean flag and either calls <code>showHelp()</code> or 

closes the panel.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li><code>showHelp()</code> loads and renders <code>HelpDialog.html</code> with 

<code>HtmlService</code> (see <a href="#11.6.3.1">11.6.3.1</a>)</li>

        <li><code>toggleHelpDisplay()</code> tracks sidebar state via property or config variable</li>

        <li>Also used by other sidebar tools to prevent overlap or double sidebar load</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.6.3.3 -- Sidebar width, height, auto-refresh -->

<!-- ====================================================== -->

<section id="11.6.3.3">

  <h4>11.6.3.3 -- Sidebar width, height, auto-refresh</h4>

  <p>

    Sidebars are designed to be scrollable, fixed-width panels in the right-hand column of Google Sheets. They

 can include auto-refresh options or refresh buttons for live preview updates.


  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> The sidebar provides persistent access to context-specific tools 

without covering spreadsheet data. Size and refresh logic are optimized for readability and 

responsiveness.</li>

    <li>
n
 <strong>Example:</strong> The LaTeX preview sidebar is ~300px wide with a fiRefresh Previewfl button. 

If auto-refresh is enabled, changes to the formula update it live.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Width typically set via CSS: <code>style="width: 300px;"</code></li>

        <li>Auto-refresh toggled via config, or set to trigger on <code>input</code>/<code>keyup</code> (see 

<a href="#11.5.3.4">11.5.3.4</a>)</li>

        <li>Used in HelpDialog, Export Sidebar, and Regression Wizard interfaces</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.6.3.4 -- Communicating between sidebar and script -->

<!-- ====================================================== -->

<section id="11.6.3.4">

  <h4>11.6.3.4 -- Communicating between sidebar and script</h4>

  <p>

    Sidebar HTML can interact with backend Apps Script functions using <code>google.script.run</code>. This 

enables form submissions, data queries, and live feedback from the spreadsheet context.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This two-way communication allows users to enter parameters, submit 

formulas, or trigger exports from inside the sidebar without leaving the UI.</li>

    <li>
n
 <strong>Example:</strong> In the parameter form, submitting the model calls 

<code>google.script.run.saveUserFormula(formData)</code> and shows a confirmation toast.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Script-side functions must be globally accessible (not inside another function)</li>

        <li>Callbacks (e.g. <code>.withSuccessHandler()</code>) used to update UI after backend actions</li>

        <li>Used in <a href="#11.5.2.3">parameter guess entry</a>, <a href="#11.5.4.4">model bank updates</a>,

 and <a href="#11.7.3.3">log writes</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.6.3.5 -- Help content structure (accordion, anchors) -->

<!-- ====================================================== -->

<section id="11.6.3.5">

  <h4>11.6.3.5 -- Help content structure (accordion, anchors)</h4>

  <p>

    HelpDialog content is structured using collapsible accordion sections with internal anchor links. Each 

section maps to a major function or concept in the script and allows deep-linking or dynamic expansion.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This structure allows users to quickly jump to relevant documentation 

or glossary entries, reducing scroll fatigue and enhancing clarity.</li>

    <li>
n
 <strong>Example:</strong> Clicking <code>Help 
®
 Regression 
®
 Interval Selection</code> scrolls the 

sidebar to <code>#10.4</code>, expands the relevant accordion, and optionally highlights the section 

briefly.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Sections rendered as HTML <code>&lt;details&gt;</code> elements with <code>&lt;summary&gt;</code> 

headers</li>

        <li>Anchor links follow ID format: <code>&lt;section id="11.6.3.5"&gt;</code></li>

        <li>Anchor-to-scroll implemented via JavaScript fragment matching on sidebar load</li>

        <li>Terms and tags link back to <a href="#11.1.2.1">glossary anchors</a> and <a 

href="#12">citations</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- SECTION 11.7 -- Logs & Debug -->

<!-- ====================================================== -->

<!-- ====================================================== -->

<!-- 11.7.1.1 -- Created on first error if missing -->

<!-- ====================================================== -->

<section id="11.7.1.1">

  <h4>11.7.1.1 -- Created on first error if missing</h4>

  <p>

    The <code>ErrorLog</code> sheet is automatically created the first time a critical error or warning 

occurs. This ensures no logging configuration is required in advance.

  </p>

  <ul>


    <li>
n
 <strong>Explanation:</strong> Error logs track faults such as missing IDs, invalid formulas, or 

failed imports. Auto-creation ensures no log data is lost.</li>

    <li>
n
 <strong>Example:</strong> If an invalid CSV folder ID is entered, <code>ErrorLog</code> appears with

 an entry showing the error type, affected sheet, and message.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Log creation triggered via <code>if (!sheetExists("ErrorLog")) { createLogSheet() }</code></li>

        <li>Formatting and header setup defined in <a href="#11.7.1.2">11.7.1.2</a></li>

        <li>Sheet is protected from deletion and excluded from <a href="#11.8.3.2">batch processing</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.7.1.2 -- Header structure: timestamp, type, message -->

<!-- ====================================================== -->

<section id="11.7.1.2">

  <h4>11.7.1.2 -- Header structure: timestamp, type, message</h4>

  <p>

    The <code>ErrorLog</code> sheet includes structured columns: <strong>Timestamp</strong>, 

<strong>Type</strong>, <strong>Sheet</strong>, <strong>Action</strong>, <strong>Message</strong>. These fields

 allow filtering, sorting, and error tracing.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Each error entry contains sufficient metadata to trace the source, 

severity, and context of the issue.</li>

    <li>
n
 <strong>Example:</strong> A failed LaTeX export adds the following row: <code>2025-06-15 14:02, 

ERROR, DataSheet1, ExportLatex, Missing parameter guess for A</code></li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Timestamp formatted using <code>Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 

...)</code></li>

        <li>Log rows appended via <code>ErrorLog.appendRow([...])</code> or structured logger (see <a 

href="#11.8.4.4">11.8.4.4</a>)</li>

        <li>Used by sidebar viewers (see <a href="#11.8.5.4">viewErrorLog()</a>) and debugging tools</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.7.1.3 -- Log levels: INFO, WARNING, ERROR -->

<!-- ====================================================== -->

<section id="11.7.1.3">

  <h4>11.7.1.3 -- Log levels: <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code></h4>

  <p>

    Every log entry is assigned a severity level to indicate its importance: <code>INFO</code> for passive 

notices, <code>WARNING</code> for recoverable issues, and <code>ERROR</code> for critical failures.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Clear severity tagging helps users and developers prioritize what to 

fix, investigate, or safely ignore.</li>

    <li>
n
 <strong>Example:</strong>

      <ul>

        <li><code>INFO</code>: "Formula preview updated"</li>

        <li><code>WARNING</code>: "Folder ID not found; using fallback"</li>

        <li><code>ERROR</code>: "Failed to export regression: sheet not found"</li>

      </ul>

    </li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Levels stored in the second column of each log entry (see <a href="#11.7.1.2">11.7.1.2</a>)</li>

        <li>Logged programmatically via <code>appendErrorLog(level, sheet, action, message)</code></li>

        <li>Used for filtering in sidebar viewer and conditional formatting (see <a 

href="#11.7.1.4">11.7.1.4</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.7.1.4 -- Color-coding rows for severity -->

<!-- ====================================================== -->

<section id="11.7.1.4">

  <h4>11.7.1.4 -- Color-coding rows for severity</h4>

  <p>

    ErrorLog entries are visually styled based on severity using a grayscale theme: black rows for 

<code>ERROR</code>, grey for <code>WARNING</code>, and light grey for <code>INFO</code>. This aligns with the 

system sheet visual language.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Visual coding allows quick scanning of the log for high-impact issues 

without relying solely on text filters.</li>

    <li>
n
 <strong>Example:</strong> A critical export failure appears as a black row with bold white text. 


Informational messages appear as light grey text on white background.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Applied via conditional formatting rules on the <code>Type</code> column</li>

        <li>Fallback implementation: cell background color set via script when logging</li>

        <li>Updated automatically when new log entries are appended (see <a 

href="#11.8.5.2">updateErrorLogColorScale()</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.7.1.5 -- Sorting and auto-resizing columns -->

<!-- ====================================================== -->

<section id="11.7.1.5">

  <h4>11.7.1.5 -- Sorting and auto-resizing columns</h4>

  <p>

    Every time a new row is appended to the <code>ErrorLog</code> sheet, the table is automatically sorted 

(usually by timestamp descending) and the columns are resized for clarity.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This keeps the newest and most relevant issues visible at the top of 

the sheet, and prevents truncation of log content due to narrow columns.</li>

    <li>
n
 <strong>Example:</strong> After logging 10 errors, the sheet automatically highlights the most 

recent entry and adjusts column widths so the full message is readable without hover.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Sorts by first column (Timestamp) in descending order: <code>sheet.sort(1, false)</code></li>

        <li>Column widths adjusted via <code>autoResizeColumn(colIndex)</code> for each column</li>

        <li>Optionally limited to header + last N rows for speed in large logs</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.7.2.1 -- Console-based debugging tool -->

<!-- ====================================================== -->

<section id="11.7.2.1">

  <h4>11.7.2.1 -- Console-based debugging tool</h4>

  <p>

    The built-in Logger provides ephemeral console output visible only during manual script execution or while

 developing in the Script Editor. It is not user-facing and does not persist.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Logger is ideal for debugging internal operations, object state, and 

flow control during testing phases.</li>

    <li>
n
 <strong>Example:</strong> During import testing, you might use <code>Logger.log("Importing from: " +

 folderId)</code> to verify folder access permissions.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Access via <code>Logger.log()</code> and view in fiView 
®
 Logsfl during script run</li>

        <li>Should not be used for permanent logging -- instead use <code>ErrorLog</code> or 

<code>ImportLog</code></li>

        <li>Compatible with <code>JSON.stringify()</code> for debugging objects and arrays (see <a 

href="#11.7.2.4">11.7.2.4</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.7.2.2 -- Use for non-UI errors or behind-the-scenes logic -->

<!-- ====================================================== -->

<section id="11.7.2.2">

  <h4>11.7.2.2 -- Use for non-UI errors or behind-the-scenes logic</h4>

  <p>

    The console logger is best suited for hidden operations or internal script events that do not require user

 feedback. It complements spreadsheet-based logs by capturing silent or low-level behaviors.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Many operations (e.g., checking folder access, loading formulas, 

mapping metadata) occur silently and are best monitored via <code>Logger</code> during dev or test 

sessions.</li>

    <li>
n
 <strong>Example:</strong> When running <code>setupFolders()</code>, logger output confirms each 

folder(TM)s UID and color tag assignment, even if it doesn(TM)t affect the UI.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Logged using <code>Logger.log("Phase offset = " + 
f
 + ", Folder UID: " + uid)</code></li>

        <li>Executed within conditionals or callbacks for traceability</li>

        <li>Purged automatically at end of execution -- not user visible unless manually checked</li>

      </ul>

    </li>

  </ul>


</section>

<!-- ====================================================== -->

<!-- 11.7.2.3 -- Difference between Logger.log() and Spreadsheet logs -->

<!-- ====================================================== -->

<section id="11.7.2.3">

  <h4>11.7.2.3 -- Difference between <code>Logger.log()</code> and Spreadsheet logs</h4>

  <p>

    Console-based <code>Logger</code> logs are temporary and meant for developer debugging, while spreadsheet-

based logs like <code>ErrorLog</code> and <code>ImportLog</code> persist across sessions and are user-

accessible.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Logger output disappears after execution and is only accessible to 

script editors. Sheet logs are stored as permanent entries visible to all users.</li>

    <li>
n
 <strong>Example:</strong> <code>Logger.log("b value too low")</code> will not appear in the sheet, 

whereas <code>appendErrorLog("WARNING", sheet, "Regression", "b < 0.01")</code> will persist in 

<code>ErrorLog</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Logger used for development, preview, or exploratory runs</li>

        <li>Persistent spreadsheet logs invoked via helper functions like <code>exportLogAppendEntry()</code> 

and <code>logImportActivity()</code> (see <a href="#11.8.4.4">11.8.4.4</a>)</li>

        <li>Both may be used simultaneously in early-stage tools before UI finalization</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.7.2.4 -- Tips: using JSON.stringify, timestamps -->

<!-- ====================================================== -->

<section id="11.7.2.4">

  <h4>11.7.2.4 -- Tips: using <code>JSON.stringify</code>, timestamps</h4>

  <p>

    When logging complex objects like arrays or dictionaries, use <code>JSON.stringify()</code> to convert 

them into readable string format. Timestamps can be manually added for profiling or performance timing.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Standard <code>Logger.log()</code> output may not show objects 

clearly. Wrapping them in <code>JSON.stringify()</code> ensures clear visibility and structured 

debugging.</li>

    <li>
n
 <strong>Example:</strong> <code>Logger.log(JSON.stringify({A: 4.2, 
f
: 0.8}))</code> outputs 

<code>{"A":4.2,"
f
":0.8}</code> to the log console.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Use <code>Utilities.formatDate(new Date(), timeZone, format)</code> for logging timestamps</li>

        <li>Useful when debugging regression convergence time or interval detection speed</li>

        <li>Helpful in tracing complex objects returned from DriveApp, Sheet ranges, or config blocks</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.7.2.5 -- Limitations in production scripts -->

<!-- ====================================================== -->

<section id="11.7.2.5">

  <h4>11.7.2.5 -- Limitations in production scripts</h4>

  <p>

    The <code>Logger</code> tool is not visible to end users once the script is deployed as a Sheets add-on or

 shared via Google Workspace. All user-facing errors should be routed to <code>ErrorLog</code> or shown in the

 UI.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Relying on <code>Logger</code> in live tools leads to silent failures 

for non-developers. Robust error handling requires persistent logs and toast/alert feedback.</li>

    <li>
n
 <strong>Example:</strong> In a school-wide deployment, students won(TM)t see Logger output when 

importing CSVs -- use <code>toast()</code> and <code>ErrorLog.appendRow()</code> instead.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Use Logger only during <code>onEdit</code>, <code>onOpen</code>, or test-driven sessions</li>

        <li>Route runtime faults to <a href="#11.7.3.5">ErrorLog</a> for audit tracking</li>

        <li>Consider future dashboard to capture errors from deployed triggers and scheduled runs</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.7.3.1 -- Output summaries for each run (e.g., imported sheets) -->

<!-- ====================================================== -->

<section id="11.7.3.1">

  <h4>11.7.3.1 -- Output summaries for each run (e.g., imported sheets)</h4>

  <p>


    Many functions produce summary lines after execution that list what was processed, skipped, or failed. 

These summaries appear in <code>Logger</code> during dev mode or in a sheet log (e.g. <code>ImportLog</code>, 

<code>ExportLog</code>).

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Summaries help developers and advanced users verify tool behavior and 

performance, especially in batch runs.</li>

    <li>
n
 <strong>Example:</strong> After importing CSVs: <code>Logger.log("Imported 4 files. Skipped 2. 

Errors: 1.")</code> or similar appears in a new row of <code>ImportLog</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Common format: count of successes, skips, and errors with timestamps</li>

        <li>Appended to relevant log sheets using <code>appendRow()</code></li>

        <li>Also appears in <a href="#11.8.4.4">exportLogAppendEntry()</a> or <a 

href="#11.8.3.3">logImportActivity()</a> depending on context</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.7.3.2 -- Debugging regression data ranges -->

<!-- ====================================================== -->

<section id="11.7.3.2">

  <h4>11.7.3.2 -- Debugging regression data ranges</h4>

  <p>

    When fitting models to spreadsheet data, logging or previewing the selected range (e.g., time series 

block) ensures that the regression is applied to the correct interval.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Debugging intervals helps confirm that <code>Z1:Z2</code> or manually 

selected blocks (see <a href="#11.4">Section 11.4</a>) are correctly interpreted by the script.</li>

    <li>
n
 <strong>Example:</strong> Logger output: <code>"Fit range: Rows 7OE48 | Time: 0.0OE2.5 s | Valid 

points: 42"</code></li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Logged via <code>Logger.log()</code> or <code>toast()</code> if user-facing</li>

        <li>Checks for empty rows, negative time values, or mismatched bounds</li>

        <li>Can be previewed via modal before commit (see <a href="#11.4.2.3">interval preview</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.7.3.3 -- Printing user inputs (formula, parameters) -->

<!-- ====================================================== -->

<section id="11.7.3.3">

  <h4>11.7.3.3 -- Printing user inputs (formula, parameters)</h4>

  <p>

    For debugging or user confirmation, the system logs key user inputs -- such as formulas, fit ranges, or 

guessed parameters -- to the console or into an export preview block.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This helps verify what was submitted or interpreted by the backend, 

particularly when users enter complex expressions or adjust bounds.</li>

    <li>
n
 <strong>Example:</strong> After user fits a model, logger outputs: <code>Fitting: A*cos(w*t + 

f
)*exp(-b*t)</code> with <code>A = 3.8, w = 6.1, 
f
 = 0.5, b = 0.02</code></li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Values stored and printed from variables used in <code>runRegression()</code> or 

<code>parseFormula()</code></li>

        <li>Logged with <code>Logger.log()</code> or added to sidebar preview (see <a href="#11.5.1.5">formula

 confirmation</a>)</li>

        <li>Inputs may also be echoed into sheet metadata or processing summary cells</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.7.3.4 -- Print stack traces on exception -->

<!-- ====================================================== -->

<section id="11.7.3.4">

  <h4>11.7.3.4 -- Print stack traces on exception</h4>

  <p>

    When an uncaught exception occurs, stack traces can be printed using try/catch blocks and 

<code>e.stack</code>. This allows developers to trace the source of errors in deeper or asynchronous scripts.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> A full stack trace helps identify the function and line number where 

the error originated, improving the ability to diagnose bugs quickly.</li>

    <li>
n
 <strong>Example:</strong> <code>Logger.log(e.toString())</code> and <code>Logger.log(e.stack)</code>

 might show: <code>at runRegression (Code:412)</code></li>

    <li>
n
 <strong>Implementation:</strong>


      <ul>

        <li>Wrap sensitive blocks in <code>try { ... } catch(e) { logError(e) }</code></li>

        <li>Print or store <code>e.stack</code> along with <code>e.message</code> and context details</li>

        <li>Optional: log to ErrorLog with trace attached -- see <a href="#11.7.3.5">11.7.3.5</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.7.3.5 -- Redirection to ErrorLog when needed -->

<!-- ====================================================== -->

<section id="11.7.3.5">

  <h4>11.7.3.5 -- Redirection to <code>ErrorLog</code> when needed</h4>

  <p>

    When a crash or exception occurs in the UI or backend, the error is captured and appended to the 

<code>ErrorLog</code> sheet instead of being shown only in the console. This ensures visibility for users and 

traceability for developers.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This practice bridges the gap between internal debug messages and 

visible sheet-based reporting, especially important in deployed or shared environments.</li>

    <li>
n
 <strong>Example:</strong> If a sidebar tool fails due to missing parameters, the script logs 

<code>"ERROR | Sidebar | Missing variable 
f
 | User: student@school.edu"</code> to <code>ErrorLog</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Exception blocks use <code>appendErrorLog("ERROR", sheet, context, message)</code> or similar 

utility</li>

        <li>Captures context: sheet name, user (if available), timestamp, and action ID</li>

        <li>Used for both fatal and recoverable errors -- complements <a href="#11.7.1.1">initial log 

creation</a> and <a href="#11.7.1.3">severity tagging</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- SECTION 11.8 -- Script Functions (AOEZ Index) -->

<!-- ====================================================== -->

<!-- ====================================================== -->

<!-- 11.8.1.1 -- archiveCSVsAfterImport() -->

<!-- ====================================================== -->

<section id="11.8.1.1">

  <h4>11.8.1.1 -- <code>archiveCSVsAfterImport()</code></h4>

  <p>

    Moves successfully imported CSV files to an fiArchivefl subfolder within the source Drive folder. Helps 

prevent re-importing the same data during future import operations.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This function is part of the import pipeline. After a successful CSV 

import, it automatically relocates the file for archival purposes.</li>

    <li>
n
 <strong>Example:</strong> A physics trial CSV named <code>Trial3.csv</code> is imported and then 

moved to <code>/Imported/Archive</code> to avoid repeat processing.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Uses <code>DriveApp.getFileById(fileId).moveTo(archiveFolder)</code></li>

        <li>Archive folder is created dynamically if not found in parent</li>

        <li>Updates ImportLog with archival confirmation and date (see <a href="#11.2.2.2">Import Log 

tracking</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.1.2 -- applyIntervalReduction(sheet, factor) -->

<!-- ====================================================== -->

<section id="11.8.1.2">

  <h4>11.8.1.2 -- <code>applyIntervalReduction(sheet, factor)</code></h4>

  <p>

    Reduces the number of rows in a dataset by retaining every <code>factor</code><sup>th</sup> row. This is 

used to downsample dense data before fitting or exporting, improving performance and readability.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Useful for smoothing large datasets or reducing file size. It trims 

excess detail while preserving overall shape and structure.</li>

    <li>
n
 <strong>Example:</strong> On a dataset with 5000 rows, <code>applyIntervalReduction(sheet, 5)</code>

 will keep every 5th row, reducing it to ~1000 points.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Iterates through sheet rows and copies only those that match the reduction index</li>

        <li>Works on a temporary clone of the sheet if original data must be preserved</li>

        <li>Used prior to regression (see <a href="#11.8.4.2">runIntervalAnalysisWithReduction()</a>)</li>

      </ul>


    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.1.3 -- autoUpdateSystemSheetsList() -->

<!-- ====================================================== -->

<section id="11.8.1.3">

  <h4>11.8.1.3 -- <code>autoUpdateSystemSheetsList()</code></h4>

  <p>

    Dynamically updates the internal list of system sheets (e.g., config, logs, metadata) by scanning all 

spreadsheet tabs. Ensures that non-data sheets are excluded from automated processing.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Helps regression tools and batch exports avoid modifying sheets that 

are part of the setup or system backend.</li>

    <li>
n
 <strong>Example:</strong> Detects sheets like <code>ErrorLog</code>, <code>HelpUI</code>, or 

<code>ImportConfig</code> and ensures they're added to the <code>SYSTEM_SHEETS</code> array.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Uses <code>SpreadsheetApp.getActiveSpreadsheet().getSheets()</code> to loop through tabs</li>

        <li>Identifies system sheets via name pattern or metadata flag</li>

        <li>Updates global or script-level <code>SYSTEM_SHEETS</code> array accordingly (used in <a 

href="#11.8.2.2">deleteNegativeRowsScope()</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.1.4 -- addHomePageMetadata() -->

<!-- ====================================================== -->

<section id="11.8.1.4">

  <h4>11.8.1.4 -- <code>addHomePageMetadata()</code></h4>

  <p>

    Inserts a metadata block at the top of each home page sheet. Includes folder name, unique ID (UID), Drive 

folder color tag, and other configuration details used by exports or visual identification.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Provides a consistent header block that links the sheet to its source 

folder and visual identity. Also aids in automated exports and UI styling.</li>

    <li>
n
 <strong>Example:</strong> The red folder(TM)s homepage includes a banner at the top: <code>Folder: 

fiTrials - Red Cartfl | UID: RCT1 | Color: #ff0000</code></li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Inserts metadata in merged cells at the top (e.g., A1:D3)</li>

        <li>Reads Drive properties from linked folder using <code>DriveApp.getFolderById()</code></li>

        <li>Used by the homepage builder (see <a href="#10.6.3.3">homepage layout rules</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.1.5 -- cleanCurrentSheet() -->

<!-- ====================================================== -->

<section id="11.8.1.5">

  <h4>11.8.1.5 -- <code>cleanCurrentSheet()</code></h4>

  <p>

    Cleans the active sheet by removing blank rows, trimming whitespace, and clearing invalid entries. This 

prepares data for regression analysis or export without requiring manual editing.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Ensures the sheet is in a consistent and clean state before downstream

 processing (e.g., export to CSV or MATLAB).</li>

    <li>
n
 <strong>Example:</strong> Before fitting a model, running this function removes 10 blank rows at the

 bottom and trims spaces from the header cells.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Loops through rows using <code>.getDataRange().getValues()</code> and filters blanks</li>

        <li>Whitespace removed using <code>.trim()</code> or <code>.replace(/\s+/g, " ")</code></li>

        <li>Called automatically by tools like <a href="#11.8.4.3">runRegression()</a> and <a 

href="#11.8.3.2">getNonSystemSheets()</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.2.1 -- deleteNegativeTimeRows() -->

<!-- ====================================================== -->

<section id="11.8.2.1">

  <h4>11.8.2.1 -- <code>deleteNegativeTimeRows()</code></h4>

  <p>

    Deletes rows in the active sheet where the value in column A (time) is negative. Used to remove pre-motion


 or invalid recordings before analysis.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Ensures that time always starts at or after zero, which is a common 

requirement in motion analysis, damping regression, and export tools.</li>

    <li>
n
 <strong>Example:</strong> If rows 1OE4 contain time values like -0.5, -0.2, they are removed and the 

dataset starts from 0.0.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Reads values from column A, checks <code>if (value &lt; 0)</code>, and deletes corresponding 

row</li>

        <li>Logs number of rows deleted to <a href="#11.7.3.1">output summary</a> or <a 

href="#11.7.1.2">ErrorLog</a> if applicable</li>

        <li>Can be invoked manually or from a menu action (e.g., <a href="#10.5.3.2">data cleaning 

tools</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.2.2 -- deleteNegativeRowsScope() -->

<!-- ====================================================== -->

<section id="11.8.2.2">

  <h4>11.8.2.2 -- <code>deleteNegativeRowsScope()</code></h4>

  <p>

    Extends the logic of <a href="#11.8.2.1"><code>deleteNegativeTimeRows()</code></a> to operate across 

multiple sheets based on user-selected scope. It allows cleaning the active sheet, first N sheets, or all non-

system tabs.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Ensures time-series consistency across datasets, especially after bulk

 CSV imports. Helps prepare sheets for regression or export in batch workflows.</li>

    <li>
n
 <strong>Example:</strong> User selects "Clean first 3 sheets" 
®
 negative rows in <code>Trial 

1</code>, <code>Trial 2</code>, and <code>Trial 3</code> are deleted automatically.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Scope controlled by parameter (e.g. <code>scope = 'FIRST3'</code>) or prompt</li>

        <li>Skips sheets listed in <a href="#11.8.1.3"><code>SYSTEM_SHEETS</code></a></li>

        <li>Logs affected sheets and counts to <a href="#11.2.2.2">ImportLog</a> or <a 

href="#11.7.1.2">ErrorLog</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.2.3 -- editDataProcessingFormula() -->

<!-- ====================================================== -->

<section id="11.8.2.3">

  <h4>11.8.2.3 -- <code>editDataProcessingFormula()</code></h4>

  <p>

    Opens a prompt or sidebar interface that allows users to edit the regression formula used on the 

<code>Processing</code> sheet. Supports both LaTeX and JavaScript-style math input.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Lets advanced users define or tweak the model equation used for 

fitting, rather than relying on built-in defaults like damped cosine.</li>

    <li>
n
 <strong>Example:</strong> User enters <code>A*sin(w*t + 
f
)*exp(-b*t)</code> which is then previewed 

in LaTeX: <code>A\sin(\omega t + \phi)e^{-bt}</code></li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Launched via menu or <a href="#11.5.1.1">formula wizard modal</a></li>

        <li>Formula validated using regex; previewed using <a href="#11.5.3.2">MathJax renderer</a></li>

        <li>Stored in metadata block or named cell for reuse and export (see <a href="#10.4.2.3">custom model 

metadata</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.2.4 -- exportLogAppendEntry() -->

<!-- ====================================================== -->

<section id="11.8.2.4">

  <h4>11.8.2.4 -- <code>exportLogAppendEntry()</code></h4>

  <p>

    Appends a structured entry to the <code>ExportLog</code> sheet after a successful or failed export. 

Includes metadata such as timestamp, filename, UID, sheet name, and export type.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This function is essential for audit tracking and reproducibility. 

Every export action is logged for later inspection or error review.</li>

    <li>
n
 <strong>Example:</strong> An entry might look like: <code>2025-06-15, Processing.csv, UID: BLK4, 

Regression Export, Status: Success</code></li>


    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Triggered automatically after export to CSV, LaTeX, or MATLAB</li>

        <li>Uses <code>ExportLog.appendRow([timestamp, uid, filename, status, sheet, mode])</code></li>

        <li>Related to <a href="#11.2.2.5">cross-referenced logging</a> and <a href="#11.7.3.5">ErrorLog 

fallback</a> for failures</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.2.5 -- fetchFormulaParameters() *(planned)* -->

<!-- ====================================================== -->

<section id="11.8.2.5">

  <h4>11.8.2.5 -- <code>fetchFormulaParameters()</code> <span style="color:grey;">(planned)</span></h4>

  <p>

    <em>This utility is planned for future versions.</em> It will parse user-entered formulas to automatically

 extract all parameter variables (e.g., A, b, w, 
f
) to populate configuration tables or guess prompts.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Helps reduce user workload by inferring required parameters directly 

from the model equation. Prevents mismatches between formula and available inputs.</li>

    <li>
n
 <strong>Example:</strong> From <code>A*cos(w*t + 
f
)*exp(-b*t)</code> the tool detects: <code>[A, w, 

f
, b]</code> and prompts for initial guesses.</li>

    <li>
n
 <strong>Implementation (planned):</strong>

      <ul>

        <li>Parse formula using regex or a math expression tree</li>

        <li>Filter out reserved keywords, functions, and known constants</li>

        <li>Output parameter list to named range or side panel (see <a href="#11.5.2.1">auto-detect 

variables</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.3.1 -- getFolderInfoForSheet(sheetName) -->

<!-- ====================================================== -->

<section id="11.8.3.1">

  <h4>11.8.3.1 -- <code>getFolderInfoForSheet(sheetName)</code></h4>

  <p>

    Retrieves metadata about the Google Drive folder linked to a given sheet, including the folder(TM)s name, 

color tag, UID, and ID. Used to maintain the sheetOEfolder relationship throughout the import and export 

process.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This function is central to identifying where a sheet(TM)s data 

originated and where to store its outputs. Ensures Drive exports don(TM)t mismatch folders.</li>

    <li>
n
 <strong>Example:</strong> For the sheet <code>Red Cart Trials</code>, the function returns:

      <ul>

        <li><code>{folderName: "Red Trials", uid: "RED2", color: "#ff0000"}</code></li>

      </ul>

    </li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Matches sheet name to UID stored in metadata sheet or config block</li>

        <li>Uses <code>DriveApp.getFolderById()</code> to fetch folder properties</li>

        <li>Feeds results into <a href="#11.8.1.4">addHomePageMetadata()</a> and export tools</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.3.2 -- getNonSystemSheets() -->

<!-- ====================================================== -->

<section id="11.8.3.2">

  <h4>11.8.3.2 -- <code>getNonSystemSheets()</code></h4>

  <p>

    Returns a list of sheet names that are not included in the global <code>SYSTEM_SHEETS</code> array. Used 

to filter data sheets for regression, export, or cleanup actions.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Helps restrict actions to only sheets containing user-imported data, 

ignoring logs, config tabs, or UI templates.</li>

    <li>
n
 <strong>Example:</strong> If the spreadsheet contains 10 tabs and 4 are system sheets 

(<code>HelpUI</code>, <code>ErrorLog</code>, etc.), only the remaining 6 are returned for batch fitting.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Uses <code>SpreadsheetApp.getActiveSpreadsheet().getSheets()</code> with filter condition</li>

        <li>References live array <code>SYSTEM_SHEETS</code> (auto-updated via <a 

href="#11.8.1.3">11.8.1.3</a>)</li>

        <li>Called by functions like <a href="#11.8.2.2">deleteNegativeRowsScope()</a> and <a 

href="#11.8.4.3">runRegression()</a></li>


      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.3.3 -- logImportActivity(message) -->

<!-- ====================================================== -->

<section id="11.8.3.3">

  <h4>11.8.3.3 -- <code>logImportActivity(message)</code></h4>

  <p>

    Logs messages related to file imports, such as successful reads, skipped files, or error conditions. 

Messages can be printed to the Logger during development or appended to the <code>ImportLog</code> for 

recordkeeping.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Provides traceability for automated or user-triggered CSV imports. 

Supports debugging and prevents silent failures.</li>

    <li>
n
 <strong>Example:</strong> On successful import of a file, the message <code>"Imported: Trial3.csv 

from folder UID=BLK4"</code> is recorded in the Logger and <code>ImportLog</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Function accepts a string or array of status messages</li>

        <li>Can write to <code>Logger.log()</code>, a custom modal, or append a new row to 

<code>ImportLog</code></li>

        <li>Often used inside loops from <a href="#11.2.2.1">manual/scheduled imports</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.3.4 -- moveActiveSheet(index) -->

<!-- ====================================================== -->

<section id="11.8.3.4">

  <h4>11.8.3.4 -- <code>moveActiveSheet(index)</code></h4>

  <p>

    Moves the currently active sheet to a new tab position in the spreadsheet. This function helps group 

related sheets (e.g., by folder or trial order) for easier navigation or sorting.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Useful when organizing sheets after batch imports or metadata 

assignment. Improves workflow clarity in large spreadsheets.</li>

    <li>
n
 <strong>Example:</strong> After importing and tagging sheets from three different folders, 

<code>moveActiveSheet(2)</code> places the selected tab third in line.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Uses <code>SpreadsheetApp.getActiveSpreadsheet().setActiveSheet(sheet).setActiveSheet(sheet).moveA

ctiveSheet(index)</code></li>

        <li>Tab index is 0-based: <code>0 = first tab</code>, <code>1 = second tab</code>, etc.</li>

        <li>Used internally by folder homepage generation (<a href="#10.6.3.4">10.6.3.4</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.3.5 -- makeSidebar(html, title) -->

<!-- ====================================================== -->

<section id="11.8.3.5">

  <h4>11.8.3.5 -- <code>makeSidebar(html, title)</code></h4>

  <p>

    Opens a custom sidebar in the Google Sheets UI with the provided HTML content and optional title. Used 

across the system for Help, LaTeX preview, regression summaries, and log displays.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Simplifies the process of opening a styled sidebar with dynamic 

content. Enables all HTML-powered UIs in the toolset.</li>

    <li>
n
 <strong>Example:</strong> <code>makeSidebar(htmlHelpContent, "HelpDialog")</code> creates the Help 

menu sidebar with all collapsible documentation panels.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Calls <code>HtmlService.createHtmlOutput(html)</code> followed by <code>.setTitle(title)</code> 

and <code>SpreadsheetApp.getUi().showSidebar(...)</code></li>

        <li>Reusable wrapper function used by <a href="#11.8.4.4">showHelpFunctions1()</a> and <a 

href="#11.8.5.4">viewErrorLog()</a></li>

        <li>Supports styling via embedded CSS and modular JS injection (see <a href="#10.3.3.1">sidebar 

theming</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.4.1 -- normalizeFileName(fileName) -->


<!-- ====================================================== -->

<section id="11.8.4.1">

  <h4>11.8.4.1 -- <code>normalizeFileName(fileName)</code></h4>

  <p>

    Cleans a given filename string for compatibility with Drive and operating system rules. Replaces illegal 

characters and enforces a consistent naming convention across exports.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Prevents file naming issues when exporting CSVs, LaTeX files, or 

MATLAB scripts. Ensures safe Drive uploads and local downloads.</li>

    <li>
n
 <strong>Example:</strong> The name <code>"Trial 3: ForceOEDisplacement?"</code> is converted to 

<code>"Trial_3_-_Force-Displacement"</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Replaces characters like <code>?</code>, <code>:</code>, <code>/</code>, <code>\</code>, and 

spaces with underscores or dashes</li>

        <li>Called before Drive export, ZIP packaging, and sidebar previews</li>

        <li>Also used in <a href="#10.8.2.4">export packager</a> and <a href="#11.8.4.4">log entry 

generator</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.4.2 -- runIntervalAnalysisWithReduction() -->

<!-- ====================================================== -->

<section id="11.8.4.2">

  <h4>11.8.4.2 -- <code>runIntervalAnalysisWithReduction()</code></h4>

  <p>

    Combines interval-based selection (Z1:Z2 or manual) with data reduction to produce a streamlined subset of

 the dataset. Ideal for quickly previewing behavior or reducing size for export.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Enables both interval filtering and row downsampling in one function 

call. Particularly useful when exporting lightweight versions of trials.</li>

    <li>
n
 <strong>Example:</strong> A user selects Z1 = 3, Z2 = 73 with a reduction factor of 5. The resulting

 dataset contains rows 3, 8, 13, ..., 73 only.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Reads Z1/Z2 or manual range from sheet or UI (<a href="#11.4.2.1">selection detection</a>)</li>

        <li>Applies <a href="#11.8.1.2">applyIntervalReduction()</a> on the selected block</li>

        <li>Optionally writes results to preview sheet or feeds into <a href="#11.8.4.3">regression 

engine</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.4.3 -- runRegression() -->

<!-- ====================================================== -->

<section id="11.8.4.3">

  <h4>11.8.4.3 -- <code>runRegression()</code></h4>

  <p>

    Central function that performs regression analysis on a selected dataset. Supports multiple fit types 

(e.g., damped cosine, exponential decay), custom models, and parameter inputs.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This is the core data modeling tool for Physics Data Scripts. Uses 

user guesses or auto-generated values to fit a curve to time-series data.</li>

    <li>
n
 <strong>Example:</strong> Fitting <code>A*cos(w*t + 
f
)*exp(-b*t)</code> to rows 10OE60 results in 

estimated values for A, w, 
f
, b with a displayed R².</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Prepares time and y-data from selected range (cleans via <a 

href="#11.8.1.5">cleanCurrentSheet()</a>)</li>

        <li>Chooses algorithm: Gauss-Newton, Nelder-Mead, LevenbergOEMarquardt, etc. (see <a 

href="#10.8.1.2">algorithm selection</a>)</li>

        <li>Stores results in Processing tab, including fit summary, chart, and residuals</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.4.4 -- showHelpFunctions1() -->

<!-- ====================================================== -->

<section id="11.8.4.4">

  <h4>11.8.4.4 -- <code>showHelpFunctions1()</code></h4>

  <p>

    Displays the HelpDialog sidebar containing all structured documentation. Sections are organized into 

collapsible panels with anchors, categories, and links to glossary entries.

  </p>

  <ul>


    <li>
n
 <strong>Explanation:</strong> Offers integrated help access inside the spreadsheet. Documentation is

 always up to date with UI features and export formats.</li>

    <li>
n
 <strong>Example:</strong> User clicks <code>Help 
®
 Open Help Sidebar</code> 
®
 the full documentation

 loads with quick links to sections like <code>11.5 -- Formula Wizard</code> and <code>11.2 -- CSV 

Import</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Calls <code>makeSidebar(helpHTML, "HelpDialog")</code> with pre-generated HTML string (see <a 

href="#11.8.3.5">11.8.3.5</a>)</li>

        <li>Anchors use IDs like <code>#11.5.2.1</code> or <code>#glossary-UID</code></li>

        <li>Help string built using static HTML file or generated via <code>HtmlService</code></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.4.5 -- setupFolders() -->

<!-- ====================================================== -->

<section id="11.8.4.5">

  <h4>11.8.4.5 -- <code>setupFolders()</code></h4>

  <p>

    Initializes metadata for each imported sheet by linking it to a Google Drive folder. Assigns a unique 

identifier (UID), extracts folder color, and creates homepage content as needed.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This setup step is critical for Drive-based organization. It visually 

links spreadsheet tabs to source folders and prepares them for export packaging.</li>

    <li>
n
 <strong>Example:</strong> Sheet <code>Trial - Green</code> is mapped to Drive folder ID 

<code>1a2B3c4D</code> with UID <code>GRN1</code> and tag color <code>#00ff00</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Scans all non-system sheets, checks for folder match using 

<code>getFolderInfoForSheet()</code></li>

        <li>Writes UID and color to metadata block at top of sheet (<a 

href="#11.8.1.4">addHomePageMetadata()</a>)</li>

        <li>Required for ZIP, PDF, and LaTeX exports grouped by folder</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.5.1 -- toggleHelpDisplay() -->

<!-- ====================================================== -->

<section id="11.8.5.1">

  <h4>11.8.5.1 -- <code>toggleHelpDisplay()</code></h4>

  <p>

    Toggles the visibility of the HelpDialog sidebar. If the sidebar is already open, it closes it; otherwise,

 it opens the Help panel using <code>showHelp()</code>.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Useful for minimizing interface clutter or quickly reopening the 

documentation. Helps prevent duplicate instances of the same sidebar.</li>

    <li>
n
 <strong>Example:</strong> If HelpDialog is open and the user clicks the menu again, 

<code>toggleHelpDisplay()</code> will hide it. Clicking again shows it.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Uses internal flag or UI detection to check if the HelpDialog is active</li>

        <li>Calls <a href="#11.8.4.4"><code>showHelpFunctions1()</code></a> when opening, or hides sidebar if 

already shown</li>

        <li>May use user property or transient flag to track state between UI sessions</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.5.2 -- updateErrorLogColorScale() -->

<!-- ====================================================== -->

<section id="11.8.5.2">

  <h4>11.8.5.2 -- <code>updateErrorLogColorScale()</code></h4>

  <p>

    Updates the color-coding in the <code>ErrorLog</code> sheet to use a grayscale scheme (black, grey, white)

 instead of the default redOEyellowOEgreen. Improves visual consistency and accessibility.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Designed to harmonize UI color schemes and avoid confusion with 

spreadsheet tab colors. Also improves accessibility for users with color vision deficiencies.</li>

    <li>
n
 <strong>Example:</strong> <code>ERROR</code> entries get a black background with white text; 

<code>WARNING</code> rows are light grey; <code>INFO</code> rows are white with black text.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Applies conditional formatting or cell background/text color updates on the <code>ErrorLog</code> 

range</li>


        <li>Colors assigned based on <code>Log Level</code> field (see <a href="#11.7.1.3">11.7.1.3 -- Log 

levels</a>)</li>

        <li>Triggered manually from menu or after new log entry creation</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.5.3 -- updateDataSheet() -->

<!-- ====================================================== -->

<section id="11.8.5.3">

  <h4>11.8.5.3 -- <code>updateDataSheet()</code></h4>

  <p>

    Refreshes the active sheet with new data that has been processed, imported, or cleaned. Can be used to 

reload formulas, update formatting, or repopulate content blocks.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Ensures consistency after transformations like row filtering, formula 

recalculation, or export preparation.</li>

    <li>
n
 <strong>Example:</strong> After trimming rows and applying a regression formula, the user clicks 

fiUpdate Datafl and the sheet reflects all changes, with headers and color coding restored.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Clears outdated ranges and writes updated values from memory or helper sheets</li>

        <li>Reapplies formatting such as borders, background color, or font styles</li>

        <li>May auto-run after <a href="#11.8.2.2">deleteNegativeRowsScope()</a> or <a 

href="#11.8.4.2">runIntervalAnalysisWithReduction()</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.5.4 -- viewErrorLog() -->

<!-- ====================================================== -->

<section id="11.8.5.4">

  <h4>11.8.5.4 -- <code>viewErrorLog()</code></h4>

  <p>

    Opens a sidebar view of the <code>ErrorLog</code> sheet with interactive sorting and filtering. Allows 

users to browse logged errors by time, type, sheet, and message content.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This user-facing viewer provides a clean interface to examine script 

errors and warnings without navigating the sheet manually.</li>

    <li>
n
 <strong>Example:</strong> Clicking fiView Logfl displays all errors with dropdown filters for 

<code>Sheet</code>, <code>Status</code>, and a search field for <code>Keyword</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Reads entries from <code>ErrorLog</code> into a custom HTML sidebar (see <a 

href="#11.8.3.5">makeSidebar()</a>)</li>

        <li>Filters applied via JavaScript in the sidebar HTML</li>

        <li>Supports click-to-highlight in-sheet or export summary linkage (see <a href="#11.7.3.5">log 

redirection</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.8.5.5 -- zeroNegativeRows() <span style="color:grey;">(planned utility)</span> -->

<!-- ====================================================== -->

<section id="11.8.5.5">

  <h4>11.8.5.5 -- <code>zeroNegativeRows()</code> <span style="color:grey;">(planned utility)</span></h4>

  <p>

    Planned utility to automatically zero or delete rows with negative time values across a user-defined 

scope. Aims to simplify cleanup workflows and prevent analysis on invalid time segments.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Unlike <a href="#11.8.2.1">deleteNegativeTimeRows()</a>, this may also

 allow replacing negative values with zero or interpolated values rather than deletion.</li>

    <li>
n
 <strong>Example:</strong> If a dataset has time entries like <code>-0.3</code>, <code>-0.1</code>, 

this utility may replace them with <code>0</code> or skip them based on user setting.</li>

    <li>
n
 <strong>Implementation (planned):</strong>

      <ul>

        <li>Scope control: active sheet, first N sheets, or all non-system tabs</li>

        <li>Mode switch: <code>delete</code> vs <code>zero</code> vs <code>interpolate</code></li>

        <li>Will complement existing tools in <a href="#11.8.2.x">11.8.2.x block</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.9.1.1 -- Simple Harmonic Motion: F = -kx -->


<!-- ====================================================== -->

<section id="11.9.1.1">

  <h4>11.9.1.1 -- Simple Harmonic Motion: <code>F = -kx</code></h4>

  <p>

    Describes the fundamental physics model of simple harmonic motion (SHM), in which a restoring force is 

directly proportional to the displacement from equilibrium.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> SHM is a core concept in oscillations and wave mechanics. The force 

equation <code>F = -kx</code> defines the basis of many mechanical systems modeled in this tool.</li>

    <li>
n
 <strong>Example:</strong> A spring stretched by 5
n
cm with a spring constant of 20
n
N/m experiences a 

restoring force of <code>-1
n
N</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Used to justify cosine/sine-based fits in <a href="#11.3.2.1">damped regression formulas</a></li>

        <li>Appears in <a href="#11.3.1.1">A: Amplitude</a> and <a href="#11.9.3.1">energy 

relationships</a></li>

        <li>SHM modeling foundational to <a href="#10.10.2.2">MATLAB export equations</a> and animation 

intervals</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.9.1.2 -- Periodic motion and restoring force -->

<!-- ====================================================== -->

<section id="11.9.1.2">

  <h4>11.9.1.2 -- Periodic motion and restoring force</h4>

  <p>

    Periodic motion refers to any motion that repeats in cycles. The restoring force is what brings the object

 back toward equilibrium, providing the oscillatory behavior seen in many physics systems.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> All oscillatory models rely on a restoring mechanism. Without this, 

the motion would not repeat or would diverge.</li>

    <li>
n
 <strong>Example:</strong> A mass on a spring oscillates due to the restoring force provided by the 

spring; if friction is negligible, this continues indefinitely.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Explains the presence of <code>w</code> (angular frequency) in <a href="#11.3.1.3">fit 

equations</a></li>

        <li>Helps define the shape of the model in <a href="#11.3.2.4">trigonometric fits</a></li>

        <li>Links to <a href="#11.9.1.5">graphical representation</a> used in sidebar plots</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.9.1.3 -- Damping factor and exponential decay -->

<!-- ====================================================== -->

<section id="11.9.1.3">

  <h4>11.9.1.3 -- Damping factor and exponential decay</h4>

  <p>

    The damping factor <code>b</code> represents resistive forces like friction or drag that cause 

oscillations to decrease in amplitude over time. This decay is typically modeled using an exponential 

function.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> In real systems, energy is lost due to friction or air resistance, 

making the amplitude of oscillation shrink exponentially. The term <code>e^{-bt}</code> captures this.</li>

    <li>
n
 <strong>Example:</strong> A pendulum swinging through air will gradually lose energy and slow down --

 modeled as <code>A·cos(wt + 
f
)·e^{-bt}</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Damping parameter <code>b</code> appears in <a href="#11.3.1.2">regression coefficients</a> and <a

 href="#11.3.2.2">model behavior</a></li>

        <li>Energy decay tracked in <a href="#11.9.3.2">E 
µ
 e^{-2bt}</a> and verified through amplitude 

graphs</li>

        <li>Displayed in sidebar fit results and used in export equations like <a href="#10.10.4.3">MATLAB 

model blocks</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.9.1.4 -- Amplitude and energy interpretation -->

<!-- ====================================================== -->

<section id="11.9.1.4">

  <h4>11.9.1.4 -- Amplitude and energy interpretation</h4>

  <p>

    Amplitude represents the maximum displacement from the equilibrium point. In physical systems, amplitude 

also relates directly to energy, with larger amplitudes indicating higher mechanical energy.


  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> The amplitude squared is proportional to the energy stored in a spring

 system: <code>E = ½kA²</code>.</li>

    <li>
n
 <strong>Example:</strong> If amplitude is 0.1
n
m and spring constant is 100
n
N/m, then <code>E = 0.5 ×

 100 × 0.01 = 0.5
n
J</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Amplitude <code>A</code> shown in <a href="#11.3.1.1">fit results</a> and <a href="#11.3.3.3">sum 

of squares</a> interpretation</li>

        <li>Used to compare energy decay in <a href="#11.9.3.1">KE and PE tracking</a> and <a 

href="#11.9.3.2">energy loss plots</a></li>

        <li>Plotted in data views and annotated in fit summary overlays (see <a href="#10.10.3.3">preview 

formatting</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.9.1.5 -- Graphical representation -->

<!-- ====================================================== -->

<section id="11.9.1.5">

  <h4>11.9.1.5 -- Graphical representation</h4>

  <p>

    Simple harmonic motion and damped motion are commonly visualized using sinusoidal graphs. The undamped 

model shows constant amplitude, while damping appears as an exponentially decaying envelope.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Visualizing oscillation patterns helps verify model accuracy. The 

shape of the waveform (sinusoidal + decay) confirms correct use of parameters like <code>A</code>, 

<code>w</code>, <code>
f
</code>, and <code>b</code>.</li>

    <li>
n
 <strong>Example:</strong> In the graph of <code>A·cos(wt + 
f
)·e^{-bt}</code>, the peaks of the wave 

trace out the envelope <code>±A·e^{-bt}</code>, forming a decaying boundary.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Regression preview charts in the sidebar use this visualization style (see <a 

href="#10.9.3.3">plotting preview format</a>)</li>

        <li>Used to compare raw vs fitted data in the <code>Processing</code> and <code>Results</code> 

sheets</li>

        <li>Envelope structure calculated from regression output (<a href="#11.3.2.5">combined motion + 

decay</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.9.2.1 -- Linear force-extension relation -->

<!-- ====================================================== -->

<section id="11.9.2.1">

  <h4>11.9.2.1 -- Linear force-extension relation</h4>

  <p>

    Hooke(TM)s Law defines a linear relationship between the applied force and the extension of a spring or 

elastic material: <code>F = -kx</code>. Valid only within the elastic (non-permanent) deformation region.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> This relation is essential to determining the spring constant 

<code>k</code> and modeling oscillatory behavior. It forms the mechanical basis for SHM systems.</li>

    <li>
n
 <strong>Example:</strong> A spring stretched by 2
n
cm with a spring constant of 50
n
N/m has a 

restoring force of <code>-1.0
n
N</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Used in <a href="#11.9.2.2">spring constant estimation</a> and <a href="#11.9.3.1">energy 

calculations</a></li>

        <li>Provides the physical grounding for fit models in <a href="#11.3.2.1">regression engine</a></li>

        <li>Experimental data often used to derive <code>k</code> via slope of <code>F</code> vs 

<code>x</code> graphs</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.9.2.2 -- Spring constant k -->

<!-- ====================================================== -->

<section id="11.9.2.2">

  <h4>11.9.2.2 -- Spring constant <code>k</code></h4>

  <p>

    The spring constant <code>k</code> quantifies the stiffness of a spring. It determines how much force is 

needed to produce a certain extension, with units in N/m (Newtons per meter).

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> A larger <code>k</code> means a stiffer spring that resists 

deformation. It directly affects the oscillation frequency and energy of SHM systems.</li>


    <li>
n
 <strong>Example:</strong> If a 1
n
N force extends a spring by 0.01
n
m, then <code>k = 1
n
N / 0.01
n
m = 

100
n
N/m</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Derived from the slope of <code>F</code> vs <code>x</code> plots in experimental contexts</li>

        <li>Used in <a href="#11.9.3.1">kinetic/potential energy calculations</a> and <a 

href="#11.9.3.2">energy decay</a></li>

        <li>Important parameter in LaTeX and MATLAB model exports (<a href="#10.10.4.1">parameter list 

generation</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.9.2.3 -- Negative sign as restoring indicator -->

<!-- ====================================================== -->

<section id="11.9.2.3">

  <h4>11.9.2.3 -- Negative sign as restoring indicator</h4>

  <p>

    In Hooke(TM)s Law, the negative sign in <code>F = -kx</code> indicates that the force acts in the opposite 

direction of displacement. This is what causes the object to return to equilibrium.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> The restoring nature of the force ensures oscillatory behavior -- 

without the negative sign, the force would push the object further away from rest.</li>

    <li>
n
 <strong>Example:</strong> If a spring is stretched 3
n
cm to the right, the force pulls 3
n
cm to the 

left -- hence, the force is negative with respect to displacement.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Modeled in regression curves using cosine/sine functions with restoring force implied</li>

        <li>Referenced in <a href="#11.9.1.1">SHM foundation</a> and phase behavior (<a href="#11.3.1.4">
f
: 

Phase offset</a>)</li>

        <li>May appear in annotated math exports as LaTeX footnotes</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.9.2.4 -- Dynamic vs static equilibrium -->

<!-- ====================================================== -->

<section id="11.9.2.4">

  <h4>11.9.2.4 -- Dynamic vs static equilibrium</h4>

  <p>

    Equilibrium refers to the state where the net force on an object is zero. <em>Static equilibrium</em> 

means the object is at rest. <em>Dynamic equilibrium</em> occurs when an object oscillates around a stable 

point with balanced forces over time.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> In SHM systems, dynamic equilibrium is more relevant -- the object 

continuously passes through the rest position while energy shifts between kinetic and potential forms.</li>

    <li>
n
 <strong>Example:</strong> A mass hanging at rest from a spring is in static equilibrium. Once 

displaced and released, it oscillates around that point in dynamic equilibrium.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Used to explain behavior of <a href="#11.3.1.5">time variable</a> and <a href="#11.3.2.1">damped 

cosine models</a></li>

        <li>Helps differentiate <code>x
n
</code> (offset) from instantaneous displacement in <a 

href="#11.3.1.6">model origin</a></li>

        <li>Supports sidebar previews of fitted motion (see <a href="#10.10.5.3">data preview panels</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.9.2.5 -- Limitations and nonlinearities -->

<!-- ====================================================== -->

<section id="11.9.2.5">

  <h4>11.9.2.5 -- Limitations and nonlinearities</h4>

  <p>

    Hooke(TM)s Law only applies in the linear elastic region of materials. Beyond a certain deformation, most 

systems exhibit nonlinear behavior, where <code>F 
¹
 -kx</code>. These cases require higher-order models.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Linear fits are good approximations for small displacements. Larger 

deformations can cause plastic deformation or require polynomial or empirical models.</li>

    <li>
n
 <strong>Example:</strong> If a spring stretches more than 10% of its natural length, its behavior 

may deviate from the linear slope and follow a curve like <code>F = -kx - 
a
x³</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Warnings may be shown in regression summary if <code>R²</code> drops below threshold (see <a 

href="#11.3.3.5">fit quality</a>)</li>

        <li>Users can adjust fit model using <a href="#11.5.1.1">Formula Wizard</a> to account for nonlinear 


terms</li>

        <li>Noted in tooltip descriptions in sidebar for <a href="#11.3.2.4">nonlinear fit selection</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.9.3.1 -- Kinetic, potential, and total energy -->

<!-- ====================================================== -->

<section id="11.9.3.1">

  <h4>11.9.3.1 -- Kinetic, potential, and total energy</h4>

  <p>

    In simple harmonic motion, energy oscillates between kinetic energy (KE) and potential energy (PE). The 

total mechanical energy remains constant in ideal systems, described by:

    <br><code>E_total = KE + PE = ½mv² + ½kx²</code>

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> As the mass moves, velocity and displacement change, causing energy to

 shift form but remain conserved (in the absence of damping).</li>

    <li>
n
 <strong>Example:</strong> At maximum displacement, <code>v = 0</code> and energy is fully potential;

 at equilibrium position, <code>x = 0</code> and energy is fully kinetic.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Used in <a href="#11.3.2.2">damped motion regression</a> to explain energy behavior over time</li>

        <li>Referenced in <a href="#11.9.3.4">integral-based energy loss estimation</a></li>

        <li>May be plotted in sidebar previews to visualize energy transformation during motion</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.9.3.2 -- Exponential energy decay: E 
µ
 e<sup>-2bt</sup> -->

<!-- ====================================================== -->

<section id="11.9.3.2">

  <h4>11.9.3.2 -- Exponential energy decay: <code>E 
µ
 e^{-2bt}</code></h4>

  <p>

    In damped systems, total mechanical energy decreases exponentially with time due to non-conservative 

forces. Since amplitude decays as <code>e^{-bt}</code>, energy decays as <code>e^{-2bt}</code>.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> The squared dependence comes from energy being proportional to the 

square of amplitude. This is consistent with decay in both KE and PE.</li>

    <li>
n
 <strong>Example:</strong> If damping constant <code>b = 0.05</code>, energy falls to about 13.5% of 

its initial value by <code>t = 20
n
s</code> since <code>e^{-1} 
»
 0.367</code> and <code>e^{-2} 
»
 

0.135</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Used in visualizations alongside amplitude envelope plots (see <a href="#11.9.3.5">envelope 

visualization</a>)</li>

        <li>Supports checks in regression analysis when interpreting <code>b</code> from model decay</li>

        <li>Can be toggled in sidebar charts for energy vs amplitude overlays</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.9.3.3 -- Curve flattening over time -->

<!-- ====================================================== -->

<section id="11.9.3.3">

  <h4>11.9.3.3 -- Curve flattening over time</h4>

  <p>

    In damped oscillatory systems, the visible wave gradually flattens as time progresses due to decreasing 

amplitude. This flattening results from energy dissipation and is modeled by an exponential envelope.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> The oscillating signal maintains its frequency, but its height 

(amplitude) diminishes over time. The wave appears to fiflatten out.fl</li>

    <li>
n
 <strong>Example:</strong> A wave with initial amplitude of 5
n
cm might appear almost flat after 30
n
s 

if the damping constant is high. The envelope curve hugs the x-axis.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Used to validate damping coefficient <code>b</code> via <a href="#11.3.2.2">model 

envelope</a></li>

        <li>Supports regression quality checks by matching decay profile in data</li>

        <li>Visualized using <code>±A·e^{-bt}</code> bounds in sidebar chart overlays</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.9.3.4 -- Area under curve and damping factor -->


<!-- ====================================================== -->

<section id="11.9.3.4">

  <h4>11.9.3.4 -- Area under curve and damping factor</h4>

  <p>

    The area under a damped oscillation curve can be used to estimate the energy lost over time. By 

integrating the decaying envelope, one can infer the damping constant <code>b</code> or total energy 

dissipation.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Although rarely done by hand, the integral of the motion curve relates

 directly to the total work done by resistive forces over time.</li>

    <li>
n
 <strong>Example:</strong> Numerically integrating <code>A·e^{-bt}</code> over 60
n
s provides a curve 

area proportional to energy lost from the system.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Used in advanced processing tabs or Python exports (<a href="#10.10.5.2">export math 

scripting</a>)</li>

        <li>Supports visual comparison of estimated <code>b</code> vs derived from envelope method</li>

        <li>Explained in <a href="#11.3.3.1">R² and fit quality</a> when comparing numerical and visual 

matches</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.9.3.5 -- Envelope visualization in data plots -->

<!-- ====================================================== -->

<section id="11.9.3.5">

  <h4>11.9.3.5 -- Envelope visualization in data plots</h4>

  <p>

    In damped oscillations, the upper and lower bounds of motion can be represented by an exponential 

envelope, typically shown as <code>±A·e^{-bt}</code>. These bounds help visualize the decay of amplitude and 

assess model accuracy.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Plotting the envelope gives a clear sense of damping intensity. It(TM)s a

 common diagnostic for determining whether the decay matches the predicted model.</li>

    <li>
n
 <strong>Example:</strong> A regression output chart shows the cosine curve (in blue) and its 

envelope (in gray dashed lines) fading over time, aligned with the model <code>A·cos(
w
t + 

f
)·e^{-bt}</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Envelope bounds derived from fit coefficients (<a href="#11.3.1.1">A</a> and <a 

href="#11.3.1.2">b</a>)</li>

        <li>Rendered in chart overlays within sidebar previews or the <code>Processing</code> sheet</li>

        <li>Used as a diagnostic tool in <a href="#11.3.2.5">combined motion + decay fits</a> and during <a 

href="#10.10.3.3">regression visualization</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.10.1.1 -- Standard SI and derived units -->

<!-- ====================================================== -->

<section id="11.10.1.1">

  <h4>11.10.1.1 -- Standard SI and derived units</h4>

  <p>

    All physical quantities in the spreadsheet system follow standard SI (International System of Units) or 

appropriate derived units (e.g., m, s, Hz, N/m). This ensures clarity across exports, visualizations, and 

LaTeX output.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> SI units reduce confusion in international contexts, enhance 

compatibility with MATLAB and LaTeX exports, and align with IB Physics requirements.</li>

    <li>
n
 <strong>Example:</strong> Time is measured in seconds (<code>s</code>), mass in kilograms 

(<code>kg</code>), and frequency in hertz (<code>Hz</code>).</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>All variables used in <a href="#11.3.1.x">regression definitions</a> follow SI conventions</li>

        <li>LaTeX exports display correct units using <code>\text{unit}</code> syntax (see <a 

href="#11.10.1.4">LaTeX formatting</a>)</li>

        <li>Script checks headers for unit tags to infer plotting scale (see <a href="#11.10.1.5">auto-

detection</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.10.1.2 -- Unit conversion (e.g., ms to s) -->

<!-- ====================================================== -->

<section id="11.10.1.2">

  <h4>11.10.1.2 -- Unit conversion (e.g., ms to s)</h4>


  <p>

    Some datasets use alternate units like milliseconds. These are automatically converted by the script or 

interpreted by the regression engine to maintain consistency across models and exports.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> For uniformity, time data recorded in <code>ms</code> is typically 

converted to <code>s</code> by dividing by 1000. This avoids scaling errors in regression output.</li>

    <li>
n
 <strong>Example:</strong> If a column is labeled <code>Time (ms)</code>, the value <code>1200</code>

 is interpreted as <code>1.2 s</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Conversion triggered automatically during <a href="#10.10.2.1">CSV pre-processing</a> if unit 

match is detected</li>

        <li>Unit suffix parsed from headers by <a href="#11.10.1.5">header scanner</a></li>

        <li>LaTeX and MATLAB exports display converted units using canonical format</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.10.1.3 -- Displaying units in sheets -->

<!-- ====================================================== -->

<section id="11.10.1.3">

  <h4>11.10.1.3 -- Displaying units in sheets</h4>

  <p>

    Units should be explicitly included in spreadsheet column headers using the format <code>Label 

(unit)</code>. This improves readability and enables the script to interpret data correctly during processing 

and export.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Standardized headers like <code>Time (s)</code> or <code>Amplitude 

(cm)</code> help the script detect physical quantities, reducing user error.</li>

    <li>
n
 <strong>Example:</strong> A column labeled <code>Position (cm)</code> indicates the variable is 

displacement in centimeters, triggering appropriate unit scaling in the export.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Column headers parsed during <a href="#10.10.2.1">CSV import</a> and <a href="#11.10.1.5">unit 

auto-detection</a></li>

        <li>Unit information attached as metadata for LaTeX and MATLAB exports</li>

        <li>Headers may be verified in preview stages or during <a href="#11.5.3.3">formula rendering</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.10.1.4 -- LaTeX format for units -->

<!-- ====================================================== -->

<section id="11.10.1.4">

  <h4>11.10.1.4 -- LaTeX format for units</h4>

  <p>

    Units are wrapped using <code>\text{...}</code> in LaTeX math environments to prevent them from being 

misinterpreted as variables. This ensures proper visual display and avoids syntax errors.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Units like <code>m</code> or <code>s</code> may conflict with variable

 names if not wrapped in <code>\text{}</code>. This distinction preserves clarity and mathematical 

correctness.</li>

    <li>
n
 <strong>Example:</strong> The LaTeX output for velocity is <code>v = \frac{x}{t} = 

2.0\,\text{m/s}</code> instead of <code>2.0\,m/s</code> (which might be parsed as multiplication).</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>LaTeX export engine inserts <code>\text{...}</code> for all units in <a href="#10.10.4.1">formula 

generation</a></li>

        <li>Unit suffixes cleaned and normalized before rendering</li>

        <li>Symbols from <a href="#11.10.2.2">special character map</a> applied where relevant (e.g., 

<code>\text{m/s}^2</code>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.10.1.5 -- Auto-detection of units in column headers -->

<!-- ====================================================== -->

<section id="11.10.1.5">

  <h4>11.10.1.5 -- Auto-detection of units in column headers</h4>

  <p>

    The script scans column headers for patterns like <code>(s)</code>, <code>(ms)</code>, <code>(cm)</code>, 

or <code>(Hz)</code> to determine the physical units of the associated variable. This aids in scaling, 

labeling, and export formatting.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Headers like <code>Time (ms)</code> or <code>Position (cm)</code> are 


automatically parsed so that the data can be normalized (e.g., converted to SI) or annotated 

appropriately.</li>

    <li>
n
 <strong>Example:</strong> A CSV column labeled <code>Displacement (cm)</code> triggers an internal 

note to divide values by 100 before export to LaTeX or MATLAB, which expects meters.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Regex match or string search performed on all headers during <a href="#10.10.2.1">CSV parsing</a> 

and sheet analysis</li>

        <li>Extracted units stored as metadata for later use in <a href="#10.10.4.1">formula 

rendering</a></li>

        <li>Links to glossary entries if glossary tags are matched (see <a href="#11.1.2.4">auto-glossary 

detection</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.10.2.1 -- Variable naming in sheets vs LaTeX -->

<!-- ====================================================== -->

<section id="11.10.2.1">

  <h4>11.10.2.1 -- Variable naming in sheets vs LaTeX</h4>

  <p>

    Variable names in spreadsheets often differ from their symbolic equivalents in LaTeX. For example, 

<code>phi</code> in the sheet becomes <code>\phi</code> in exports. These mappings are handled automatically.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Spreadsheet headers are restricted to plain ASCII, while LaTeX allows 

symbolic representations for clarity and professionalism in published documents.</li>

    <li>
n
 <strong>Example:</strong> A column named <code>w</code> is interpreted as angular frequency and 

rendered as <code>\omega</code> in the final export.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Translation table maintained internally for use in <a href="#10.10.4.2">symbol rendering</a></li>

        <li>Auto-conversion applied during <a href="#11.5.3.1">JS-to-LaTeX formula conversion</a></li>

        <li>Preview panel shows both versions side-by-side for verification</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.10.2.2 -- phi, omega, and special symbols -->

<!-- ====================================================== -->

<section id="11.10.2.2">

  <h4>11.10.2.2 -- <code>phi</code>, <code>omega</code>, and special symbols</h4>

  <p>

    Special physics symbols such as <code>\phi</code> (phase), <code>\omega</code> (angular frequency), and 

<code>\theta</code> (angle) are supported in LaTeX exports and preview panels. These symbols are automatically

 substituted from their sheet-friendly names.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Since spreadsheet environments don(TM)t support Greek characters 

directly, ASCII substitutes like <code>phi</code> or <code>w</code> are used and then rendered as symbolic 

output.</li>

    <li>
n
 <strong>Example:</strong> A formula using <code>A*cos(w*t + phi)</code> is exported as <code>A 

\cos(\omega t + \phi)</code> in LaTeX or MATLAB.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Symbol translation map defined in script config (see <a href="#11.10.2.3">alias mapping</a>)</li>

        <li>Applied in <a href="#11.5.3.1">formula conversion</a> and <a href="#10.10.4.1">LaTeX preview 

generation</a></li>

        <li>Glossary references added for hover tooltips in help sidebar (e.g., <a href="#11.1.2.2">inline 

definitions</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.10.2.3 -- Mapping aliases (e.g., fiwfl = fiomegafl) -->

<!-- ====================================================== -->

<section id="11.10.2.3">

  <h4>11.10.2.3 -- Mapping aliases (e.g., fiwfl = fiomegafl)</h4>

  <p>

    To accommodate varied user inputs, the script maps common aliases like <code>w</code>, <code>omega</code>,

 or <code>ang_freq</code> to the canonical symbol <code>\omega</code>. This helps unify variable 

interpretation across formulas, previews, and exports.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Users may input variable names using their preferred notation. Alias 

mapping ensures these are interpreted consistently.</li>

    <li>
n
 <strong>Example:</strong> Whether a user enters <code>omega</code> or <code>w</code> in the formula 

box, it will be rendered as <code>\omega</code> in LaTeX output.</li>

    <li>
n
 <strong>Implementation:</strong>


      <ul>

        <li>Mapping table maintained within formula parser logic (see <a href="#11.5.3.3">subscript and 

exponent handling</a>)</li>

        <li>Applied before export in <a href="#10.10.4.3">formula packaging</a> and preview box</li>

        <li>Supports reverse mapping for readability in sheet displays or logs</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.10.2.4 -- Spreadsheet naming constraints -->

<!-- ====================================================== -->

<section id="11.10.2.4">

  <h4>11.10.2.4 -- Spreadsheet naming constraints</h4>

  <p>

    Google Sheets does not support special characters (like Greek symbols or superscripts) in cell names or 

headers. Therefore, ASCII-compatible names like <code>phi</code>, <code>w</code>, and <code>theta</code> must 

be used internally.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Using non-ASCII characters in sheet headers may break scripts, named 

ranges, or references. The system is designed to detect and correct these before processing.</li>

    <li>
n
 <strong>Example:</strong> A column titled <code>
w
 (rad/s)</code> will be renamed internally to 

<code>w</code> to maintain compatibility, and remapped to <code>\omega</code> at export.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Header cleaner in <a href="#10.10.2.1">CSV preprocessing</a> strips or replaces unsupported 

characters</li>

        <li>Mapped to LaTeX equivalents in <a href="#11.10.2.2">symbol formatting</a></li>

        <li>Warns user during <a href="#11.5.1.2">formula entry</a> if invalid characters are detected</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.10.2.5 -- Symbol consistency across outputs -->

<!-- ====================================================== -->

<section id="11.10.2.5">

  <h4>11.10.2.5 -- Symbol consistency across outputs</h4>

  <p>

    All symbolic variables are rendered consistently across sidebar previews, LaTeX exports, MATLAB outputs, 

and error logs. A unified symbol mapping table ensures that every variable is correctly represented, 

regardless of output mode.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Maintaining consistent notation avoids confusion for users and 

teachers. It also allows copy-paste of expressions between spreadsheet, sidebar, and code.</li>

    <li>
n
 <strong>Example:</strong> <code>phi</code> is always shown as <code>\phi</code> in LaTeX preview, 

MATLAB comment headers, and glossary entries.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Uses same mapping rules as <a href="#11.10.2.3">alias remapping</a> and <a href="#11.5.3.1">LaTeX 

conversion</a></li>

        <li>Inline tooltips and glossary hover links rely on this consistency (see <a 

href="#11.1.2.2">tooltips</a>)</li>

        <li>Validated during <a href="#10.10.4.3">export packaging</a> to flag any unrecognized symbols</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.10.3.1 -- LaTeX math formatting standards -->

<!-- ====================================================== -->

<section id="11.10.3.1">

  <h4>11.10.3.1 -- LaTeX math formatting standards</h4>

  <p>

    All LaTeX mathematical output follows a standard structure to ensure compatibility across platforms. 

Functions are written using full LaTeX syntax (e.g., <code>\cos</code>, <code>\exp</code>), variables are 

symbolically mapped, and units use <code>\text{}</code>.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Proper formatting ensures that math expressions render correctly in 

the sidebar, export preview, and compiled PDF or .tex documents.</li>

    <li>
n
 <strong>Example:</strong> <code>A*cos(w*t + phi)</code> is converted to <code>A\cos(\omega t + 

\phi)</code> with consistent use of parentheses, symbols, and math mode encapsulation.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Rendering is performed in <a href="#11.5.3.1">formula parser</a> and reused in <a 

href="#10.10.4.1">export templates</a></li>

        <li>Uses standard inline math (<code>$...$</code>) or block math (<code>$$...$$</code>) depending on 

context</li>

        <li>Applies <a href="#11.10.3.4">character escaping</a> rules to prevent compile errors</li>


      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.10.3.2 -- Inline vs block math in exports -->

<!-- ====================================================== -->

<section id="11.10.3.2">

  <h4>11.10.3.2 -- Inline vs block math in exports</h4>

  <p>

    The HelpDialog and export engine support both inline and block LaTeX styles. Inline math is used for short

 expressions embedded in text, while block math is used for standalone equations and previews.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Inline math is wrapped in <code>$...$</code> and appears within a 

sentence. Block math is wrapped in <code>$$...$$</code> and centers the expression for emphasis or 

clarity.</li>

    <li>
n
 <strong>Example:</strong> <code>$x = A\cos(\omega t + \phi)$</code> appears in-line, while <code>$$x

 = A\cos(\omega t + \phi)$$</code> is used for preview or LaTeX exports.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Default mode selected during <a href="#10.10.4.1">formula packaging</a> or <a 

href="#11.5.3.5">preview options</a></li>

        <li>User may toggle style via sidebar (preview mode setting)</li>

        <li>Used in both HTML (MathJax) and raw LaTeX (.tex) output for compatibility</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.10.3.3 -- Mapping spreadsheet strings into LaTeX -->

<!-- ====================================================== -->

<section id="11.10.3.3">

  <h4>11.10.3.3 -- Mapping spreadsheet strings into LaTeX</h4>

  <p>

    Raw formulas written in spreadsheet-friendly syntax (e.g., <code>A*cos(w*t)</code>) are automatically 

translated into LaTeX equivalents (e.g., <code>A\cos(\omega t)</code>) for display in help sidebars and export

 files.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Google Sheets users may input formulas using JavaScript-style syntax. 

The script converts these into valid LaTeX by applying symbol mappings and format rules.</li>

    <li>
n
 <strong>Example:</strong> <code>A*exp(-b*t)*cos(w*t+phi)</code> becomes <code>A\exp(-bt)\cos(\omega 

t + \phi)</code>.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Conversion handled in <a href="#11.5.3.1">JS-to-LaTeX converter</a> within the formula wizard</li>

        <li>Used in <a href="#10.10.4.1">formula export</a> and preview modules</li>

        <li>Applies symbol mapping from <a href="#11.10.2.1">variable translation rules</a></li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.10.3.4 -- Escaping reserved characters -->

<!-- ====================================================== -->

<section id="11.10.3.4">

  <h4>11.10.3.4 -- Escaping reserved characters</h4>

  <p>

    Special characters in LaTeX such as <code>_</code>, <code>^</code>, <code>{}</code>, and <code>\</code> 

must be escaped to prevent syntax errors. The script automatically detects and escapes these during 

conversion.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Unescaped characters can break LaTeX compilation. For example, 

<code>x_1</code> must be written as <code>x\_1</code> when appearing outside of math mode.</li>

    <li>
n
 <strong>Example:</strong> A raw formula <code>C_{total} = A*B</code> is exported as 

<code>C\_\{total\} = AB</code> unless in math mode (where <code>C_{total}</code> is valid).</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Escaping handled during <a href="#11.5.3.3">LaTeX rendering</a> and <a href="#10.10.4.3">export 

packaging</a></li>

        <li>Preview includes escaped version to help users troubleshoot invalid syntax</li>

        <li>Warnings shown in <a href="#11.5.1.4">formula validation</a> if bad characters remain</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 11.10.3.5 -- Examples of correct formatting -->

<!-- ====================================================== -->


<section id="11.10.3.5">

  <h4>11.10.3.5 -- Examples of correct formatting</h4>

  <p>

    This section provides examples showing how formulas and variables appear in JavaScript (spreadsheet), 

LaTeX (math preview), and MATLAB (<code>.m</code> export) formats. These help users confirm the structure of 

their models.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Seeing a side-by-side layout of a formula across different output 

modes helps users verify symbol translation, structure, and export compatibility.</li>

    <li>
n
 <strong>Example:</strong>

      <ul>

        <li><strong>Spreadsheet input:</strong> <code>A*exp(-b*t)*cos(w*t + phi)</code></li>

        <li><strong>LaTeX:</strong> <code>A\exp(-bt)\cos(\omega t + \phi)</code></li>

        <li><strong>MATLAB:</strong> <code>y = A*exp(-b*t).*cos(w*t + phi);</code></li>

      </ul>

    </li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Examples auto-generated in <a href="#11.5.3.5">preview sidebar</a> and confirmed before 

export</li>

        <li>Used in <a href="#10.10.5.1">formula verification steps</a> for sidebar visualization</li>

        <li>Displayed within collapsible glossary entries and hover tooltips (linked from <a 

href="#11.1.2.2">glossary system</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- SECTION 12.1 -- Source Citations Overview -->

<!-- ====================================================== -->

<section id="12.1">

  <h3>12.1 -- Source Citations Overview</h3>

  <p>

    This section lists all external sources referenced throughout the HelpDialog system. Each citation is 

numbered and linked from relevant sections such as the glossary (<a href="#11.1.2.1">11.1.2.1</a>), formula 

references, and export blocks. It ensures traceability, academic rigor, and proper attribution.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> To uphold transparency and align with IB academic integrity standards,

 all technical definitions, equations, and algorithm references are backed by verifiable sources.</li>

    <li>
n
 <strong>Examples of use:</strong>

      <ul>

        <li>Glossary entry for <a href="#11.3.3.1">R²</a> links to numerical methods textbook [3]</li>

        <li><a href="#10.10.3.2">Export scripts</a> cite MathWorks documentation [1]</li>

        <li>Physics concepts like <a href="#11.9.1.1">F = OEkx</a> point to university physics sources [4]</li>

      </ul>

    </li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>References follow Wikipedia-style bracket notation (e.g., [1], [3])</li>

        <li>Each entry includes full citation, URL, and anchor for linking</li>

        <li>Sources marked with <code>[0]</code> denote placeholders where no citation was verifiable (see <a 

href="#12.2">12.2</a>)</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 12.2 -- Citation Format: Verified vs Placeholder -->

<!-- ====================================================== -->

<section id="12.2">

  <h3>12.2 -- Citation Format: Verified vs Placeholder</h3>

  <p>

    Citations used throughout the HelpDialog follow a dual-format system:

    verified references are numbered like <code>[1]</code>, while placeholders for uncited or unverifiable 

content are shown as <code>[0]</code> in blue. This makes transparent where assumptions or internal knowledge 

are used.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> The placeholder <code>[0]</code> avoids introducing false authority by

 clearly distinguishing unsourced entries. These are marked for review or user follow-up.</li>

    <li>
n
 <strong>Example:</strong> An equation for fiacceleration due to dampingfl without a reliable citation 

shows as <code>[0]</code> and appears in the source list with an open note.</li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Verified entries shown in black, with numbered index linking to <a href="#12.3">Reference 

List</a></li>

        <li>Placeholders shown in blue and highlighted in <a href="#11.1.2.1">glossary sections</a> where 

source confidence is low</li>

        <li>Export file includes a citation appendix with [0] entries listed last</li>

      </ul>


    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 12.3 -- Numbered Reference List -->

<!-- ====================================================== -->

<section id="12.3">

  <h3>12.3 -- Numbered Reference List</h3>

  <p>

    This section provides the full list of numbered citations used throughout the HelpDialog system. Each 

entry includes a short description, full bibliographic reference, and URL if available. All links are verified

 at time of publication.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Every bracketed number like <code>[3]</code> links here. This 

maintains scholarly consistency while allowing inline referencing throughout help content and exports.</li>

    <li>
n
 <strong>Example:</strong>

      <ul>

        <li><strong>[1]</strong> MathWorks. <em>MATLAB Curve Fitting Toolbox Documentation</em>. Retrieved 

from: <a href="https://www.mathworks.com/help/curvefit/">mathworks.com</a></li>

        <li><strong>[2]</strong> IB Physics Guide (2025 syllabus), Assessment Criteria and Formula Sheet</li>

        <li><strong>[3]</strong> Burden, R.L., & Faires, J.D. <em>Numerical Analysis</em>, 10th ed., 

Brooks/Cole, 2015</li>

        <li><strong>[4]</strong> Halliday, Resnick, & Walker. <em>Fundamentals of Physics</em>, 10th ed., 

Wiley, 2013</li>

        <li><strong>[0]</strong> No verified source found. Term included based on internal documentation or 

inference.</li>

      </ul>

    </li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Each source receives an anchor (<code>#ref-1</code>, <code>#ref-2</code>, etc.) for sidebar 

linking</li>

        <li>Shown in HelpDialog footer if enabled in <a href="#10.10.5.3">export preview options</a></li>

        <li>Placeholders grouped at bottom with <code>[0]</code> class styling for review visibility</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 12.4 -- Sidebar and Tooltip Integration -->

<!-- ====================================================== -->

<section id="12.4">

  <h3>12.4 -- Sidebar and Tooltip Integration</h3>

  <p>

    References are linked directly in the HelpDialog sidebar using inline citations and hover tooltips. 

Glossary terms, formula previews, and UI elements use anchor links to the reference section, allowing users to

 trace sources without leaving the interface.

  </p>

  <ul>

    <li>
n
 <strong>Explanation:</strong> Linking reference numbers and tooltips helps provide immediate context

 to users without interrupting their workflow. Citations are shown on hover or expandable tap targets.</li>

    <li>
n
 <strong>Example:</strong>

      <ul>

        <li>A glossary card for <code>R²</code> includes a superscripted [3] that links to <a 

href="#12.3">Reference [3]</a></li>

        <li>Hovering over [2] next to fiIB Formula Sheetfl in <a href="#11.10.1.1">unit sections</a> shows a 

tooltip citing the 2025 syllabus</li>

      </ul>

    </li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Implemented via <code>&lt;sup&gt;[n]&lt;/sup&gt;</code> inline tags with anchors to <a 

href="#12.3">12.3</a></li>

        <li>Glossary cards render citations dynamically from metadata (see <a href="#11.1.2.1">glossary 

integration</a>)</li>

        <li>MathJax or HTML span tooltips used to preserve display consistency</li>

      </ul>

    </li>

  </ul>

</section>

<!-- ====================================================== -->

<!-- 12.5 -- Export Footers and Reference Mapping -->

<!-- ====================================================== -->

<section id="12.5">

  <h3>12.5 -- Export Footers and Reference Mapping</h3>

  <p>

    When generating exports (LaTeX, MATLAB, CSV metadata), the script includes a citation footer showing all 

sources referenced in the document. Citations are auto-collected from formula blocks, glossary tags, and user-

provided inputs.

  </p>

  <ul>


    <li>
n
 <strong>Explanation:</strong> This footer ensures transparency and academic traceability for any 

shared or submitted data files. It supports auditing and aligns with IB assessment expectations.</li>

    <li>
n
 <strong>Example:</strong> The bottom of a LaTeX file contains:

      <blockquote><small>References: [1] MathWorks, [2] IB Guide, [3] Burden & Faires, [0] Unverified 

(internal)</small></blockquote>

    </li>

    <li>
n
 <strong>Implementation:</strong>

      <ul>

        <li>Auto-collects references based on tags in <a href="#10.10.4.2">formula exports</a> and <a 

href="#11.1.2.4">auto-glossary detection</a></li>

        <li>Mapped from citation table in <a href="#12.3">Reference List</a></li>

        <li>Appended as footer or separate sheet depending on export format</li>

      </ul>

    </li>

  </ul>

</section>

