# START SECTION 3 -- PART 1

<!--

===============================================

SECTION 3 -- FUNCTION REFERENCE (FULL EXPANDED)

===============================================

-->

<h1 id="section3">Section 3 -- Function Reference (Full Expanded)</h1>

<p>

This section provides a fully expanded reference for all functions in the Physics Data Collection system.

</p>

<p>

Every function, both major and minor, is documented here:

<ul>

<li><strong>Purpose</strong></li>

<li><strong>Parameters</strong></li>

<li><strong>Usage Examples</strong></li>

<li><strong>Common Issues</strong></li>

<li><strong>Tips & Notes</strong></li>

</ul>

</p>

<p>

Functions are grouped AOEZ and documented in order.

</p>

<!-- Example -- Safe Embed -->

<details>

<summary>Example Function Entry Structure</summary>

<pre>

<h2>functionName()</h2>

<p><strong>Purpose:</strong> ...</p>

<p><strong>Parameters:</strong> ...</p>

<p><strong>Usage Example:</strong></p>

<pre>functionName(param1, param2);</pre>

<p><strong>Common Issues:</strong> ...</p>

<p><strong>Tips:</strong> ...</p>

</pre>

</details>

<p>

In v5.1, functions are split across:

<ul>

<li><code>HelpDialog_Functions1.html</code> -- AOEM</li>

<li><code>HelpDialog_Functions2.html</code> -- NOEZ</li>

</ul>

</p>

<p>

<a href="#section3_1">Next: 3.1 -- onOpen()</a>

</p>

<!--

Glossary Terms Referenced:

- API

- Sidebar

- SYSTEM_SHEETS

-->

# END SECTION 3 -- PART 1

# START SECTION 3 -- PART 2

<!--

===============================================

SECTION 3.1 -- onOpen()

===============================================

-->

<h2 id="section3_1">3.1 onOpen()</h2>

<p>

<strong>Purpose:</strong>

The <code>onOpen()</code> function is a special Google Apps Script trigger that runs automatically when the 

spreadsheet is opened.

</p>

<p>

Its purpose is to build the dynamic <strong>"CSV Manager"</strong> menu:

<ul>

<li>Reflects current system capabilities.</li>

<li>Ensures menu is always up-to-date with v5.1+ functions.</li>

<li>Provides organized user access from beginner to advanced workflows.</li>

</ul>

</p>

<h3>Parameters:</h3>

<p>

None -- this is an auto-triggered function.

</p>

<h3>Usage Example:</h3>


<pre>

function onOpen() {

  const ui = SpreadsheetApp.getUi();

  ui.createMenu("CSV Manager")

    .addSubMenu(ui.createMenu("CSV Import & Folders")

      .addItem("Refresh CSV Files", "refreshCSVFiles")

      .addItem("Setup Folders", "setupFolders")

      .addItem("Test Folder Access", "testFolderAccess"))

    .addSubMenu(ui.createMenu("Sheet Management")

      .addItem("Update Data Sheet", "updateDataSheet")

      .addItem("Order Sheets", "orderSheets")

      .addItem("Create Home Pages (All Folders)", "createHomePagesForAllFolders"))

    .addSubMenu(ui.createMenu("Data Cleaning")

      .addItem("Clean Quote Marks", "cleanQuoteMarks")

      .addItem("Clean Current Sheet", "cleanCurrentSheet")

      .addItem("Hide Negative Time Rows", "hideNegativeTimeRows")

      .addItem("Delete Negative Time Rows", "deleteNegativeTimeRows"))

    .addSubMenu(ui.createMenu("Data Processing")

      .addItem("Create Data Validation Sheet", "createDataValidationSheet")

      .addItem("Interval Analysis", "runIntervalAnalysis")

      .addItem("Create Data Processing Sheet", "createDataProcessing")

      .addItem("Edit Data Processing Formula", "editDataProcessingFormula")

      .addItem("Run Regression", "runRegression")

      .addItem("Create Regression", "createRegression")

      .addItem("Open Data Processing Sheet", "openDataProcessing"))

    .addSubMenu(ui.createMenu("Error Checking")

      .addItem("Run Error Check", "runErrorCheck")

      .addItem("View Error Log", "viewErrorLog")

      .addItem("Update Error Log Color Scale", "updateErrorLogColorScale"))

    .addSubMenu(ui.createMenu("Help")

      .addItem("Help", "showHelp"))

    .addToUi();

}

</pre>

<h3>Common Issues:</h3>

<ul>

<li>If the menu does not appear, try reloading the spreadsheet (onOpen only triggers at load).</li>

<li>Ensure there are no syntax errors in any menu items -- errors will silently prevent menu creation.</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>You can manually trigger onOpen from the Apps Script editor for testing:

<pre>onOpen();</pre>

</li>

<li>Advanced users can customize menu grouping or add their own custom functions.</li>

</ul>

<p>

<a href="#section3_2">Next: 3.2 -- refreshCSVFiles()</a>

</p>

<!--

Glossary Terms Referenced:

- CSV

- Data Cleaning

- Interval Analysis

- Regression

- Error Log

- Sidebar

-->

# END SECTION 3 -- PART 2

# START SECTION 3 -- PART 3

<!--

===============================================

SECTION 3.2 -- refreshCSVFiles()

===============================================

-->

<h2 id="section3_2">3.2 refreshCSVFiles()</h2>

<p>

<strong>Purpose:</strong>

The <code>refreshCSVFiles()</code> function scans the configured Drive folders and imports CSV files into 

corresponding sheets.

</p>

<p>

In v5.1+, it provides enhanced options:

<ul>

<li>Refresh <strong>all folders</strong></li>

<li>Refresh a <strong>specific folder</strong></li>

<li>Force re-import existing sheets</li>

<li>Normalize file names (trims, removes Unicode invisibles)</li>

</ul>

</p>


<h3>Parameters:</h3>

<p>

None -- called from the menu.

</p>

<h3>Usage Example:</h3>

<pre>

refreshCSVFiles();

</pre>

<p>

Or via menu:

<strong>CSV Import & Folders 
速
 Refresh CSV Files</strong>

</p>

<h3>Dialog Example:</h3>

<p>

When run, prompts:

</p>

<pre>

"Do you want to refresh all folders or a specific folder?"

[YES] 
速
 Refresh all folders

[NO] 
速
 Prompt for specific folder

</pre>

<h3>Import Process:</h3>

<ol>

<li>Iterates over <code>FOLDER_CONFIG</code>.</li>

<li>For each folder:

    <ul>

    <li>Gets CSV files.</li>

    <li>Normalizes file names.</li>

    <li>Checks if sheet already exists.</li>

    <li>Prompts user whether to force re-import.</li>

    <li>Creates or updates sheet.</li>

    <li>Writes CSV data to sheet.</li>

    <li>Auto-trims header row.</li>

    </ul>

</li>

</ol>

<h3>Common Issues:</h3>

<ul>

<li>Missing Drive permissions -- ensure user has access to the folder.</li>

<li>Folder not configured -- check <code>FOLDER_CONFIG</code> in script.</li>

<li>Malformed CSV -- empty or badly formatted CSVs may trigger warnings.</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>Use <strong>Test Folder Access</strong> first to verify Drive connectivity.</li>

<li>Use <strong>Setup Folders</strong> to check current folder IDs.</li>

<li>Force re-import can be useful if a CSV was updated externally.</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Example: Partial Code for refreshCSVFiles()</summary>

<pre>

function refreshCSVFiles() {

  const ui = SpreadsheetApp.getUi();

  const response = ui.alert(

    "Refresh Options",

    "Do you want to refresh all folders or a specific folder?",

    ui.ButtonSet.YES_NO_CANCEL

  );

  if (response === ui.Button.YES) {

    for (const folderName in FOLDER_CONFIG) {

      importFolderCSVs(folderName);

    }

  } else if (response === ui.Button.NO) {

    const folderNames = Object.keys(FOLDER_CONFIG);

    const folderChoice = ui.prompt(

      "Enter Folder Name",

      `Available folders: ${folderNames.join(", ")}`,

      ui.ButtonSet.OK_CANCEL

    );

    if (folderChoice.getSelectedButton() === ui.Button.OK) {

      const chosenName = folderChoice.getResponseText().trim();

      if (FOLDER_CONFIG[chosenName]) {

        importFolderCSVs(chosenName);

      } else {

        ui.alert("Invalid folder name.");

      }

    }

  }


}

</pre>

</details>

<p>

<a href="#section3_3">Next: 3.3 -- importFolderCSVs()</a>

</p>

<!--

Glossary Terms Referenced:

- FOLDER_CONFIG

- CSV

- Unicode

-->

# END SECTION 3 -- PART 3

# START SECTION 3 -- PART 4

<!--

===============================================

SECTION 3.3 -- importFolderCSVs()

===============================================

-->

<h2 id="section3_3">3.3 importFolderCSVs()</h2>

<p>

<strong>Purpose:</strong>

The <code>importFolderCSVs(folderName)</code> function handles the actual CSV import process for a given 

folder.

</p>

<p>

It is called internally by <code>refreshCSVFiles()</code> and performs the following:

<ul>

<li>Accesses the specified folder via <code>FOLDER_CONFIG</code>.</li>

<li>Retrieves all CSV files.</li>

<li>Normalizes file names (trims, removes Unicode invisibles).</li>

<li>Checks for existing sheets -- prompts for force re-import if needed.</li>

<li>Creates or updates sheets with CSV data.</li>

<li>Trims header row.</li>

<li>Logs activity to <strong>Error Log</strong>.</li>

</ul>

</p>

<h3>Parameters:</h3>

<ul>

<li><code>folderName</code> -- string -- name of folder (must match key in <code>FOLDER_CONFIG</code>).</li>

</ul>

<h3>Usage Example:</h3>

<pre>

importFolderCSVs("Cart + 0.250kg");

</pre>

<p>

Or indirectly via menu:

<br>

<strong>CSV Import & Folders 
速
 Refresh CSV Files</strong>

</p>

<h3>Detailed Process:</h3>

<ol>

<li>Retrieve folder ID from <code>FOLDER_CONFIG</code>.</li>

<li>Access folder using:

<pre>DriveApp.getFolderById(folderId);</pre>

</li>

<li>Retrieve CSV files:

<pre>folder.getFilesByType(MimeType.CSV);</pre>

</li>

<li>For each file:

    <ul>

    <li>Normalize file name.</li>

    <li>Check if sheet exists.</li>

    <li>Prompt user to force re-import if needed.</li>

    <li>If re-importing:

        <ul>

        <li>Delete old sheet.</li>

        <li>Create new sheet.</li>

        <li>Parse CSV and write to sheet.</li>

        <li>Trim header row.</li>

        <li>Log to Error Log.</li>

        </ul>

    </li>

    </ul>

</li>

</ol>

<!-- Example -- Safe Embed -->

<details>

<summary>Partial Code: importFolderCSVs()</summary>


<pre>

function importFolderCSVs(folderName) {

  const folderId = FOLDER_CONFIG[folderName].id;

  const folder = DriveApp.getFolderById(folderId);

  const files = folder.getFilesByType(MimeType.CSV);

  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();

  while (files.hasNext()) {

    const file = files.next();

    let fileName = file.getName().replace(/\.[^/.]+$/, "").trim();

    fileName = fileName.replace(/[\u200B-\u200D\uFEFF]/g, "");

    let sheet = spreadsheet.getSheetByName(fileName);

    const forceImportPrompt = SpreadsheetApp.getUi().alert(

      `File: ${fileName}`,

      "Do you want to force re-import this sheet?",

      SpreadsheetApp.getUi().ButtonSet.YES_NO

    );

    const forceImport = (forceImportPrompt === SpreadsheetApp.getUi().Button.YES);

    if (sheet && !forceImport) {

      logImportActivity(`Skipped existing sheet: ${fileName}`);

      continue;

    }

    if (sheet) {

      spreadsheet.deleteSheet(sheet);

    }

    sheet = spreadsheet.insertSheet(fileName);

    const csvData = Utilities.parseCsv(file.getBlob().getDataAsString());

    sheet.getRange(1, 1, csvData.length, csvData[0].length).setValues(csvData);

    const headerRow = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];

    for (let i = 0; i < headerRow.length; i++) {

      headerRow[i] = headerRow[i].toString().trim().replace(/[\u200B-\u200D\uFEFF]/g, "");

    }

    sheet.getRange(1, 1, 1, headerRow.length).setValues([headerRow]);

    logImportActivity(`Imported CSV: ${fileName}`);

  }

}

</pre>

</details>

<h3>Common Issues:</h3>

<ul>

<li>Invalid folder name -- ensure <code>folderName</code> matches key in <code>FOLDER_CONFIG</code>.</li>

<li>Drive permissions -- user must have access to the folder.</li>

<li>Empty CSV files -- may trigger warning entries in Error Log.</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>Force re-import is very useful when CSV data has changed.</li>

<li>Normalization prevents subtle bugs caused by invisible Unicode characters.</li>

<li>Always review Error Log after large import runs.</li>

</ul>

<p>

<a href="#section3_4">Next: 3.4 -- setupFolders()</a>

</p>

<!--

Glossary Terms Referenced:

- FOLDER_CONFIG

- Unicode

- CSV

- Error Log

-->

# END SECTION 3 -- PART 4

# START SECTION 3 -- PART 5

<!--

===============================================

SECTION 3.4 -- setupFolders()

===============================================

-->

<h2 id="section3_4">3.4 setupFolders()</h2>

<p>

<strong>Purpose:</strong>

The <code>setupFolders()</code> function displays the current folder configuration 

(<code>FOLDER_CONFIG</code>) to the user.

</p>

<p>

This is a quick way to verify that folders are correctly set up before running CSV imports.

</p>

<h3>Parameters:</h3>

<p>


None -- called from the menu.

</p>

<h3>Usage Example:</h3>

<pre>

setupFolders();

</pre>

<p>

Or via menu:

<strong>CSV Import & Folders 
速
 Setup Folders</strong>

</p>

<h3>Behavior:</h3>

<ul>

<li>Reads <code>FOLDER_CONFIG</code> object.</li>

<li>Builds a message with:

    <ul>

    <li>Folder names</li>

    <li>Folder IDs</li>

    <li>Folder colors</li>

    <li>Folder order</li>

    </ul>

</li>

<li>Displays the message in a Google Sheets UI alert.</li>

</ul>

<h3>Common Issues:</h3>

<ul>

<li>If a folder is missing from <code>FOLDER_CONFIG</code>, it will not appear.</li>

<li>Folder IDs must be valid Drive folder IDs -- otherwise access errors will occur when importing.</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>Always run <strong>Setup Folders</strong> after editing <code>FOLDER_CONFIG</code> to confirm correct 

configuration.</li>

<li>Compare folder order to ensure CSVs import in the desired sequence.</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Partial Code: setupFolders()</summary>

<pre>

function setupFolders() {

  const ui = SpreadsheetApp.getUi();

  let message = "Current Folder Configuration:\n\n";

  for (const folderName in FOLDER_CONFIG) {

    const config = FOLDER_CONFIG[folderName];

    message += `${folderName} - ID: ${config.id}, Color: ${config.color}, Order: ${config.order}\n`;

  }

  ui.alert("Folder Configuration", message, ui.ButtonSet.OK);

}

</pre>

</details>

<p>

<a href="#section3_5">Next: 3.5 -- testFolderAccess()</a>

</p>

<!--

Glossary Terms Referenced:

- FOLDER_CONFIG

- CSV

- Drive

-->

# END SECTION 3 -- PART 5

# START SECTION 3 -- PART 6

<!--

===============================================

SECTION 3.5 -- testFolderAccess()

===============================================

-->

<h2 id="section3_5">3.5 testFolderAccess()</h2>

<p>

<strong>Purpose:</strong>

The <code>testFolderAccess()</code> function verifies that the script can access all Drive folders defined in 

<code>FOLDER_CONFIG</code>.

</p>

<p>

This is a diagnostic tool -- useful to run before CSV imports to ensure no Drive permissions or ID errors 

exist.

</p>

<h3>Parameters:</h3>

<p>

None -- called from the menu.


</p>

<h3>Usage Example:</h3>

<pre>

testFolderAccess();

</pre>

<p>

Or via menu:

<strong>CSV Import & Folders 
速
 Test Folder Access</strong>

</p>

<h3>Behavior:</h3>

<ol>

<li>Iterates over <code>FOLDER_CONFIG</code>.</li>

<li>For each folder:

    <ul>

    <li>Attempts to retrieve folder via <code>DriveApp.getFolderById()</code>.</li>

    <li>If successful 
速
 adds "SUCCESS" message.</li>

    <li>If error 
速
 catches exception 
速
 adds "ERROR" message with error details.</li>

    </ul>

</li>

<li>Displays summary message to user via <code>ui.alert()</code>.</li>

</ol>

<h3>Common Issues:</h3>

<ul>

<li>Invalid folder ID -- usually caused by copy/paste error.</li>

<li>User does not have permission to view the folder -- Drive sharing must be correct.</li>

<li>Folder was deleted -- check Drive.</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>Always run <strong>Test Folder Access</strong> after editing <code>FOLDER_CONFIG</code>.</li>

<li>Run again before large import runs, especially if team members are adding/removing folders.</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Partial Code: testFolderAccess()</summary>

<pre>

function testFolderAccess() {

  const ui = SpreadsheetApp.getUi();

  let message = "Folder Access Test:\n\n";

  for (const folderName in FOLDER_CONFIG) {

    try {

      const folder = DriveApp.getFolderById(FOLDER_CONFIG[folderName].id);

      message += `${folderName}: SUCCESS - Found folder.\n`;

    } catch (e) {

      message += `${folderName}: ERROR - ${e.message}\n`;

    }

  }

  ui.alert("Folder Access Results", message, ui.ButtonSet.OK);

}

</pre>

</details>

<p>

<a href="#section3_6">Next: 3.6 -- orderSheets()</a>

</p>

<!--

Glossary Terms Referenced:

- FOLDER_CONFIG

- Drive

- CSV

-->

# END SECTION 3 -- PART 6

# START SECTION 3 -- PART 7

<!--

===============================================

SECTION 3.6 -- orderSheets()

===============================================

-->

<h2 id="section3_6">3.6 orderSheets()</h2>

<p>

<strong>Purpose:</strong>

The <code>orderSheets()</code> function organizes all sheets in the spreadsheet into a logical order:

<ul>

<li><strong>SYSTEM_SHEETS first</strong></li>

<li>Home Pages next (per folder order)</li>

<li>CSV sheets last (by folder order)</li>

</ul>

</p>

<p>


This ensures consistent navigation for users and helps keep the spreadsheet organized as datasets grow.

</p>

<h3>Parameters:</h3>

<p>

None -- called from the menu.

</p>

<h3>Usage Example:</h3>

<pre>

orderSheets();

</pre>

<p>

Or via menu:

<strong>Sheet Management 
速
 Order Sheets</strong>

</p>

<h3>Behavior:</h3>

<ol>

<li>Builds <code>systemOrder</code> array from <code>SYSTEM_SHEETS</code> plus Home Pages (one per 

folder).</li>

<li>Moves SYSTEM_SHEETS and Home Pages to the top of the sheet order.</li>

<li>Builds ordered list of CSV sheets by folder order (<code>FOLDER_CONFIG</code>).</li>

<li>Moves CSV sheets into order after system sheets.</li>

<li>Skips sheets not in <code>FOLDER_CONFIG</code> (manual or extra sheets remain at end).</li>

</ol>

<h3>Common Issues:</h3>

<ul>

<li>If new SYSTEM_SHEETS are added but not reflected in <code>systemOrder</code>, order will appear wrong -- 

run <code>autoUpdateSystemSheetsList()</code> when v5.2+ is implemented.</li>

<li>Sheets not matching folder CSVs will not be ordered -- they remain at end (safe behavior).</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>Run <strong>Order Sheets</strong> after any CSV import to keep sheet navigation clean.</li>

<li>Especially useful after large batch imports or when adding new folders.</li>

<li>Helps ensure that SYSTEM_SHEETS always appear first for easy access.</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Partial Code: orderSheets()</summary>

<pre>

function orderSheets() {

  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();

  const sheets = spreadsheet.getSheets();

  const systemOrder = SYSTEM_SHEETS.slice();

  for (const folderName in FOLDER_CONFIG) {

    const homeSheetName = `Home - ${folderName}`;

    systemOrder.push(homeSheetName);

  }

  for (let i = systemOrder.length - 1; i >= 0; i--) {

    const sheetName = systemOrder[i];

    const sheet = spreadsheet.getSheetByName(sheetName);

    if (sheet) {

      spreadsheet.setActiveSheet(sheet);

      spreadsheet.moveActiveSheet(1);

    }

  }

  const folderOrder = Object.entries(FOLDER_CONFIG).sort((a, b) => a[1].order - b[1].order);

  let insertIndex = systemOrder.length + 1;

  folderOrder.forEach(([folderName, config]) => {

    const folder = DriveApp.getFolderById(config.id);

    const files = folder.getFilesByType(MimeType.CSV);

    while (files.hasNext()) {

      const fileName = files.next().getName().replace(/\.[^/.]+$/, 

"").trim().replace(/[\u200B-\u200D\uFEFF]/g, "");

      const sheet = spreadsheet.getSheetByName(fileName);

      if (sheet && !SYSTEM_SHEETS.includes(fileName)) {

        spreadsheet.setActiveSheet(sheet);

        spreadsheet.moveActiveSheet(insertIndex++);

      }

    }

  });

}

</pre>

</details>

<p>

<a href="#section3_7">Next: 3.7 -- createHomePagesForAllFolders()</a>

</p>

<!--

Glossary Terms Referenced:


- SYSTEM_SHEETS

- FOLDER_CONFIG

- Home Pages

- CSV

-->

# END SECTION 3 -- PART 7

# START SECTION 3 -- PART 8

<!--

===============================================

SECTION 3.7 -- createHomePagesForAllFolders()

===============================================

-->

<h2 id="section3_7">3.7 createHomePagesForAllFolders()</h2>

<p>

<strong>Purpose:</strong>

The <code>createHomePagesForAllFolders()</code> function creates or updates one "Home Page" sheet per Drive 

folder in <code>FOLDER_CONFIG</code>.

</p>

<p>

Home Pages provide an at-a-glance reference for each folder and can be customized with metadata or visual 

cues.

</p>

<h3>Parameters:</h3>

<p>

None -- called from the menu.

</p>

<h3>Usage Example:</h3>

<pre>

createHomePagesForAllFolders();

</pre>

<p>

Or via menu:

<strong>Sheet Management 
速
 Create Home Pages (All Folders)</strong>

</p>

<h3>Behavior:</h3>

<ol>

<li>Iterates over <code>FOLDER_CONFIG</code>.</li>

<li>For each folder:

    <ul>

    <li>Builds Home Page sheet name: <code>Home - FolderName</code>.</li>

    <li>If sheet exists 
速
 clears it.</li>

    <li>If not 
速
 creates new sheet.</li>

    <li>Populates with:

        <ul>

        <li>Folder name</li>

        <li>Folder ID</li>

        <li>Folder color</li>

        <li>Folder order</li>

        </ul>

    </li>

    <li>Sets tab color to match folder color.</li>

    <li>Logs to Error Log.</li>

    </ul>

</li>

</ol>

<h3>Common Issues:</h3>

<ul>

<li>Folder not in <code>FOLDER_CONFIG</code> 
速
 no Home Page created.</li>

<li>Sheet name conflicts (rare) -- avoid manually creating sheets named "Home - FolderName".</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>Use Home Pages to track which folders are configured in the system.</li>

<li>Advanced users can add extra metadata to Home Pages.</li>

<li>Helps with project documentation for large data collections.</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Partial Code: createHomePagesForAllFolders()</summary>

<pre>

function createHomePagesForAllFolders() {

  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();

  for (const folderName in FOLDER_CONFIG) {

    const sheetName = `Home - ${folderName}`;

    let sheet = spreadsheet.getSheetByName(sheetName);

    if (!sheet) {

      sheet = spreadsheet.insertSheet(sheetName);

    } else {


      sheet.clear();

    }

    const config = FOLDER_CONFIG[folderName];

    const data = [

      ["Home Page for Folder", folderName],

      ["Folder ID", config.id],

      ["Color", config.color],

      ["Order", config.order]

    ];

    sheet.getRange(1, 1, data.length, 2).setValues(data);

    sheet.setTabColor(config.color);

    logImportActivity(`Created Home Page: ${sheetName}`);

  }

}

</pre>

</details>

<p>

<a href="#section3_8">Next: 3.8 -- cleanQuoteMarks()</a>

</p>

<!--

Glossary Terms Referenced:

- FOLDER_CONFIG

- Home Pages

- Error Log

-->

# END SECTION 3 -- PART 8

# START SECTION 3 -- PART 9

<!--

===============================================

SECTION 3.8 -- cleanQuoteMarks()

===============================================

-->

<h2 id="section3_8">3.8 cleanQuoteMarks()</h2>

<p>

<strong>Purpose:</strong>

The <code>cleanQuoteMarks()</code> function removes unnecessary quote marks from all sheets in the 

spreadsheet.

</p>

<p>

CSV files sometimes contain quoted values (e.g. <code>"123"</code>), which can interfere with calculations.

This function automatically strips such quotes from all cells.

</p>

<h3>Parameters:</h3>

<p>

None -- called from the menu.

</p>

<h3>Usage Example:</h3>

<pre>

cleanQuoteMarks();

</pre>

<p>

Or via menu:

<strong>Data Cleaning 
速
 Clean Quote Marks</strong>

</p>

<h3>Behavior:</h3>

<ol>

<li>Iterates over all sheets in the spreadsheet.</li>

<li>For each sheet:

    <ul>

    <li>Skips SYSTEM_SHEETS.</li>

    <li>Iterates over all cells.</li>

    <li>For string cells, removes quote characters (").</li>

    <li>Writes cleaned values back to sheet.</li>

    </ul>

</li>

<li>Logs activity to Error Log.</li>

</ol>

<h3>Common Issues:</h3>

<ul>

<li>Processing large sheets may take several seconds.</li>

<li>Only removes literal quote characters -- does not affect embedded commas.</li>

<li>Does not remove single quotes -- see <code>cleanSheetQuotes()</code> for more advanced usage.</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>Run after importing CSVs that came from certain tools (e.g. Excel exports).</li>

<li>Does not affect numeric values or formulas.</li>

<li>Safe to run multiple times -- idempotent.</li>


</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Partial Code: cleanQuoteMarks()</summary>

<pre>

function cleanQuoteMarks() {

  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();

  const sheets = spreadsheet.getSheets();

  sheets.forEach(sheet => {

    const range = sheet.getDataRange();

    const values = range.getValues();

    const cleaned = values.map(row => row.map(cell =>

      typeof cell === "string" ? cell.replace(/"/g, "") : cell

    ));

    range.setValues(cleaned);

  });

  logImportActivity("Cleaned quote marks in all sheets.");

}

</pre>

</details>

<p>

<a href="#section3_9">Next: 3.9 -- cleanCurrentSheet()</a>

</p>

<!--

Glossary Terms Referenced:

- SYSTEM_SHEETS

- Error Log

- CSV

-->

# END SECTION 3 -- PART 9

# START SECTION 3 -- PART 10

<!--

===============================================

SECTION 3.9 -- cleanCurrentSheet()

===============================================

-->

<h2 id="section3_9">3.9 cleanCurrentSheet()</h2>

<p>

<strong>Purpose:</strong>

The <code>cleanCurrentSheet()</code> function removes unnecessary quote marks from the currently active sheet 

only.

</p>

<p>

Useful when you only want to clean one specific CSV sheet instead of all sheets.

</p>

<h3>Parameters:</h3>

<p>

None -- called from the menu.

</p>

<h3>Usage Example:</h3>

<pre>

cleanCurrentSheet();

</pre>

<p>

Or via menu:

<strong>Data Cleaning 
速
 Clean Current Sheet</strong>

</p>

<h3>Behavior:</h3>

<ol>

<li>Gets active sheet.</li>

<li>Checks if sheet is a SYSTEM_SHEET -- if so, shows warning and exits.</li>

<li>If not:

    <ul>

    <li>Reads all cell values.</li>

    <li>Removes quote characters (").</li>

    <li>Writes cleaned values back to sheet.</li>

    </ul>

</li>

<li>Logs activity to Error Log.</li>

</ol>

<h3>Common Issues:</h3>

<ul>

<li>Running on a SYSTEM_SHEET is not allowed -- warning is displayed.</li>

<li>Only removes literal quote characters -- advanced cleaning uses <code>cleanSheetQuotes()</code>.</li>

<li>Does not affect numeric values or formulas.</li>

</ul>

<h3>Tips:</h3>


<ul>

<li>Useful when testing specific CSV sheets.</li>

<li>Does not affect other sheets -- safer for partial cleaning workflows.</li>

<li>Safe to run multiple times.</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Partial Code: cleanCurrentSheet()</summary>

<pre>

function cleanCurrentSheet() {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();

  const range = sheet.getDataRange();

  const values = range.getValues();

  const cleaned = values.map(row => row.map(cell =>

    typeof cell === "string" ? cell.replace(/"/g, "") : cell

  ));

  range.setValues(cleaned);

  logImportActivity(`Cleaned quote marks in sheet: ${sheet.getName()}`);

}

</pre>

</details>

<p>

<a href="#section3_10">Next: 3.10 -- hideNegativeTimeRows()</a>

</p>

<!--

Glossary Terms Referenced:

- SYSTEM_SHEETS

- Error Log

- CSV

-->

# END SECTION 3 -- PART 10

# START SECTION 3 -- PART 11

<!--

===============================================

SECTION 3.10 -- hideNegativeTimeRows()

===============================================

-->

<h2 id="section3_10">3.10 hideNegativeTimeRows()</h2>

<p>

<strong>Purpose:</strong>

The <code>hideNegativeTimeRows()</code> function hides all rows in the active sheet where column A (Time) 

contains negative values.

</p>

<p>

This is useful to visually clean the dataset without permanently deleting rows.

</p>

<h3>Parameters:</h3>

<p>

None -- called from the menu.

</p>

<h3>Usage Example:</h3>

<pre>

hideNegativeTimeRows();

</pre>

<p>

Or via menu:

<strong>Data Cleaning 
速
 Hide Negative Time Rows</strong>

</p>

<h3>Behavior:</h3>

<ol>

<li>Gets active sheet.</li>

<li>Checks column A header -- must be <code>Time (ms)</code>.</li>

<li>If header matches:

    <ul>

    <li>Iterates over all rows.</li>

    <li>Hides rows where column A value is &lt; 0.</li>

    <li>Stops when first non-negative value is found.</li>

    </ul>

</li>

<li>If header does not match, shows warning to user.</li>

<li>Logs activity to Error Log.</li>

</ol>

<h3>Common Issues:</h3>

<ul>

<li>Column A header must be exactly <code>Time (ms)</code> -- case sensitive.</li>

<li>Hides rows -- does not delete them -- data remains in sheet.</li>

<li>Only affects the active sheet.</li>

</ul>


<h3>Tips:</h3>

<ul>

<li>Run after importing CSVs with pre-experiment time data.</li>

<li>Safe for quick visual cleanup -- reversible (unhide rows).</li>

<li>Does not affect formulas or data in other columns.</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Partial Code: hideNegativeTimeRows()</summary>

<pre>

function hideNegativeTimeRows() {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();

  const timeHeader = sheet.getRange(1, 1).getValue();

  if (timeHeader !== "Time (ms)") {

    SpreadsheetApp.getUi().alert("Column A header must be 'Time (ms)' to use this function.");

    return;

  }

  const lastRow = sheet.getLastRow();

  const timeValues = sheet.getRange(2, 1, lastRow - 1).getValues();

  for (let i = 0; i < timeValues.length; i++) {

    if (timeValues[i][0] < 0) {

      sheet.hideRows(i + 2);

    } else {

      break;

    }

  }

  logImportActivity(`Hide Negative Time Rows on sheet: ${sheet.getName()}`);

}

</pre>

</details>

<p>

<a href="#section3_11">Next: 3.11 -- deleteNegativeTimeRows()</a>

</p>

<!--

Glossary Terms Referenced:

- Error Log

- CSV

- Time (ms)

-->

# END SECTION 3 -- PART 11

# START SECTION 3 -- PART 12

<!--

===============================================

SECTION 3.11 -- deleteNegativeTimeRows()

===============================================

-->

<h2 id="section3_11">3.11 deleteNegativeTimeRows()</h2>

<p>

<strong>Purpose:</strong>

The <code>deleteNegativeTimeRows()</code> function permanently deletes all rows in the active sheet where 

column A (Time) contains negative values.

</p>

<p>

This is useful when preparing a final cleaned dataset for regression or export.

</p>

<h3>Parameters:</h3>

<p>

None -- called from the menu.

</p>

<h3>Usage Example:</h3>

<pre>

deleteNegativeTimeRows();

</pre>

<p>

Or via menu:

<strong>Data Cleaning 
速
 Delete Negative Time Rows</strong>

</p>

<h3>Behavior:</h3>

<ol>

<li>Gets active sheet.</li>

<li>Checks column A header -- must be <code>Time (ms)</code>.</li>

<li>If header matches:

    <ul>

    <li>Counts how many rows at top of column A have values &lt; 0.</li>

    <li>Deletes those rows.</li>

    <li>Stops at first non-negative value.</li>

    </ul>

</li>


<li>If header does not match, shows warning to user.</li>

<li>Logs activity to Error Log.</li>

</ol>

<h3>Common Issues:</h3>

<ul>

<li>Column A header must be exactly <code>Time (ms)</code> -- case sensitive.</li>

<li>This is a permanent delete -- cannot be undone except by spreadsheet undo or re-import.</li>

<li>Only affects the active sheet.</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>Use when preparing final data for regression.</li>

<li>Run after verifying correct column header.</li>

<li>Safe to run multiple times -- will skip if no negative rows remain.</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Partial Code: deleteNegativeTimeRows()</summary>

<pre>

function deleteNegativeTimeRows() {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();

  const timeHeader = sheet.getRange(1, 1).getValue();

  if (timeHeader !== "Time (ms)") {

    SpreadsheetApp.getUi().alert("Column A header must be 'Time (ms)' to use this function.");

    return;

  }

  const lastRow = sheet.getLastRow();

  const timeValues = sheet.getRange(2, 1, lastRow - 1).getValues();

  let rowsToDelete = 0;

  for (let i = 0; i < timeValues.length; i++) {

    if (timeValues[i][0] < 0) {

      rowsToDelete++;

    } else {

      break;

    }

  }

  if (rowsToDelete > 0) {

    sheet.deleteRows(2, rowsToDelete);

    logImportActivity(`Deleted ${rowsToDelete} negative time rows on sheet: ${sheet.getName()}`);

  } else {

    SpreadsheetApp.getUi().alert("No negative time rows found to delete.");

  }

}

</pre>

</details>

<p>

<a href="#section3_12">Next: 3.12 -- createDataValidationSheet()</a>

</p>

<!--

Glossary Terms Referenced:

- Error Log

- CSV

- Time (ms)

-->

# END SECTION 3 -- PART 12

# START SECTION 3 -- PART 13

<!--

===============================================

SECTION 3.12 -- createDataValidationSheet()

===============================================

-->

<h2 id="section3_12">3.12 createDataValidationSheet()</h2>

<p>

<strong>Purpose:</strong>

The <code>createDataValidationSheet()</code> function creates (or recreates) a <strong>Data 

Validation</strong> sheet.

</p>

<p>

This sheet can be used for:

<ul>

<li>Cross-validating data across multiple CSV sheets.</li>

<li>Ensuring consistent intervals or data formats.</li>

<li>Storing notes or validation results for processed datasets.</li>

</ul>

</p>

<h3>Parameters:</h3>

<p>

None -- called from the menu.


</p>

<h3>Usage Example:</h3>

<pre>

createDataValidationSheet();

</pre>

<p>

Or via menu:

<strong>Data Processing 
速
 Create Data Validation Sheet</strong>

</p>

<h3>Behavior:</h3>

<ol>

<li>Checks for existing <code>Data Validation</code> sheet.</li>

<li>If exists 
速
 deletes it (ensures clean state).</li>

<li>Creates new <code>Data Validation</code> sheet.</li>

<li>Populates with default message:

<pre>Data Validation Sheet created.</pre></li>

<li>Logs activity to Error Log.</li>

</ol>

<h3>Common Issues:</h3>

<ul>

<li>Sheet is deleted and recreated -- users should not store manual data here.</li>

<li>Does not automatically populate validation formulas -- this is designed to be user-customizable.</li>

<li>Useful primarily for advanced workflows.</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>Use this sheet to compare time intervals between sheets.</li>

<li>Can add formulas or conditional formatting for consistency checks.</li>

<li>Can be extended in future (v5.2+) for automated cross-sheet validation.</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Partial Code: createDataValidationSheet()</summary>

<pre>

function createDataValidationSheet() {

  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();

  let sheet = spreadsheet.getSheetByName("Data Validation");

  if (sheet) {

    spreadsheet.deleteSheet(sheet);

  }

  sheet = spreadsheet.insertSheet("Data Validation");

  sheet.getRange(1, 1).setValue("Data Validation Sheet created.");

  logImportActivity("Created Data Validation Sheet.");

}

</pre>

</details>

<p>

<a href="#section3_13">Next: 3.13 -- runIntervalAnalysis()</a>

</p>

<!--

Glossary Terms Referenced:

- Data Validation

- Error Log

-->

# END SECTION 3 -- PART 13

# START SECTION 3 -- PART 14

<!--

===============================================

SECTION 3.13 -- runIntervalAnalysis()

===============================================

-->

<h2 id="section3_13">3.13 runIntervalAnalysis()</h2>

<p>

<strong>Purpose:</strong>

The <code>runIntervalAnalysis()</code> function analyzes time intervals in each data sheet (excluding 

SYSTEM_SHEETS and Home Pages).

</p>

<p>

This helps detect:

<ul>

<li>Gaps in time data</li>

<li>Inconsistent time steps</li>

<li>Overall time span of each sheet</li>

</ul>

</p>

<h3>Parameters:</h3>

<p>

None -- called from the menu.


</p>

<h3>Usage Example:</h3>

<pre>

runIntervalAnalysis();

</pre>

<p>

Or via menu:

<strong>Data Processing 
速
 Interval Analysis</strong>

</p>

<h3>Behavior:</h3>

<ol>

<li>Checks for existing <code>Interval Analysis</code> sheet.</li>

<li>If exists 
速
 deletes it (ensures clean state).</li>

<li>Creates new <code>Interval Analysis</code> sheet.</li>

<li>Finds all non-system, non-Home Page sheets.</li>

<li>For each sheet:

    <ul>

    <li>Reads column A (Time data).</li>

    <li>Calculates:

        <ul>

        <li>Minimum Time</li>

        <li>Maximum Time</li>

        <li>Minimum Step (interval)</li>

        <li>Maximum Step</li>

        <li>Gap count (interval &gt; 1.5x min step)</li>

        </ul>

    </li>

    <li>Writes results to <code>Interval Analysis</code> sheet.</li>

    </ul>

</li>

<li>Logs activity to Error Log.</li>

</ol>

<h3>Common Issues:</h3>

<ul>

<li>Column A must contain numeric time data.</li>

<li>Sheets without valid time data are skipped.</li>

<li>Performance may be slower on very large datasets (optimize in v5.2+ planned).</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>Run before regression to check data quality.</li>

<li>Useful for detecting:

    <ul>

    <li>Missing rows</li>

    <li>Sensor glitches</li>

    <li>Non-uniform sampling</li>

    </ul>

</li>

<li>Can be extended with future smoothing tools.</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Partial Code: runIntervalAnalysis()</summary>

<pre>

function runIntervalAnalysis() {

  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();

  let sheet = spreadsheet.getSheetByName("Interval Analysis");

  if (sheet) {

    spreadsheet.deleteSheet(sheet);

  }

  sheet = spreadsheet.insertSheet("Interval Analysis");

  const allSheets = spreadsheet.getSheets().filter(s =>

    !SYSTEM_SHEETS.includes(s.getName()) &&

    !s.getName().startsWith("Home - ")

  );

  let row = 1;

  allSheets.forEach(s => {

    const timeCol = s.getRange(2, 1, s.getLastRow() - 1).getValues().flat().filter(Number.isFinite);

    if (timeCol.length === 0) return;

    const minTime = Math.min(...timeCol);

    const maxTime = Math.max(...timeCol);

    const intervals = timeCol.slice(1).map((v, i) => v - timeCol[i]);

    const minStep = Math.min(...intervals);

    const maxStep = Math.max(...intervals);

    const gaps = intervals.filter(gap => gap > 1.5 * minStep).length;

    sheet.getRange(row, 1, 1, 7).setValues([[

      s.getName(), minTime, maxTime, minStep, maxStep, gaps, ""

    ]]);


    row++;

  });

  logImportActivity("Interval Analysis completed.");

}

</pre>

</details>

<p>

<a href="#section3_14">Next: 3.14 -- createDataProcessing()</a>

</p>

<!--

Glossary Terms Referenced:

- Interval Analysis

- SYSTEM_SHEETS

- Time (ms)

- Error Log

-->

# END SECTION 3 -- PART 14

# START SECTION 3 -- PART 15

<!--

===============================================

SECTION 3.14 -- createDataProcessing()

===============================================

-->

<h2 id="section3_14">3.14 createDataProcessing()</h2>

<p>

<strong>Purpose:</strong>

The <code>createDataProcessing()</code> function creates (or recreates) the <strong>Data Processing</strong> 

sheet.

</p>

<p>

This sheet provides the interface for setting up regression runs:

<ul>

<li>Formula definition</li>

<li>Algorithm selection</li>

<li>Data range specification</li>

<li>Notes</li>

</ul>

</p>

<h3>Parameters:</h3>

<p>

None -- called from the menu.

</p>

<h3>Usage Example:</h3>

<pre>

createDataProcessing();

</pre>

<p>

Or via menu:

<strong>Data Processing 
速
 Create Data Processing Sheet</strong>

</p>

<h3>Behavior:</h3>

<ol>

<li>Checks for existing <code>Data Processing</code> sheet.</li>

<li>If exists 
速
 deletes it (ensures clean state).</li>

<li>Creates new <code>Data Processing</code> sheet.</li>

<li>Populates with header fields:

    <ul>

    <li>Formula</li>

    <li>Algorithm</li>

    <li>Data Range</li>

    <li>Notes</li>

    </ul>

</li>

<li>Logs activity to Error Log.</li>

</ol>

<h3>Common Issues:</h3>

<ul>

<li>Sheet is recreated -- users should save manual notes elsewhere if needed.</li>

<li>Does not populate default formula -- user must enter desired regression formula manually.</li>

<li>Only one Data Processing sheet is supported -- advanced batch modes planned in v5.2+.</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>Use this sheet as the primary control panel for regression runs.</li>

<li>Formula and algorithm fields can be reused for multiple runs.</li>

<li>Integrates cleanly with Run Regression and Regression Results workflows.</li>

</ul>

<!-- Example -- Safe Embed -->


<details>

<summary>Partial Code: createDataProcessing()</summary>

<pre>

function createDataProcessing() {

  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();

  let sheet = spreadsheet.getSheetByName("Data Processing");

  if (sheet) {

    spreadsheet.deleteSheet(sheet);

  }

  sheet = spreadsheet.insertSheet("Data Processing");

  const headers = [

    ["Formula", ""],

    ["Algorithm", ""],

    ["Data Range", ""],

    ["Notes", ""]

  ];

  sheet.getRange(1, 1, headers.length, 2).setValues(headers);

  logImportActivity("Created Data Processing Sheet.");

}

</pre>

</details>

<p>

<a href="#section3_15">Next: 3.15 -- editDataProcessingFormula()</a>

</p>

<!--

Glossary Terms Referenced:

- Data Processing

- Regression

- Algorithm

- Error Log

-->

# END SECTION 3 -- PART 15

# START SECTION 3 -- PART 16

<!--

===============================================

SECTION 3.15 -- editDataProcessingFormula()

===============================================

-->

<h2 id="section3_15">3.15 editDataProcessingFormula()</h2>

<p>

<strong>Purpose:</strong>

The <code>editDataProcessingFormula()</code> function helps users locate and edit the regression formula in 

the <strong>Data Processing</strong> sheet.

</p>

<p>

This provides a guided workflow for users unfamiliar with Google Sheets navigation.

</p>

<h3>Parameters:</h3>

<p>

None -- called from the menu.

</p>

<h3>Usage Example:</h3>

<pre>

editDataProcessingFormula();

</pre>

<p>

Or via menu:

<strong>Data Processing 
速
 Edit Data Processing Formula</strong>

</p>

<h3>Behavior:</h3>

<ol>

<li>Checks for existence of <code>Data Processing</code> sheet.</li>

<li>If not found 
速
 shows warning to user.</li>

<li>If found:

    <ul>

    <li>Activates the <code>Data Processing</code> sheet.</li>

    <li>Activates the Formula cell (<code>A2</code>).</li>

    <li>Displays UI alert to guide user:

        <pre>Edit your regression formula in cell A2.</pre>

    </li>

    </ul>

</li>

<li>Logs activity to Error Log (optional).</li>

</ol>

<h3>Common Issues:</h3>

<ul>

<li>Will show error if <code>Data Processing</code> sheet is missing -- user must run 

<code>createDataProcessing()</code> first.</li>


<li>Only supports editing Formula field -- does not modify Algorithm or Data Range fields.</li>

<li>Relies on cell <code>A2</code> being the formula field -- do not change sheet layout.</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>Encourage users to experiment with different formula models.</li>

<li>Advanced users can write complex formulas -- supports arbitrary valid regression models.</li>

<li>Formula entered here is passed directly to Run Regression.</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Partial Code: editDataProcessingFormula()</summary>

<pre>

function editDataProcessingFormula() {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Data Processing");

  if (!sheet) {

    SpreadsheetApp.getUi().alert("Data Processing sheet does not exist.");

    return;

  }

  SpreadsheetApp.setActiveSheet(sheet);

  sheet.getRange("A2").activate();

  SpreadsheetApp.getUi().alert("Edit your regression formula in cell A2.");

}

</pre>

</details>

<p>

<a href="#section3_16">Next: 3.16 -- runRegression()</a>

</p>

<!--

Glossary Terms Referenced:

- Data Processing

- Regression

- Formula

- Error Log

-->

# END SECTION 3 -- PART 16

# START SECTION 3 -- PART 34

<!--

===============================================

SECTION 3.33 -- showHelpFunctions2()

===============================================

-->

<h2 id="section3_33">3.33 showHelpFunctions2()</h2>

<p>

<strong>Purpose:</strong>

The <code>showHelpFunctions2()</code> function displays the <strong>HelpDialog_Functions2.html</strong> page 

in the Sidebar.

</p>

<p>

This is part of the v5.1+ **split Help architecture**, which improves Sidebar performance for large Help 

systems:

<ul>

<li>HelpDialog_Main.html 
速
 Sections 1OE10 + TOC</li>

<li>HelpDialog_Functions1.html 
速
 Functions AOEM</li>

<li>HelpDialog_Functions2.html 
速
 Functions NOEZ</li>

</ul>

</p>

<h3>Parameters:</h3>

<p>

None -- called from the menu.

</p>

<h3>Usage Example:</h3>

<pre>

showHelpFunctions2();

</pre>

<p>

Or via menu:

<strong>Help 
速
 Functions NOEZ</strong>

</p>

<h3>Behavior:</h3>

<ol>

<li>Uses <code>HtmlService.createHtmlOutputFromFile("HelpDialog_Functions2")</code>.</li>

<li>Sets window size to 800x600 px (Sidebar defaults apply).</li>

<li>Displays Functions NOEZ in Sidebar.</li>

</ol>

<h3>Common Issues:</h3>

<ul>

<li>If <code>HelpDialog_Functions2.html</code> is missing 
速
 function will throw error.</li>


<li>Split architecture is designed for large Help systems -- use only if needed.</li>

</ul>

<h3>Tips:</h3>

<ul>

<li>Sidebar split greatly improves load times on large HelpDialog systems.</li>

<li>Advanced users prefer Sidebar split for faster navigation.</li>

<li>Matches standard v5.1 menu and architecture.</li>

</ul>

<!-- Example -- Safe Embed -->

<details>

<summary>Partial Code: showHelpFunctions2()</summary>

<pre>

function showHelpFunctions2() {

  const html = HtmlService.createHtmlOutputFromFile("HelpDialog_Functions2")

    .setWidth(800)

    .setHeight(600);

  SpreadsheetApp.getUi().showSidebar(html);

}

</pre>

</details>

<p>

<a href="#section3_34">Next: 3.34 -- showHelpFullSource()</a>

</p>

<!--

Glossary Terms Referenced:

- Help Dialog

- Sidebar

- HtmlService

- Split Help Architecture

-->

# END SECTION 3 -- PART 34

=== STOP HelpDialog_Functions1.html ===

<p style="text-align: center; margin-top: 40px;">

    <a href="#toc">
nn
 Return to Table of Contents</a> &nbsp;|&nbsp;

    <a href="#section4">
叩
n
 Proceed to Section 4 -- API Reference</a>

</p>

=== START NEW FILE: HelpDialog_Functions2.html ===

